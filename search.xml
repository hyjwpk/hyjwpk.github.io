<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>图像处理上机报告</title>
      <link href="/2022/08/02/tu-xiang-chu-li-shang-ji-bao-gao/"/>
      <url>/2022/08/02/tu-xiang-chu-li-shang-ji-bao-gao/</url>
      
        <content type="html"><![CDATA[<h1 id="图像处理上机报告"><a href="#图像处理上机报告" class="headerlink" title="图像处理上机报告"></a>图像处理上机报告</h1><h2 id="实验一-图像几何变换"><a href="#实验一-图像几何变换" class="headerlink" title="实验一 图像几何变换"></a>实验一 图像几何变换</h2><h3 id="1、-图像的平移"><a href="#1、-图像的平移" class="headerlink" title="1、 图像的平移"></a>1、 图像的平移</h3><ul><li><p>使用<code>imread</code>读取灰度图像</p></li><li><p>使用<code>input</code>函数获得水平和垂直平移量</p></li><li><p>使用<code>imtranslate</code>对图像进行平移</p></li><li><p>使用<code>imshow</code>显示平移前后的图像对比</p></li></ul><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">source <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">'lena.bmp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tx <span class="token operator">=</span> <span class="token function">input</span><span class="token punctuation">(</span>"水平平移量<span class="token operator">:</span>"<span class="token punctuation">)</span><span class="token punctuation">;</span>ty <span class="token operator">=</span> <span class="token function">input</span><span class="token punctuation">(</span>"垂直平移量<span class="token operator">:</span>"<span class="token punctuation">)</span><span class="token punctuation">;</span>output <span class="token operator">=</span> <span class="token function">imtranslate</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span><span class="token punctuation">[</span>tx<span class="token punctuation">,</span>ty<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'原图'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'平移后'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A%E6%88%AA%E5%9B%BE/lab1_%E5%9B%BE%E5%83%8F%E7%9A%84%E5%B9%B3%E7%A7%BB.png" alt="图像的平移"></p><h3 id="2、图像的旋转"><a href="#2、图像的旋转" class="headerlink" title="2、图像的旋转"></a>2、图像的旋转</h3><ul><li><p>使用<code>imread</code>读取灰度图像</p></li><li><p>使用<code>input</code>函数获得旋转角度</p></li><li><p>使用<code>imrotate</code>对图像进行旋转，选择<code>最近邻插值</code>和<code>双线性插值</code></p></li><li><p>使用<code>imshow</code>显示<code>最近邻插值</code>和<code>双线性插值</code>的图像对比</p></li></ul><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">source <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">'lena.bmp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>angle <span class="token operator">=</span> <span class="token function">input</span><span class="token punctuation">(</span>"旋转角度<span class="token operator">:</span>"<span class="token punctuation">)</span><span class="token punctuation">;</span>output1 <span class="token operator">=</span> <span class="token function">imrotate</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span>angle<span class="token punctuation">,</span><span class="token string">'nearest'</span><span class="token punctuation">,</span><span class="token string">'crop'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%nearest为最近邻插值</span>output2 <span class="token operator">=</span> <span class="token function">imrotate</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span>angle<span class="token punctuation">,</span><span class="token string">'bilinear'</span><span class="token punctuation">,</span><span class="token string">'crop'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%bilinear为双线性插值</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>output1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'最近邻插值'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>output2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'双线性插值'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A%E6%88%AA%E5%9B%BE/lab1_%E5%9B%BE%E5%83%8F%E7%9A%84%E6%97%8B%E8%BD%AC.png" alt="图像的旋转"></p><h3 id="3、图像的缩放"><a href="#3、图像的缩放" class="headerlink" title="3、图像的缩放"></a>3、图像的缩放</h3><ul><li><p>使用<code>imread</code>读取灰度图像</p></li><li><p>使用<code>input</code>函数获得水平和垂直缩放量</p></li><li><p>使用<code>imresize</code>对图像进行缩放，选择<code>最近邻插值</code>和<code>双线性插值</code></p></li><li><p>使用<code>imshow</code>显示<code>最近邻插值</code>和<code>双线性插值</code>的图像对比</p></li></ul><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">source <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">'lena.bmp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span>r<span class="token punctuation">,</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token function">input</span><span class="token punctuation">(</span>"水平缩放量<span class="token operator">:</span>"<span class="token punctuation">)</span><span class="token punctuation">;</span>y <span class="token operator">=</span> <span class="token function">input</span><span class="token punctuation">(</span>"垂直缩放量<span class="token operator">:</span>"<span class="token punctuation">)</span><span class="token punctuation">;</span>output1 <span class="token operator">=</span> <span class="token function">imresize</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span><span class="token punctuation">[</span>r<span class="token operator">*</span>y<span class="token punctuation">,</span>l<span class="token operator">*</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'nearest'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%nearest为最近邻插值</span>output2 <span class="token operator">=</span> <span class="token function">imresize</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span><span class="token punctuation">[</span>r<span class="token operator">*</span>y<span class="token punctuation">,</span>l<span class="token operator">*</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'bilinear'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%bilinear为双线性插值</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>output1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'最近邻插值'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>output2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'双线性插值'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A%E6%88%AA%E5%9B%BE/lab1_%E5%9B%BE%E5%83%8F%E7%9A%84%E7%BC%A9%E6%94%BE.png" alt="图像的缩放"></p><h3 id="4、图像几何失真校正"><a href="#4、图像几何失真校正" class="headerlink" title="4、图像几何失真校正"></a>4、图像几何失真校正</h3><ul><li><p>使用<code>imread</code>读取几何失真图像与原图</p></li><li><p>使用<code>imshow</code>显示几何失真图像与原图</p></li><li><p>使用<code>ginput</code>函数获得控制点对</p></li><li><p>使用<code>fitgeotrans</code>基于控制点对对几何变换进行拟合</p></li><li><p>使用<code>imwarp</code>应用几何变换校正几何失真，选择<code>最近邻插值</code>和<code>双线性插值</code></p></li><li><p>使用<code>imshow</code>显示<code>最近邻插值</code>和<code>双线性插值</code>的图像对比</p></li></ul><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">source <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">'alphabet2.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>origin <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">'alphabet1.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">ginput</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%获得几何失真图像与原图一一对应的四组控制点对</span>movingPoints <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">%几何失真图像控制点</span>fixedPoints <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">%原图控制点</span>tform <span class="token operator">=</span> <span class="token function">fitgeotrans</span><span class="token punctuation">(</span>movingPoints<span class="token punctuation">,</span>fixedPoints<span class="token punctuation">,</span><span class="token string">'projective'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%对几何变换拟合</span>output1 <span class="token operator">=</span> <span class="token function">imwarp</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span>tform<span class="token punctuation">,</span><span class="token string">'nearest'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%nearest为最近邻插值</span>output2 <span class="token operator">=</span> <span class="token function">imwarp</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span>tform<span class="token punctuation">,</span><span class="token string">'bilinear'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%bilinear为双线性插值</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>output1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'最近邻插值'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>output2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'双线性插值'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A%E6%88%AA%E5%9B%BE/lab1_%E5%9B%BE%E5%83%8F%E5%87%A0%E4%BD%95%E5%A4%B1%E7%9C%9F%E6%A0%A1%E6%AD%A3.png" alt="图像几何失真校正"></p><h2 id="实验二-图像点处理增强"><a href="#实验二-图像点处理增强" class="headerlink" title="实验二 图像点处理增强"></a>实验二 图像点处理增强</h2><h3 id="1、灰度的线性变换"><a href="#1、灰度的线性变换" class="headerlink" title="1、灰度的线性变换"></a>1、灰度的线性变换</h3><ul><li><p>使用<code>imread</code>读取灰度图像</p></li><li><p>使用<code>input</code>函数获得斜率和截距</p></li><li><p>对图像上的每个点进行线性映射</p></li><li><p>使用<code>imshow</code>显示线性变换前后的图像对比</p></li></ul><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">source <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">'lena.bmp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span>r<span class="token punctuation">,</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>output <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>fa <span class="token operator">=</span> <span class="token function">input</span><span class="token punctuation">(</span>"斜率<span class="token operator">:</span>"<span class="token punctuation">)</span><span class="token punctuation">;</span>fb <span class="token operator">=</span> <span class="token function">input</span><span class="token punctuation">(</span>"截距<span class="token operator">:</span>"<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">:</span> r    <span class="token keyword">for</span> <span class="token number">j</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">:</span> l        <span class="token function">output</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">source</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">*</span>fa<span class="token operator">+</span>fb<span class="token punctuation">;</span><span class="token comment">%进行线性映射</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'原图'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">uint8</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'线性变换后'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A%E6%88%AA%E5%9B%BE/lab2_%E7%81%B0%E5%BA%A6%E7%9A%84%E7%BA%BF%E6%80%A7%E5%8F%98%E6%8D%A2.png" alt="lab2_灰度的线性变换"></p><h3 id="2、灰度拉伸"><a href="#2、灰度拉伸" class="headerlink" title="2、灰度拉伸"></a>2、灰度拉伸</h3><ul><li><p>使用<code>imread</code>读取灰度图像</p></li><li><p>使用<code>input</code>函数获得转折点</p></li><li><p>使用自己定义的函数对图像进行灰度拉伸</p></li><li><p>使用<code>imshow</code>显示灰度拉伸前后的图像对比</p></li></ul><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">source <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">'lena.bmp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span>r<span class="token punctuation">,</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>output <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>x1 <span class="token operator">=</span> <span class="token function">input</span><span class="token punctuation">(</span>"x1<span class="token operator">:</span>"<span class="token punctuation">)</span><span class="token punctuation">;</span>y1 <span class="token operator">=</span> <span class="token function">input</span><span class="token punctuation">(</span>"y1<span class="token operator">:</span>"<span class="token punctuation">)</span><span class="token punctuation">;</span>x2 <span class="token operator">=</span> <span class="token function">input</span><span class="token punctuation">(</span>"x2<span class="token operator">:</span>"<span class="token punctuation">)</span><span class="token punctuation">;</span>y2 <span class="token operator">=</span> <span class="token function">input</span><span class="token punctuation">(</span>"y2<span class="token operator">:</span>"<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">:</span> r    <span class="token keyword">for</span> <span class="token number">j</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">:</span> l        <span class="token function">output</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x1<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%进行线性映射</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'原图'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">uint8</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'灰度拉伸后'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token punctuation">[</span>fx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>x1<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y2<span class="token punctuation">)</span><span class="token comment">%灰度拉伸函数</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> x1<span class="token punctuation">)</span>        fx <span class="token operator">=</span> y1 <span class="token operator">/</span> x1 <span class="token operator">*</span> x<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> x2<span class="token punctuation">)</span>            fx <span class="token operator">=</span> <span class="token punctuation">(</span>y2 <span class="token operator">-</span> y1<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>x2 <span class="token operator">-</span> x1<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>x <span class="token operator">-</span> x1<span class="token punctuation">)</span> <span class="token operator">+</span> y1<span class="token punctuation">;</span>        <span class="token keyword">else</span>                fx <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">255</span> <span class="token operator">-</span> y2<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">255</span> <span class="token operator">-</span> x2<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>x <span class="token operator">-</span> x2<span class="token punctuation">)</span> <span class="token operator">+</span> y2<span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span>  <span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A%E6%88%AA%E5%9B%BE/lab2_%E7%81%B0%E5%BA%A6%E6%8B%89%E4%BC%B8.png" alt="lab2_灰度拉伸"></p><h3 id="3、灰度直方图"><a href="#3、灰度直方图" class="headerlink" title="3、灰度直方图"></a>3、灰度直方图</h3><ul><li>使用<code>imread</code>读取灰度图像</li><li>使用<code>input</code>函数获得灰度直方图的下限和上限</li><li>使用<code>histogram</code>显示给定范围内的灰度直方图</li></ul><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">source <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">'lena.bmp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>min <span class="token operator">=</span> <span class="token function">input</span><span class="token punctuation">(</span>"下限<span class="token operator">:</span>"<span class="token punctuation">)</span><span class="token punctuation">;</span>max <span class="token operator">=</span> <span class="token function">input</span><span class="token punctuation">(</span>"上限<span class="token operator">:</span>"<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">histogram</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span><span class="token string">'BinLimits'</span><span class="token punctuation">,</span><span class="token punctuation">[</span>min<span class="token punctuation">,</span>max<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">%显示给定范围的灰度直方图</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A%E6%88%AA%E5%9B%BE/lab2_%E7%81%B0%E5%BA%A6%E7%9B%B4%E6%96%B9%E5%9B%BE.png" alt="lab2_灰度直方图"></p><h3 id="4、直方图均衡"><a href="#4、直方图均衡" class="headerlink" title="4、直方图均衡"></a>4、直方图均衡</h3><ul><li><p>使用<code>imread</code>读取灰度图像</p></li><li><p>使用<code>imshow</code>显示原图和原图直方图</p></li><li><p>使用<code>histeq</code>函数进行直方图均衡</p></li><li><p>使用<code>imshow</code>显示直方图均衡后的结果和对应的直方图</p></li><li><p>使用<code>histeq</code>进行直方图规定化，使用<code>normpdf</code>得到规定化所需的高斯函数</p></li><li><p>使用<code>imshow</code>显示直方图规定化后的结果和对应的直方图</p></li></ul><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">source <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">'pout.bmp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'原图'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">histogram</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'原图直方图'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>output1 <span class="token operator">=</span> <span class="token function">histeq</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%直方图均衡</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>output1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'直方图均衡'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">histogram</span><span class="token punctuation">(</span>output1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'增强后直方图'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>output2 <span class="token operator">=</span> <span class="token function">histeq</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span><span class="token function">normpdf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%使用均值127，标准差40的高斯函数进行规定化</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>output2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'直方图规定化'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">histogram</span><span class="token punctuation">(</span>output2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'规定化后直方图'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A%E6%88%AA%E5%9B%BE/lab2_%E7%9B%B4%E6%96%B9%E5%9B%BE%E5%9D%87%E8%A1%A1.png" alt="lab2_直方图均衡"></p><h2 id="实验三-图像空间域滤波增强"><a href="#实验三-图像空间域滤波增强" class="headerlink" title="实验三 图像空间域滤波增强"></a>实验三 图像空间域滤波增强</h2><h3 id="1、用均值滤波器去除图像中的噪声（选-3x3-窗口）"><a href="#1、用均值滤波器去除图像中的噪声（选-3x3-窗口）" class="headerlink" title="1、用均值滤波器去除图像中的噪声（选 3x3 窗口）"></a>1、用均值滤波器去除图像中的噪声（选 3x3 窗口）</h3><ul><li>使用<code>imread</code>读取灰度图像</li><li>使用<code>imnoise</code>函数添加椒盐噪声和高斯噪声</li><li>编写了<code>Random</code>函数用于获取随机脉冲噪声</li><li>对每个噪声图像使用<code>imfilter</code>应用<code>fspecial</code>生成的3x3均值滤波器</li><li>使用<code>imshow</code>显示增强前后的图像对比</li></ul><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">source <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">'lena.bmp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%添加噪声</span>pepper <span class="token operator">=</span> <span class="token function">imnoise</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span><span class="token string">'salt &amp; pepper'</span><span class="token punctuation">,</span><span class="token number">0.03</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gaussian <span class="token operator">=</span> <span class="token function">imnoise</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span><span class="token string">'gaussian'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>random <span class="token operator">=</span> <span class="token function">Random</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%均值滤波</span>pepper_output <span class="token operator">=</span> <span class="token function">imfilter</span><span class="token punctuation">(</span>pepper<span class="token punctuation">,</span><span class="token function">fspecial</span><span class="token punctuation">(</span><span class="token string">'average'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gaussian_output <span class="token operator">=</span> <span class="token function">imfilter</span><span class="token punctuation">(</span>gaussian<span class="token punctuation">,</span><span class="token function">fspecial</span><span class="token punctuation">(</span><span class="token string">'average'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>poisson_output <span class="token operator">=</span> <span class="token function">imfilter</span><span class="token punctuation">(</span>random<span class="token punctuation">,</span><span class="token function">fspecial</span><span class="token punctuation">(</span><span class="token string">'average'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'原图'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>pepper<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'3%椒盐噪声'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>gaussian<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'高斯噪声'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>random<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'随机噪声'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>pepper_output<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'3%椒盐噪声均值滤波'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>gaussian_output<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'高斯噪声均值滤波'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>poisson_output<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'随机噪声均值滤波'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">%随机噪声</span><span class="token keyword">function</span> <span class="token punctuation">[</span>output<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Random</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span>    output <span class="token operator">=</span> <span class="token function">imnoise</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span><span class="token string">'salt &amp; pepper'</span><span class="token punctuation">,</span><span class="token number">0.03</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span>r<span class="token punctuation">,</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">:</span> r        <span class="token keyword">for</span> <span class="token number">j</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">:</span> l            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span> <span class="token operator">~=</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">output</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">uint8</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A%E6%88%AA%E5%9B%BE/lab3_%E5%9D%87%E5%80%BC%E6%BB%A4%E6%B3%A2.png" alt="均值滤波"></p><h3 id="2、用超限邻域平均法去除图像中的噪声：如果某个像素的灰度值大于其邻域像素的平均值，且达到了一定水平，则判断该像素为噪声，继而用邻域像素的均值取代这一像素值，"><a href="#2、用超限邻域平均法去除图像中的噪声：如果某个像素的灰度值大于其邻域像素的平均值，且达到了一定水平，则判断该像素为噪声，继而用邻域像素的均值取代这一像素值，" class="headerlink" title="2、用超限邻域平均法去除图像中的噪声：如果某个像素的灰度值大于其邻域像素的平均值，且达到了一定水平，则判断该像素为噪声，继而用邻域像素的均值取代这一像素值，"></a>2、用超限邻域平均法去除图像中的噪声：如果某个像素的灰度值大于其邻域像素的平均值，且达到了一定水平，则判断该像素为噪声，继而用邻域像素的均值取代这一像素值，</h3><ul><li>使用<code>imread</code>读取灰度图像</li><li>使用<code>imnoise</code>函数添加椒盐噪声和高斯噪声</li><li>编写了<code>Random</code>函数用于获取随机脉冲噪声</li><li>编写了<code>filter</code>函数进行3x3超限邻域滤波，其中用<code>mean</code>函数获得3x3范围内的均值</li><li>使用<code>imshow</code>显示增强前后的图像对比</li></ul><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">source <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">'lena.bmp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%添加噪声</span>pepper <span class="token operator">=</span> <span class="token function">imnoise</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span><span class="token string">'salt &amp; pepper'</span><span class="token punctuation">,</span><span class="token number">0.03</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gaussian <span class="token operator">=</span> <span class="token function">imnoise</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span><span class="token string">'gaussian'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>random <span class="token operator">=</span> <span class="token function">Random</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%超限邻域平均滤波</span>pepper_output <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span>pepper<span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gaussian_output <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span>gaussian<span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>poisson_output <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span>random<span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'原图'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>pepper<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'3%椒盐噪声'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>gaussian<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'高斯噪声'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>random<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'随机噪声'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>pepper_output<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'3%椒盐噪声超限邻域平均滤波'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>gaussian_output<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'高斯噪声超限邻域平均滤波'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>poisson_output<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'随机噪声超限邻域平均滤波'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token punctuation">[</span>output<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span>T<span class="token punctuation">)</span>    output <span class="token operator">=</span> input<span class="token punctuation">;</span>    <span class="token punctuation">[</span>r<span class="token punctuation">,</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token number">j</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token punctuation">(</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            mean_value <span class="token operator">=</span> <span class="token function">mean</span><span class="token punctuation">(</span><span class="token function">mean</span><span class="token punctuation">(</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token number">i</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">i</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">j</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">j</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%计算均值</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> mean_value<span class="token punctuation">)</span> <span class="token operator">&gt;</span> T<span class="token punctuation">)</span><span class="token comment">%超限滤波</span>                <span class="token function">output</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span> <span class="token operator">=</span> mean_value<span class="token punctuation">;</span>            <span class="token keyword">end</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token comment">%随机噪声</span><span class="token keyword">function</span> <span class="token punctuation">[</span>output<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Random</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span>    output <span class="token operator">=</span> <span class="token function">imnoise</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span><span class="token string">'salt &amp; pepper'</span><span class="token punctuation">,</span><span class="token number">0.03</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span>r<span class="token punctuation">,</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">:</span> r        <span class="token keyword">for</span> <span class="token number">j</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">:</span> l            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span> <span class="token operator">~=</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">output</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">uint8</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>阈值为35的结果如下</p><p><img src="%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A%E6%88%AA%E5%9B%BE/lab3_%E8%B6%85%E9%99%90%E5%9D%87%E5%80%BC%E6%BB%A4%E6%B3%A2.png" alt="超限均值滤波"></p><h3 id="3、用中值滤波器去除图像中的噪声-选-3x3-窗口做中值滤波"><a href="#3、用中值滤波器去除图像中的噪声-选-3x3-窗口做中值滤波" class="headerlink" title="3、用中值滤波器去除图像中的噪声(选 3x3 窗口做中值滤波)"></a>3、用中值滤波器去除图像中的噪声(选 3x3 窗口做中值滤波)</h3><ul><li>使用<code>imread</code>读取灰度图像</li><li>使用<code>imnoise</code>函数添加椒盐噪声和高斯噪声</li><li>编写了<code>Random</code>函数用于获取随机脉冲噪声</li><li>对每个噪声图像使用<code>medfilt2</code>进行中值滤波</li><li>使用<code>imshow</code>显示增强前后的图像对比</li></ul><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">source <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">'lena.bmp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%添加噪声</span>pepper <span class="token operator">=</span> <span class="token function">imnoise</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span><span class="token string">'salt &amp; pepper'</span><span class="token punctuation">,</span><span class="token number">0.03</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gaussian <span class="token operator">=</span> <span class="token function">imnoise</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span><span class="token string">'gaussian'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>random <span class="token operator">=</span> <span class="token function">Random</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%中值滤波</span>pepper_output <span class="token operator">=</span> <span class="token function">medfilt2</span><span class="token punctuation">(</span>pepper<span class="token punctuation">)</span><span class="token punctuation">;</span>gaussian_output <span class="token operator">=</span> <span class="token function">medfilt2</span><span class="token punctuation">(</span>gaussian<span class="token punctuation">)</span><span class="token punctuation">;</span>speckle_output <span class="token operator">=</span> <span class="token function">medfilt2</span><span class="token punctuation">(</span>random<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'原图'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>pepper<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'3%椒盐噪声'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>gaussian<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'高斯噪声'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>random<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'随机噪声'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>pepper_output<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'3%椒盐噪声中值滤波'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>gaussian_output<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'高斯噪声中值滤波'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>speckle_output<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'随机噪声中值滤波'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">%随机噪声</span><span class="token keyword">function</span> <span class="token punctuation">[</span>output<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Random</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span>    output <span class="token operator">=</span> <span class="token function">imnoise</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span><span class="token string">'salt &amp; pepper'</span><span class="token punctuation">,</span><span class="token number">0.03</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span>r<span class="token punctuation">,</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">:</span> r        <span class="token keyword">for</span> <span class="token number">j</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">:</span> l            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span> <span class="token operator">~=</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">output</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">uint8</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A%E6%88%AA%E5%9B%BE/lab3_%E4%B8%AD%E5%80%BC%E6%BB%A4%E6%B3%A2.png" alt="中值滤波"></p><h3 id="4、用超限中值滤波器去除图像中的噪声：当某个像素的灰度值超过窗口中像素灰度值排序中间的那个值，且达到一定水平时，则判断该点为噪声，用灰度值排序中间的那个值来代替；否则还是保持原来的灰度值。"><a href="#4、用超限中值滤波器去除图像中的噪声：当某个像素的灰度值超过窗口中像素灰度值排序中间的那个值，且达到一定水平时，则判断该点为噪声，用灰度值排序中间的那个值来代替；否则还是保持原来的灰度值。" class="headerlink" title="4、用超限中值滤波器去除图像中的噪声：当某个像素的灰度值超过窗口中像素灰度值排序中间的那个值，且达到一定水平时，则判断该点为噪声，用灰度值排序中间的那个值来代替；否则还是保持原来的灰度值。"></a>4、用超限中值滤波器去除图像中的噪声：当某个像素的灰度值超过窗口中像素灰度值排序中间的那个值，且达到一定水平时，则判断该点为噪声，用灰度值排序中间的那个值来代替；否则还是保持原来的灰度值。</h3><ul><li>使用<code>imread</code>读取灰度图像</li><li>使用<code>imnoise</code>函数添加椒盐噪声和高斯噪声</li><li>编写了<code>Random</code>函数用于获取随机脉冲噪声</li><li>编写了<code>filter</code>函数进行3x3超限中值滤波，其中用<code>median</code>函数获得3x3范围内的中值</li><li>使用<code>imshow</code>显示增强前后的图像对比</li></ul><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">source <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">'lena.bmp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%添加噪声</span>pepper <span class="token operator">=</span> <span class="token function">imnoise</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span><span class="token string">'salt &amp; pepper'</span><span class="token punctuation">,</span><span class="token number">0.03</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gaussian <span class="token operator">=</span> <span class="token function">imnoise</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span><span class="token string">'gaussian'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>random <span class="token operator">=</span> <span class="token function">Random</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%超限中值滤波</span>pepper_output <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span>pepper<span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gaussian_output <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span>gaussian<span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>speckle_output <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span>random<span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'原图'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>pepper<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'3%椒盐噪声'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>gaussian<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'高斯噪声'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>random<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'随机噪声'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>pepper_output<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'3%椒盐噪声超限中值滤波'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>gaussian_output<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'高斯噪声超限中值滤波'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>speckle_output<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'随机噪声超限中值滤波'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">%随机噪声</span><span class="token keyword">function</span> <span class="token punctuation">[</span>output<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span>T<span class="token punctuation">)</span>    output <span class="token operator">=</span> input<span class="token punctuation">;</span>    <span class="token punctuation">[</span>r<span class="token punctuation">,</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token number">j</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token punctuation">(</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            temp <span class="token operator">=</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token number">i</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">i</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">j</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">j</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            middle_value <span class="token operator">=</span> <span class="token function">median</span><span class="token punctuation">(</span><span class="token function">temp</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">double</span><span class="token punctuation">(</span>middle_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> T<span class="token punctuation">)</span>                <span class="token function">output</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span> <span class="token operator">=</span> middle_value<span class="token punctuation">;</span>            <span class="token keyword">end</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token keyword">function</span> <span class="token punctuation">[</span>output<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Random</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span>    output <span class="token operator">=</span> <span class="token function">imnoise</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span><span class="token string">'salt &amp; pepper'</span><span class="token punctuation">,</span><span class="token number">0.03</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span>r<span class="token punctuation">,</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">:</span> r        <span class="token keyword">for</span> <span class="token number">j</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">:</span> l            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span> <span class="token operator">~=</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">output</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">uint8</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A%E6%88%AA%E5%9B%BE/lab3_%E8%B6%85%E9%99%90%E4%B8%AD%E5%80%BC%E6%BB%A4%E6%B3%A2.png" alt="超限中值滤波"></p><h3 id="5-将四种处理方法的结果与原图比较，注意不同处理方法对边缘的影响。"><a href="#5-将四种处理方法的结果与原图比较，注意不同处理方法对边缘的影响。" class="headerlink" title="5.将四种处理方法的结果与原图比较，注意不同处理方法对边缘的影响。"></a>5.将四种处理方法的结果与原图比较，注意不同处理方法对边缘的影响。</h3><ul><li>四种处理结果中，超限均值滤波的效果好于均值滤波，超限中值滤波的效果好于中值滤波</li><li>中值滤波与超限中值滤波对于边缘细节的保留更好，均值滤波和超限均值滤波的边缘更平滑</li><li>对椒盐噪声和随机噪声，中值滤波与超限中值滤波效果较好</li><li>对高斯噪声，均值滤波和超限均值滤波效果较好</li></ul><h3 id="6．-边缘检测主要有以下几种常用的算子："><a href="#6．-边缘检测主要有以下几种常用的算子：" class="headerlink" title="6． 边缘检测主要有以下几种常用的算子："></a>6． 边缘检测主要有以下几种常用的算子：</h3><h4 id="1-Roberts-算子"><a href="#1-Roberts-算子" class="headerlink" title="1) Roberts 算子"></a>1) Roberts 算子</h4><h4 id="2-Sobel-算子"><a href="#2-Sobel-算子" class="headerlink" title="2) Sobel 算子"></a>2) Sobel 算子</h4><h4 id="3-Prewitt-算子"><a href="#3-Prewitt-算子" class="headerlink" title="3) Prewitt 算子"></a>3) Prewitt 算子</h4><h4 id="4-拉普拉斯算子"><a href="#4-拉普拉斯算子" class="headerlink" title="4) 拉普拉斯算子"></a>4) 拉普拉斯算子</h4><h4 id="5-Canny-算子"><a href="#5-Canny-算子" class="headerlink" title="5) Canny 算子"></a>5) Canny 算子</h4><h4 id="要求：要求对-blood-bmp、-lena-bmp，分别用前面所述的算子进行边缘检测，显示边缘检测结果图像。"><a href="#要求：要求对-blood-bmp、-lena-bmp，分别用前面所述的算子进行边缘检测，显示边缘检测结果图像。" class="headerlink" title="要求：要求对 blood.bmp、 lena.bmp，分别用前面所述的算子进行边缘检测，显示边缘检测结果图像。"></a>要求：要求对 blood.bmp、 lena.bmp，分别用前面所述的算子进行边缘检测，显示边缘检测结果图像。</h4><ul><li>使用<code>imread</code>读取灰度图像</li><li>使用<code>edge</code>函数分别使用<code>Roberts 算子</code>、<code>Sobel 算子</code>、<code>Prewitt 算子</code>、<code>Canny 算子</code>进行边缘检测</li><li>使用<code>imfilter</code>应用两种<code>拉普拉斯算子</code>进行边缘检测</li><li>使用<code>imshow</code>显示边缘检测结果图像</li></ul><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">source <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">'lena.bmp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%Roberts算子</span>Roberts <span class="token operator">=</span> <span class="token function">edge</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span><span class="token string">'Roberts'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%Sobel算子</span>Sobel <span class="token operator">=</span> <span class="token function">edge</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span><span class="token string">'Sobel'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%Prewitt算子</span>Prewitt <span class="token operator">=</span> <span class="token function">edge</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span><span class="token string">'Prewitt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%拉普拉斯算子</span>Laplacian1 <span class="token operator">=</span> <span class="token function">imfilter</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span><span class="token function">fspecial</span><span class="token punctuation">(</span><span class="token string">'laplacian'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Laplacian2 <span class="token operator">=</span> <span class="token function">imfilter</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token number">8</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%Canny算子</span>Canny <span class="token operator">=</span> <span class="token function">edge</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span><span class="token string">'Canny'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'原图'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>Roberts<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Roberts'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>Sobel<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Sobel'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>Prewitt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Prewitt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>Laplacian1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Laplacian1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>Laplacian2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Laplacian2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>Canny<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Canny'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">source <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">'blood.bmp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%Roberts算子</span>Roberts <span class="token operator">=</span> <span class="token function">edge</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span><span class="token string">'Roberts'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%Sobel算子</span>Sobel <span class="token operator">=</span> <span class="token function">edge</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span><span class="token string">'Sobel'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%Prewitt算子</span>Prewitt <span class="token operator">=</span> <span class="token function">edge</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span><span class="token string">'Prewitt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%拉普拉斯算子</span>Laplacian1 <span class="token operator">=</span> <span class="token function">imfilter</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span><span class="token operator">-</span><span class="token function">fspecial</span><span class="token punctuation">(</span><span class="token string">'laplacian'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Laplacian2 <span class="token operator">=</span> <span class="token function">imfilter</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token number">8</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%Canny算子</span>Canny <span class="token operator">=</span> <span class="token function">edge</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span><span class="token string">'Canny'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'原图'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>Roberts<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Roberts'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>Sobel<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Sobel'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>Prewitt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Prewitt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>Laplacian1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Laplacian1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>Laplacian2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Laplacian2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>Canny<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Canny'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A%E6%88%AA%E5%9B%BE/lab3_%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B1.png" alt="边缘检测1"><img src="%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A%E6%88%AA%E5%9B%BE/lab3_%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B2.png" alt="边缘检测2"></p><h2 id="实验四-图像变换及频域滤波增强"><a href="#实验四-图像变换及频域滤波增强" class="headerlink" title="实验四 图像变换及频域滤波增强"></a>实验四 图像变换及频域滤波增强</h2><h3 id="Fourier-变换与反变换"><a href="#Fourier-变换与反变换" class="headerlink" title="Fourier 变换与反变换"></a>Fourier 变换与反变换</h3><h4 id="1．-用-Fourier-变换算法，对-rect1-bmp-和-rect2-bmp-图像作二维-Fourier-变换；并显示其频谱。要求对幅度作变换（由于高、低频幅度相差很大），将低频移到中心点。"><a href="#1．-用-Fourier-变换算法，对-rect1-bmp-和-rect2-bmp-图像作二维-Fourier-变换；并显示其频谱。要求对幅度作变换（由于高、低频幅度相差很大），将低频移到中心点。" class="headerlink" title="1． 用 Fourier 变换算法，对 rect1.bmp 和 rect2.bmp 图像作二维 Fourier 变换；并显示其频谱。要求对幅度作变换（由于高、低频幅度相差很大），将低频移到中心点。"></a>1． 用 Fourier 变换算法，对 rect1.bmp 和 rect2.bmp 图像作二维 Fourier 变换；并显示其频谱。要求对幅度作变换（由于高、低频幅度相差很大），将低频移到中心点。</h4><ul><li>使用<code>imread</code>读取灰度图像</li><li>使用<code>fft2</code>对图像进行二维Fourier 变换</li><li>使用<code>fftshift</code>将图像的低频移至中心</li><li>使用<code>abs</code>将图像取幅度，得到幅度的变换结果</li><li>使用<code>imshow</code>显示频谱的幅度谱</li></ul><h4 id="2．-用-Fourier-系数的幅度进行-Fourier-反变换，并显示其图像；"><a href="#2．-用-Fourier-系数的幅度进行-Fourier-反变换，并显示其图像；" class="headerlink" title="2． 用 Fourier 系数的幅度进行 Fourier 反变换，并显示其图像；"></a>2． 用 Fourier 系数的幅度进行 Fourier 反变换，并显示其图像；</h4><ul><li>使用<code>imread</code>读取灰度图像</li><li>使用<code>fft2</code>对图像进行二维Fourier 变换</li><li>使用<code>abs</code>将图像取幅度，得到幅度的变换结果</li><li>使用<code>ifft2</code>将Fourier 系数的幅度进行 Fourier 反变换</li><li>使用<code>imshow</code>显示反变换的结果</li></ul><h4 id="3．-用-Fourier-系数的相位进行-Fourier-反变换，并显示其图像；比较-3、4-的结果，评价人眼对图像幅频特性和相频特性的敏感度。"><a href="#3．-用-Fourier-系数的相位进行-Fourier-反变换，并显示其图像；比较-3、4-的结果，评价人眼对图像幅频特性和相频特性的敏感度。" class="headerlink" title="3． 用 Fourier 系数的相位进行 Fourier 反变换，并显示其图像；比较 3、4 的结果，评价人眼对图像幅频特性和相频特性的敏感度。"></a>3． 用 Fourier 系数的相位进行 Fourier 反变换，并显示其图像；比较 3、4 的结果，评价人眼对图像幅频特性和相频特性的敏感度。</h4><ul><li>使用<code>imread</code>读取灰度图像</li><li>使用<code>fft2</code>对图像进行二维Fourier 变换</li><li>使用<code>angle</code>得到 Fourier 变换后的相位谱</li><li>使用<code>exp</code>将相位谱做以增强</li><li>使用<code>ifft2</code>将Fourier 系数的相位进行 Fourier 反变换</li><li>使用<code>imshow</code>显示反变换的结果</li></ul><p>​    根据幅度和相位进行 Fourier 反变换的结果可知，幅频特性包含了图像亮度（能量）的分布，相频特性刻画了图像的边界轮廓信息，人眼对相频特性比幅频特性敏感，从相频特性中可以看出图像的轮廓从而知道图像的大致内容，而从幅频特性中只能看到亮暗分布，不知道图像所含的物体是什么。</p><h4 id="4．-将图像的-Fourier-变换置为其共轭后进行反变换，显示其图像，并与原始图像比较其差异。"><a href="#4．-将图像的-Fourier-变换置为其共轭后进行反变换，显示其图像，并与原始图像比较其差异。" class="headerlink" title="4． 将图像的 Fourier 变换置为其共轭后进行反变换，显示其图像，并与原始图像比较其差异。"></a>4． 将图像的 Fourier 变换置为其共轭后进行反变换，显示其图像，并与原始图像比较其差异。</h4><ul><li>使用<code>imread</code>读取灰度图像</li><li>使用<code>fft2</code>对图像进行二维Fourier 变换</li><li>使用<code>conj</code>将图像的 Fourier 变换置为其共轭</li><li>使用<code>ifft2</code>进行 Fourier 反变换</li><li>使用<code>imshow</code>显示反变换的结果</li></ul><p>​    观察结果可知得到的图像是原始图像的对角镜像（相当于先进行水平镜像再进行垂直镜像），这是因为傅里叶变换的共轭对称性$F(u,v)=F^*(-u,-v)$</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">source1 <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">'Rect1.bmp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>source2 <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">'Rect2.bmp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%傅里叶变换</span>F1 <span class="token operator">=</span> <span class="token function">fft2</span><span class="token punctuation">(</span>source1<span class="token punctuation">)</span><span class="token punctuation">;</span>F2 <span class="token operator">=</span> <span class="token function">fft2</span><span class="token punctuation">(</span>source2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%移动低频至中心并增强</span>F1_shift <span class="token operator">=</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">fftshift</span><span class="token punctuation">(</span>F1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>F2_shift <span class="token operator">=</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">fftshift</span><span class="token punctuation">(</span>F2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%幅度逆变换</span>IF1_abs <span class="token operator">=</span> <span class="token function">uint8</span><span class="token punctuation">(</span><span class="token function">ifft2</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>F1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>IF2_abs <span class="token operator">=</span> <span class="token function">uint8</span><span class="token punctuation">(</span><span class="token function">ifft2</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>F2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%相位逆变换</span>IF1_angle <span class="token operator">=</span> <span class="token function">uint8</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">ifft2</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token operator">*</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token number">1i</span><span class="token operator">*</span><span class="token function">angle</span><span class="token punctuation">(</span>F1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>IF2_angle <span class="token operator">=</span> <span class="token function">uint8</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">ifft2</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token operator">*</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token number">1i</span><span class="token operator">*</span><span class="token function">angle</span><span class="token punctuation">(</span>F2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%共轭逆变换</span>IF1_conj <span class="token operator">=</span> <span class="token function">ifft2</span><span class="token punctuation">(</span><span class="token function">conj</span><span class="token punctuation">(</span>F1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>IF2_conj <span class="token operator">=</span> <span class="token function">ifft2</span><span class="token punctuation">(</span><span class="token function">conj</span><span class="token punctuation">(</span>F2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>source1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'rect1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>F1_shift<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'rect1幅度谱'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>IF1_abs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'rect1幅度逆变换'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>IF1_angle<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'rect1相位逆变换'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>IF1_conj<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'rect1傅里叶变换共轭逆变换'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>source2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'rect2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>F2_shift<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'rect2幅度谱'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>IF2_abs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'rect2幅度逆变换'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>IF2_angle<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'rect2相位逆变换'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>IF2_conj<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'rect2傅里叶变换共轭逆变换'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A%E6%88%AA%E5%9B%BE/lab4_Fourier%E5%8F%98%E6%8D%A2.png" alt="Fourier变换"></p><h3 id="频域滤波"><a href="#频域滤波" class="headerlink" title="频域滤波"></a>频域滤波</h3><h4 id="5．-对图像-pout-bmp、Girl-bmp-分别采用理想低通滤波器、巴特沃斯低通滤波器和高斯低通滤波器（截止频率自选），再做反变换，观察不同截止频率下采用不同低通滤波器得到的图像与原图像的区别，特别注意振铃效应。"><a href="#5．-对图像-pout-bmp、Girl-bmp-分别采用理想低通滤波器、巴特沃斯低通滤波器和高斯低通滤波器（截止频率自选），再做反变换，观察不同截止频率下采用不同低通滤波器得到的图像与原图像的区别，特别注意振铃效应。" class="headerlink" title="5． 对图像 pout.bmp、Girl.bmp 分别采用理想低通滤波器、巴特沃斯低通滤波器和高斯低通滤波器（截止频率自选），再做反变换，观察不同截止频率下采用不同低通滤波器得到的图像与原图像的区别，特别注意振铃效应。"></a>5． 对图像 pout.bmp、Girl.bmp 分别采用理想低通滤波器、巴特沃斯低通滤波器和高斯低通滤波器（截止频率自选），再做反变换，观察不同截止频率下采用不同低通滤波器得到的图像与原图像的区别，特别注意振铃效应。</h4><ul><li>使用<code>imread</code>读取灰度图像</li><li>编写<code>ILPF</code>、<code>BLPF</code>、<code>ELPF</code>三个函数进行理想低通滤波、巴特沃斯低通滤波、高斯低通滤波</li><li>使用<code>size</code>获得图像的大小</li><li>使用<code>fft2</code>与<code>fftshift</code>对图像进行 Fourier 变换并将低频移至中心</li><li>使用<code>meshgrid</code>构建坐标矩阵</li><li>使用<code>hypot</code>在坐标矩阵上计算各点到中心点的距离</li><li>使用<code>ifft2</code>与<code>ifftshift</code>撤销<code>fftshift</code>的移动并进行逆 Fourier 变换</li><li>使用<code>imshow</code>显示低通滤波后的结果</li></ul><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">source1 <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">'Pout.bmp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>source2 <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">'Girl.bmp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>D <span class="token operator">=</span> <span class="token number">35</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>source1<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Pout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">ILPF</span><span class="token punctuation">(</span>source1<span class="token punctuation">,</span>D<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Pout理想低通滤波器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">BLPF</span><span class="token punctuation">(</span>source1<span class="token punctuation">,</span>D<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Pout巴特沃斯低通滤波器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">ELPF</span><span class="token punctuation">(</span>source1<span class="token punctuation">,</span>D<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Pout高斯低通滤波器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>source2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Girl'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">ILPF</span><span class="token punctuation">(</span>source2<span class="token punctuation">,</span>D<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Girl理想低通滤波器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">BLPF</span><span class="token punctuation">(</span>source2<span class="token punctuation">,</span>D<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Girl巴特沃斯低通滤波器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">ELPF</span><span class="token punctuation">(</span>source2<span class="token punctuation">,</span>D<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Girl高斯低通滤波器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">%理想低通滤波器</span><span class="token keyword">function</span> output <span class="token operator">=</span> <span class="token function">ILPF</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span>D0<span class="token punctuation">)</span>    <span class="token punctuation">[</span>r<span class="token punctuation">,</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>    F <span class="token operator">=</span> <span class="token function">fftshift</span><span class="token punctuation">(</span><span class="token function">fft2</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%傅里叶变换并平移</span>    <span class="token punctuation">[</span>U<span class="token punctuation">,</span>V<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">meshgrid</span><span class="token punctuation">(</span><span class="token operator">-</span>l<span class="token operator">/</span><span class="token number">2</span><span class="token operator">:</span>l<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span>r<span class="token operator">/</span><span class="token number">2</span><span class="token operator">:</span>r<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%构建坐标</span>    D <span class="token operator">=</span> <span class="token function">hypot</span><span class="token punctuation">(</span>U<span class="token punctuation">,</span>V<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%计算中心偏移距离</span>    H <span class="token operator">=</span> D <span class="token operator">&lt;=</span> D0 <span class="token punctuation">;</span>    output <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">ifft2</span><span class="token punctuation">(</span><span class="token function">ifftshift</span><span class="token punctuation">(</span>F<span class="token operator">.*</span>H<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%卷积逆变换</span><span class="token keyword">end</span><span class="token comment">%巴特沃斯低通滤波器</span><span class="token keyword">function</span> output <span class="token operator">=</span> <span class="token function">BLPF</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span>D0<span class="token punctuation">,</span>n<span class="token punctuation">)</span>    <span class="token punctuation">[</span>r<span class="token punctuation">,</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>    F <span class="token operator">=</span> <span class="token function">fftshift</span><span class="token punctuation">(</span><span class="token function">fft2</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%傅里叶变换并平移</span>    <span class="token punctuation">[</span>U<span class="token punctuation">,</span>V<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">meshgrid</span><span class="token punctuation">(</span><span class="token operator">-</span>l<span class="token operator">/</span><span class="token number">2</span><span class="token operator">:</span>l<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span>r<span class="token operator">/</span><span class="token number">2</span><span class="token operator">:</span>r<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%构建坐标</span>    D <span class="token operator">=</span> <span class="token function">hypot</span><span class="token punctuation">(</span>U<span class="token punctuation">,</span>V<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%计算中心偏移距离</span>    H <span class="token operator">=</span> <span class="token number">1.</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>D<span class="token operator">./</span>D0<span class="token punctuation">)</span><span class="token operator">.^</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    output <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">ifft2</span><span class="token punctuation">(</span><span class="token function">ifftshift</span><span class="token punctuation">(</span>F<span class="token operator">.*</span>H<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%卷积逆变换</span><span class="token keyword">end</span><span class="token comment">%高斯低通滤波器</span><span class="token keyword">function</span> output <span class="token operator">=</span> <span class="token function">ELPF</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span>D0<span class="token punctuation">,</span>n<span class="token punctuation">)</span>    <span class="token punctuation">[</span>r<span class="token punctuation">,</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>    F <span class="token operator">=</span> <span class="token function">fftshift</span><span class="token punctuation">(</span><span class="token function">fft2</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%傅里叶变换并平移</span>    <span class="token punctuation">[</span>U<span class="token punctuation">,</span>V<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">meshgrid</span><span class="token punctuation">(</span><span class="token operator">-</span>l<span class="token operator">/</span><span class="token number">2</span><span class="token operator">:</span>l<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span>r<span class="token operator">/</span><span class="token number">2</span><span class="token operator">:</span>r<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%构建坐标</span>    D <span class="token operator">=</span> <span class="token function">hypot</span><span class="token punctuation">(</span>U<span class="token punctuation">,</span>V<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%计算中心偏移距离</span>    H <span class="token operator">=</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">(</span>D<span class="token operator">./</span>D0<span class="token punctuation">)</span><span class="token operator">.^</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    output <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">ifft2</span><span class="token punctuation">(</span><span class="token function">ifftshift</span><span class="token punctuation">(</span>F<span class="token operator">.*</span>H<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%卷积逆变换</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>阈值35的低通滤波</p><p><img src="%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A%E6%88%AA%E5%9B%BE/lab4_%E4%BD%8E%E9%80%9A%E6%BB%A4%E6%B3%A2-35.png" alt="低通滤波-35"></p><p>阈值5的低通滤波</p><p><img src="%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A%E6%88%AA%E5%9B%BE/lab4_%E4%BD%8E%E9%80%9A%E6%BB%A4%E6%B3%A2-5.png" alt="低通滤波-5"></p><p>阈值70的低通滤波</p><p><img src="%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A%E6%88%AA%E5%9B%BE/lab4_%E4%BD%8E%E9%80%9A%E6%BB%A4%E6%B3%A2-70.png" alt="低通滤波-70"></p><p>​    在较低阈值下，图像最平滑，但细节保留较少，理想低通滤波的振铃效应明显。在适中阈值下，图像得到了平滑，保留了较多细节，理想低通滤波相比另两种滤波有一定的振铃效应。在较高阈值下，图像在滤波前后没有明显变化，理想低通滤波的振铃效应也不可察觉。</p><h4 id="6．-对原始图像-Girl-bmp-分别加椒盐噪声、高斯噪声，产生有噪声图像，利用上述低通滤波器进行去噪，对比去噪效果。"><a href="#6．-对原始图像-Girl-bmp-分别加椒盐噪声、高斯噪声，产生有噪声图像，利用上述低通滤波器进行去噪，对比去噪效果。" class="headerlink" title="6． 对原始图像 Girl.bmp 分别加椒盐噪声、高斯噪声，产生有噪声图像，利用上述低通滤波器进行去噪，对比去噪效果。"></a>6． 对原始图像 Girl.bmp 分别加椒盐噪声、高斯噪声，产生有噪声图像，利用上述低通滤波器进行去噪，对比去噪效果。</h4><ul><li>使用<code>imread</code>读取灰度图像</li><li>使用<code>imnoise</code>添加椒盐噪声、高斯噪声</li><li>编写<code>ILPF</code>、<code>BLPF</code>、<code>ELPF</code>三个函数进行理想低通滤波、巴特沃斯低通滤波、高斯低通滤波</li><li>使用<code>size</code>获得图像的大小</li><li>使用<code>fft2</code>与<code>fftshift</code>对图像进行 Fourier 变换并将低频移至中心</li><li>使用<code>meshgrid</code>构建坐标矩阵</li><li>使用<code>hypot</code>在坐标矩阵上计算各点到中心点的距离</li><li>使用<code>ifft2</code>与<code>ifftshift</code>撤销<code>fftshift</code>的移动并进行逆 Fourier 变换</li><li>使用<code>imshow</code>显示噪声图像低通滤波后的结果</li></ul><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">source1 <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">'Pout.bmp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>source2 <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">'Girl.bmp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%添加噪声</span>source1_pepper <span class="token operator">=</span> <span class="token function">imnoise</span><span class="token punctuation">(</span>source1<span class="token punctuation">,</span><span class="token string">'salt &amp; pepper'</span><span class="token punctuation">,</span><span class="token number">0.03</span><span class="token punctuation">)</span><span class="token punctuation">;</span>source1_gaussian <span class="token operator">=</span> <span class="token function">imnoise</span><span class="token punctuation">(</span>source1<span class="token punctuation">,</span><span class="token string">'gaussian'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>source2_pepper <span class="token operator">=</span> <span class="token function">imnoise</span><span class="token punctuation">(</span>source2<span class="token punctuation">,</span><span class="token string">'salt &amp; pepper'</span><span class="token punctuation">,</span><span class="token number">0.03</span><span class="token punctuation">)</span><span class="token punctuation">;</span>source2_gaussian <span class="token operator">=</span> <span class="token function">imnoise</span><span class="token punctuation">(</span>source2<span class="token punctuation">,</span><span class="token string">'gaussian'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">figure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>source1<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Pout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>source1_pepper<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Pout-椒盐噪声'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>source1_gaussian<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Pout-高斯噪声'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">ILPF</span><span class="token punctuation">(</span>source1_pepper<span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Pout-椒盐噪声理想低通滤波器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">BLPF</span><span class="token punctuation">(</span>source1_pepper<span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Pout-椒盐噪声巴特沃斯低通滤波器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">ELPF</span><span class="token punctuation">(</span>source1_pepper<span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Pout-椒盐噪声高斯低通滤波器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">ILPF</span><span class="token punctuation">(</span>source1_gaussian<span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Pout-高斯噪声理想低通滤波器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">BLPF</span><span class="token punctuation">(</span>source1_gaussian<span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Pout-高斯噪声巴特沃斯低通滤波器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">ELPF</span><span class="token punctuation">(</span>source1_gaussian<span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Pout-高斯噪声高斯低通滤波器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">figure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>source2<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Girl'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>source2_pepper<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Girl-椒盐噪声'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>source2_gaussian<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Girl-高斯噪声'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">ILPF</span><span class="token punctuation">(</span>source2_pepper<span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Girl-椒盐噪声理想低通滤波器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">BLPF</span><span class="token punctuation">(</span>source2_pepper<span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Girl-椒盐噪声巴特沃斯低通滤波器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">ELPF</span><span class="token punctuation">(</span>source2_pepper<span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Girl-椒盐噪声高斯低通滤波器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">ILPF</span><span class="token punctuation">(</span>source2_gaussian<span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Girl-高斯噪声理想低通滤波器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">BLPF</span><span class="token punctuation">(</span>source2_gaussian<span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Girl-高斯噪声巴特沃斯低通滤波器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">ELPF</span><span class="token punctuation">(</span>source2_gaussian<span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Girl-高斯噪声高斯低通滤波器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%理想低通滤波器</span><span class="token keyword">function</span> output <span class="token operator">=</span> <span class="token function">ILPF</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span>D0<span class="token punctuation">)</span>    <span class="token punctuation">[</span>r<span class="token punctuation">,</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>    F <span class="token operator">=</span> <span class="token function">fftshift</span><span class="token punctuation">(</span><span class="token function">fft2</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%傅里叶变换并平移</span>    <span class="token punctuation">[</span>U<span class="token punctuation">,</span>V<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">meshgrid</span><span class="token punctuation">(</span><span class="token operator">-</span>l<span class="token operator">/</span><span class="token number">2</span><span class="token operator">:</span>l<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span>r<span class="token operator">/</span><span class="token number">2</span><span class="token operator">:</span>r<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%构建坐标</span>    D <span class="token operator">=</span> <span class="token function">hypot</span><span class="token punctuation">(</span>U<span class="token punctuation">,</span>V<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%计算中心偏移距离</span>    H <span class="token operator">=</span> D <span class="token operator">&lt;=</span> D0 <span class="token punctuation">;</span>    output <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">ifft2</span><span class="token punctuation">(</span><span class="token function">ifftshift</span><span class="token punctuation">(</span>F<span class="token operator">.*</span>H<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%卷积逆变换</span><span class="token keyword">end</span><span class="token comment">%巴特沃斯低通滤波器</span><span class="token keyword">function</span> output <span class="token operator">=</span> <span class="token function">BLPF</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span>D0<span class="token punctuation">,</span>n<span class="token punctuation">)</span>    <span class="token punctuation">[</span>r<span class="token punctuation">,</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>    F <span class="token operator">=</span> <span class="token function">fftshift</span><span class="token punctuation">(</span><span class="token function">fft2</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%傅里叶变换并平移</span>    <span class="token punctuation">[</span>U<span class="token punctuation">,</span>V<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">meshgrid</span><span class="token punctuation">(</span><span class="token operator">-</span>l<span class="token operator">/</span><span class="token number">2</span><span class="token operator">:</span>l<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span>r<span class="token operator">/</span><span class="token number">2</span><span class="token operator">:</span>r<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%构建坐标</span>    D <span class="token operator">=</span> <span class="token function">hypot</span><span class="token punctuation">(</span>U<span class="token punctuation">,</span>V<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%计算中心偏移距离</span>    H <span class="token operator">=</span> <span class="token number">1.</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>D<span class="token operator">./</span>D0<span class="token punctuation">)</span><span class="token operator">.^</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    output <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">ifft2</span><span class="token punctuation">(</span><span class="token function">ifftshift</span><span class="token punctuation">(</span>F<span class="token operator">.*</span>H<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%卷积逆变换</span><span class="token keyword">end</span><span class="token comment">%高斯低通滤波器</span><span class="token keyword">function</span> output <span class="token operator">=</span> <span class="token function">ELPF</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span>D0<span class="token punctuation">,</span>n<span class="token punctuation">)</span>    <span class="token punctuation">[</span>r<span class="token punctuation">,</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>    F <span class="token operator">=</span> <span class="token function">fftshift</span><span class="token punctuation">(</span><span class="token function">fft2</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%傅里叶变换并平移</span>    <span class="token punctuation">[</span>U<span class="token punctuation">,</span>V<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">meshgrid</span><span class="token punctuation">(</span><span class="token operator">-</span>l<span class="token operator">/</span><span class="token number">2</span><span class="token operator">:</span>l<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span>r<span class="token operator">/</span><span class="token number">2</span><span class="token operator">:</span>r<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%构建坐标</span>    D <span class="token operator">=</span> <span class="token function">hypot</span><span class="token punctuation">(</span>U<span class="token punctuation">,</span>V<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%计算中心偏移距离</span>    H <span class="token operator">=</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">(</span>D<span class="token operator">./</span>D0<span class="token punctuation">)</span><span class="token operator">.^</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    output <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">ifft2</span><span class="token punctuation">(</span><span class="token function">ifftshift</span><span class="token punctuation">(</span>F<span class="token operator">.*</span>H<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%卷积逆变换</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A%E6%88%AA%E5%9B%BE/lab4_%E4%BD%8E%E9%80%9A%E6%BB%A4%E6%B3%A2-%E5%99%AA%E5%A3%B0.png" alt="低通滤波-噪声"></p><p><img src="%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A%E6%88%AA%E5%9B%BE/lab4_%E4%BD%8E%E9%80%9A%E6%BB%A4%E6%B3%A2-%E5%99%AA%E5%A3%B02.png" alt="低通滤波-噪声2"></p><p>​    理想低通滤波器的振铃效果较为明显，降噪效果较差。巴特沃斯低通滤波和高斯低通滤波没有振铃效应，降噪效果基本相同，都优于理想低通滤波。</p><h4 id="7．-对图像-pout-bmp、Girl-bmp-分别采用高通滤波器、巴特沃斯高通滤波器和高斯高通滤波器（截止频率自选），再做反变换，观察不同截止频率下采用不同高通滤波器得到的图像与原图像的区别，特别注意振铃效应。"><a href="#7．-对图像-pout-bmp、Girl-bmp-分别采用高通滤波器、巴特沃斯高通滤波器和高斯高通滤波器（截止频率自选），再做反变换，观察不同截止频率下采用不同高通滤波器得到的图像与原图像的区别，特别注意振铃效应。" class="headerlink" title="7． 对图像 pout.bmp、Girl.bmp 分别采用高通滤波器、巴特沃斯高通滤波器和高斯高通滤波器（截止频率自选），再做反变换，观察不同截止频率下采用不同高通滤波器得到的图像与原图像的区别，特别注意振铃效应。"></a>7． 对图像 pout.bmp、Girl.bmp 分别采用高通滤波器、巴特沃斯高通滤波器和高斯高通滤波器（截止频率自选），再做反变换，观察不同截止频率下采用不同高通滤波器得到的图像与原图像的区别，特别注意振铃效应。</h4><ul><li>使用<code>imread</code>读取灰度图像</li><li>编写<code>ILPF</code>、<code>BLPF</code>、<code>ELPF</code>三个函数进行理想高通滤波、巴特沃斯高通滤波、高斯高通滤波</li><li>使用<code>size</code>获得图像的大小</li><li>使用<code>fft2</code>与<code>fftshift</code>对图像进行 Fourier 变换并将低频移至中心</li><li>使用<code>meshgrid</code>构建坐标矩阵</li><li>使用<code>hypot</code>在坐标矩阵上计算各点到中心点的距离</li><li>使用<code>ifft2</code>与<code>ifftshift</code>撤销<code>fftshift</code>的移动并进行逆 Fourier 变换</li><li>使用<code>imshow</code>显示高通滤波后的结果</li></ul><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">source1 <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">'Pout.bmp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>source2 <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">'Girl.bmp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>D <span class="token operator">=</span> <span class="token number">15</span> <span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>source1<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Pout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">ILPF</span><span class="token punctuation">(</span>source1<span class="token punctuation">,</span>D<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Pout理想高通滤波器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">BLPF</span><span class="token punctuation">(</span>source1<span class="token punctuation">,</span>D<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Pout巴特沃斯高通滤波器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">ELPF</span><span class="token punctuation">(</span>source1<span class="token punctuation">,</span>D<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Pout高斯高通滤波器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>source2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Girl'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">ILPF</span><span class="token punctuation">(</span>source2<span class="token punctuation">,</span>D<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Girl理想高通滤波器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">BLPF</span><span class="token punctuation">(</span>source2<span class="token punctuation">,</span>D<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Girl巴特沃斯高通滤波器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">ELPF</span><span class="token punctuation">(</span>source2<span class="token punctuation">,</span>D<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Girl高斯高通滤波器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">%理想高通滤波器</span><span class="token keyword">function</span> output <span class="token operator">=</span> <span class="token function">ILPF</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span>D0<span class="token punctuation">)</span>    <span class="token punctuation">[</span>r<span class="token punctuation">,</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>    F <span class="token operator">=</span> <span class="token function">fftshift</span><span class="token punctuation">(</span><span class="token function">fft2</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%傅里叶变换并平移</span>    <span class="token punctuation">[</span>U<span class="token punctuation">,</span>V<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">meshgrid</span><span class="token punctuation">(</span><span class="token operator">-</span>l<span class="token operator">/</span><span class="token number">2</span><span class="token operator">:</span>l<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span>r<span class="token operator">/</span><span class="token number">2</span><span class="token operator">:</span>r<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%构建坐标</span>    D <span class="token operator">=</span> <span class="token function">hypot</span><span class="token punctuation">(</span>U<span class="token punctuation">,</span>V<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%计算中心偏移距离</span>    H <span class="token operator">=</span> D <span class="token operator">&gt;</span> D0 <span class="token punctuation">;</span>    output <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">ifft2</span><span class="token punctuation">(</span><span class="token function">ifftshift</span><span class="token punctuation">(</span>F<span class="token operator">.*</span>H<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%卷积逆变换</span><span class="token keyword">end</span><span class="token comment">%巴特沃斯高通滤波器</span><span class="token keyword">function</span> output <span class="token operator">=</span> <span class="token function">BLPF</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span>D0<span class="token punctuation">,</span>n<span class="token punctuation">)</span>    <span class="token punctuation">[</span>r<span class="token punctuation">,</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>    F <span class="token operator">=</span> <span class="token function">fftshift</span><span class="token punctuation">(</span><span class="token function">fft2</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%傅里叶变换并平移</span>    <span class="token punctuation">[</span>U<span class="token punctuation">,</span>V<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">meshgrid</span><span class="token punctuation">(</span><span class="token operator">-</span>l<span class="token operator">/</span><span class="token number">2</span><span class="token operator">:</span>l<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span>r<span class="token operator">/</span><span class="token number">2</span><span class="token operator">:</span>r<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%构建坐标</span>    D <span class="token operator">=</span> <span class="token function">hypot</span><span class="token punctuation">(</span>U<span class="token punctuation">,</span>V<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%计算中心偏移距离</span>    H <span class="token operator">=</span> <span class="token number">1.</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>D0<span class="token operator">./</span>D<span class="token punctuation">)</span><span class="token operator">.^</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    output <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">ifft2</span><span class="token punctuation">(</span><span class="token function">ifftshift</span><span class="token punctuation">(</span>F<span class="token operator">.*</span>H<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%卷积逆变换</span><span class="token keyword">end</span><span class="token comment">%高斯高通滤波器</span><span class="token keyword">function</span> output <span class="token operator">=</span> <span class="token function">ELPF</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span>D0<span class="token punctuation">,</span>n<span class="token punctuation">)</span>    <span class="token punctuation">[</span>r<span class="token punctuation">,</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>    F <span class="token operator">=</span> <span class="token function">fftshift</span><span class="token punctuation">(</span><span class="token function">fft2</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%傅里叶变换并平移</span>    <span class="token punctuation">[</span>U<span class="token punctuation">,</span>V<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">meshgrid</span><span class="token punctuation">(</span><span class="token operator">-</span>l<span class="token operator">/</span><span class="token number">2</span><span class="token operator">:</span>l<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span>r<span class="token operator">/</span><span class="token number">2</span><span class="token operator">:</span>r<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%构建坐标</span>    D <span class="token operator">=</span> <span class="token function">hypot</span><span class="token punctuation">(</span>U<span class="token punctuation">,</span>V<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%计算中心偏移距离</span>    H <span class="token operator">=</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">(</span>D0<span class="token operator">./</span>D<span class="token punctuation">)</span><span class="token operator">.^</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    output <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">ifft2</span><span class="token punctuation">(</span><span class="token function">ifftshift</span><span class="token punctuation">(</span>F<span class="token operator">.*</span>H<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%卷积逆变换</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>阈值15的高通滤波</p><p><img src="%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A%E6%88%AA%E5%9B%BE/lab4_%E9%AB%98%E9%80%9A%E6%BB%A4%E6%B3%A2-15.png" alt="高通滤波-15"></p><p>阈值1的高通滤波</p><p><img src="%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A%E6%88%AA%E5%9B%BE/lab4_%E9%AB%98%E9%80%9A%E6%BB%A4%E6%B3%A2-1.png" alt="image-20220515183104336"></p><p>阈值50的高通滤波</p><p><img src="%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A%E6%88%AA%E5%9B%BE/lab4_%E9%AB%98%E9%80%9A%E6%BB%A4%E6%B3%A2-50.png" alt="高通滤波-50"></p><p>​    在较高阈值下，图像保留的低频信息较少，图像最暗，部分不明显的轮廓被丢弃，理想高通滤波有振铃效应。在适中阈值下，保留了部分低频信息，提取出了高频的图像轮廓，理想高通滤波有一定振铃效应。在较低阈值下，图像在滤波前后没有明显变化，理想高通滤波的振铃效应也不可察觉。</p><h4 id="8．-对图像-pout-bmp-经过高频增强滤波，再进行直方图均衡化，显示结果图像；-对图像-pout-bmp-先进行直方图均衡化，再经过高频增强滤波，显示结果图像；观察对比不同处理顺序对结果图像的影响。"><a href="#8．-对图像-pout-bmp-经过高频增强滤波，再进行直方图均衡化，显示结果图像；-对图像-pout-bmp-先进行直方图均衡化，再经过高频增强滤波，显示结果图像；观察对比不同处理顺序对结果图像的影响。" class="headerlink" title="8． 对图像 pout.bmp 经过高频增强滤波，再进行直方图均衡化，显示结果图像； 对图像 pout.bmp 先进行直方图均衡化，再经过高频增强滤波，显示结果图像；观察对比不同处理顺序对结果图像的影响。"></a>8． 对图像 pout.bmp 经过高频增强滤波，再进行直方图均衡化，显示结果图像； 对图像 pout.bmp 先进行直方图均衡化，再经过高频增强滤波，显示结果图像；观察对比不同处理顺序对结果图像的影响。</h4><ul><li>使用<code>imread</code>读取灰度图像</li><li>编写<code>ILPF</code>、<code>BLPF</code>、<code>ELPF</code>三个函数进行理想高频增强滤波、巴特沃斯高频增强滤波、高斯高频增强滤波</li><li>使用<code>size</code>获得图像的大小</li><li>使用<code>fft2</code>与<code>fftshift</code>对图像进行 Fourier 变换并将低频移至中心</li><li>使用<code>meshgrid</code>构建坐标矩阵</li><li>使用<code>hypot</code>在坐标矩阵上计算各点到中心点的距离</li><li>使用<code>ifft2</code>与<code>ifftshift</code>撤销<code>fftshift</code>的移动并进行逆 Fourier 变换</li><li>使用<code>histeq</code>进行直方图均衡化</li><li>使用<code>imshow</code>显示 先高频增强滤波后直方图均衡 和 先直方图均衡再高频增强滤波的结果</li></ul><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">source <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">'Pout.bmp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>D <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Pout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">histeq</span><span class="token punctuation">(</span><span class="token function">uint8</span><span class="token punctuation">(</span><span class="token function">ILPF</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span>D<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Pout理想高频-直方图'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">histeq</span><span class="token punctuation">(</span><span class="token function">uint8</span><span class="token punctuation">(</span><span class="token function">BLPF</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span>D<span class="token punctuation">,</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Pout巴特沃斯高频-直方图'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">histeq</span><span class="token punctuation">(</span><span class="token function">uint8</span><span class="token punctuation">(</span><span class="token function">ELPF</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span>D<span class="token punctuation">,</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Pout高斯高频-直方图'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">ILPF</span><span class="token punctuation">(</span><span class="token function">histeq</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">,</span>D<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Pout直方图-理想高频'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">BLPF</span><span class="token punctuation">(</span><span class="token function">histeq</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">,</span>D<span class="token punctuation">,</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Pout直方图-巴特沃斯高频'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">ELPF</span><span class="token punctuation">(</span><span class="token function">histeq</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">,</span>D<span class="token punctuation">,</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'Pout直方图-高斯高频'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%理想高频滤波器</span><span class="token keyword">function</span> output <span class="token operator">=</span> <span class="token function">ILPF</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span>D0<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>    <span class="token punctuation">[</span>r<span class="token punctuation">,</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>    F <span class="token operator">=</span> <span class="token function">fftshift</span><span class="token punctuation">(</span><span class="token function">fft2</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%傅里叶变换并平移</span>    <span class="token punctuation">[</span>U<span class="token punctuation">,</span>V<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">meshgrid</span><span class="token punctuation">(</span><span class="token operator">-</span>l<span class="token operator">/</span><span class="token number">2</span><span class="token operator">:</span>l<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span>r<span class="token operator">/</span><span class="token number">2</span><span class="token operator">:</span>r<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%构建坐标</span>    D <span class="token operator">=</span> <span class="token function">hypot</span><span class="token punctuation">(</span>U<span class="token punctuation">,</span>V<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%计算中心偏移距离</span>    H <span class="token operator">=</span> D <span class="token operator">&gt;</span> D0 <span class="token punctuation">;</span>    H <span class="token operator">=</span> a <span class="token operator">*</span> H <span class="token operator">+</span> b<span class="token punctuation">;</span>    output <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">ifft2</span><span class="token punctuation">(</span><span class="token function">ifftshift</span><span class="token punctuation">(</span>F<span class="token operator">.*</span>H<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%卷积逆变换</span><span class="token keyword">end</span><span class="token comment">%巴特沃斯高频滤波器</span><span class="token keyword">function</span> output <span class="token operator">=</span> <span class="token function">BLPF</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span>D0<span class="token punctuation">,</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>    <span class="token punctuation">[</span>r<span class="token punctuation">,</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>    F <span class="token operator">=</span> <span class="token function">fftshift</span><span class="token punctuation">(</span><span class="token function">fft2</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%傅里叶变换并平移</span>    <span class="token punctuation">[</span>U<span class="token punctuation">,</span>V<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">meshgrid</span><span class="token punctuation">(</span><span class="token operator">-</span>l<span class="token operator">/</span><span class="token number">2</span><span class="token operator">:</span>l<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span>r<span class="token operator">/</span><span class="token number">2</span><span class="token operator">:</span>r<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%构建坐标</span>    D <span class="token operator">=</span> <span class="token function">hypot</span><span class="token punctuation">(</span>U<span class="token punctuation">,</span>V<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%计算中心偏移距离</span>    H <span class="token operator">=</span> <span class="token number">1.</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>D0<span class="token operator">./</span>D<span class="token punctuation">)</span><span class="token operator">.^</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    H <span class="token operator">=</span> a <span class="token operator">*</span> H <span class="token operator">+</span> b<span class="token punctuation">;</span>    output <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">ifft2</span><span class="token punctuation">(</span><span class="token function">ifftshift</span><span class="token punctuation">(</span>F<span class="token operator">.*</span>H<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%卷积逆变换</span><span class="token keyword">end</span><span class="token comment">%高斯高频滤波器</span><span class="token keyword">function</span> output <span class="token operator">=</span> <span class="token function">ELPF</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span>D0<span class="token punctuation">,</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>    <span class="token punctuation">[</span>r<span class="token punctuation">,</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>    F <span class="token operator">=</span> <span class="token function">fftshift</span><span class="token punctuation">(</span><span class="token function">fft2</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%傅里叶变换并平移</span>    <span class="token punctuation">[</span>U<span class="token punctuation">,</span>V<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">meshgrid</span><span class="token punctuation">(</span><span class="token operator">-</span>l<span class="token operator">/</span><span class="token number">2</span><span class="token operator">:</span>l<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span>r<span class="token operator">/</span><span class="token number">2</span><span class="token operator">:</span>r<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%构建坐标</span>    D <span class="token operator">=</span> <span class="token function">hypot</span><span class="token punctuation">(</span>U<span class="token punctuation">,</span>V<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%计算中心偏移距离</span>    H <span class="token operator">=</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span>D0<span class="token operator">./</span>D<span class="token punctuation">)</span><span class="token operator">.^</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    H <span class="token operator">=</span> a <span class="token operator">*</span> H <span class="token operator">+</span> b<span class="token punctuation">;</span>    output <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">ifft2</span><span class="token punctuation">(</span><span class="token function">ifftshift</span><span class="token punctuation">(</span>F<span class="token operator">.*</span>H<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%卷积逆变换</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>阈值为15，高频增强方程为$H_e(u,v)=4H(u,v)+1$的结果如下</p><p><img src="%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A%E6%88%AA%E5%9B%BE/lab4_%E7%9B%B4%E6%96%B9%E5%9B%BE%E5%9D%87%E8%A1%A1%E4%B8%8E%E9%AB%98%E9%A2%91%E5%A2%9E%E5%BC%BA%E6%BB%A4%E6%B3%A2.png" alt="直方图均衡与高频增强滤波"></p><p>​    先高频增强滤波再直方图均衡得到的图像较亮，先直方图均衡再高频增强滤波得到的图像较暗。这是因为直方图均衡可以让图像灰度分布均匀，因此高频增强滤波后直方图均衡得到较亮的结果。但先直方图均衡再高频增强滤波时，由于图像的能量集中在低频，高频增强滤波后图像失去大部分能量，因此较暗。</p><h2 id="实验五-图像恢复与图像分割"><a href="#实验五-图像恢复与图像分割" class="headerlink" title="实验五 图像恢复与图像分割"></a>实验五 图像恢复与图像分割</h2><h3 id="1．-对图像-flower1-jpg-设置运动位移-30-个像素、运动方向-45-度，产生运动模糊图像，对其采用逆滤波和维纳滤波进行恢复，显示、对比分析恢复结果图像。对产生的运动模糊图像加高斯噪声，产生有噪声图像，分别对其采用逆滤波和维纳滤波进行恢复，显示、对比分析恢复结果图像。"><a href="#1．-对图像-flower1-jpg-设置运动位移-30-个像素、运动方向-45-度，产生运动模糊图像，对其采用逆滤波和维纳滤波进行恢复，显示、对比分析恢复结果图像。对产生的运动模糊图像加高斯噪声，产生有噪声图像，分别对其采用逆滤波和维纳滤波进行恢复，显示、对比分析恢复结果图像。" class="headerlink" title="1． 对图像 flower1.jpg 设置运动位移 30 个像素、运动方向 45 度，产生运动模糊图像，对其采用逆滤波和维纳滤波进行恢复，显示、对比分析恢复结果图像。对产生的运动模糊图像加高斯噪声，产生有噪声图像，分别对其采用逆滤波和维纳滤波进行恢复，显示、对比分析恢复结果图像。"></a>1． 对图像 flower1.jpg 设置运动位移 30 个像素、运动方向 45 度，产生运动模糊图像，对其采用逆滤波和维纳滤波进行恢复，显示、对比分析恢复结果图像。对产生的运动模糊图像加高斯噪声，产生有噪声图像，分别对其采用逆滤波和维纳滤波进行恢复，显示、对比分析恢复结果图像。</h3><ul><li>使用<code>imread</code>读取灰度图像</li><li>使用<code>im2double</code>将图像的元素类型转换为double以便于后续计算方差</li><li>使用<code>fspecial</code>获得运动模糊滤波器</li><li>使用<code>imfilter</code>将运动模糊应用于原图像得到运动模糊的图像</li><li>使用<code>imnoise</code>在添加了运动模糊的图像上添加高斯噪声</li><li>使用<code>deconvwnr</code>进行逆滤波和维纳滤波，在无估计噪声的情况下，将噪信比设为0，维纳滤波退化为逆滤波。将噪信比指定为高斯噪声与图像的方差比就可以进行维纳滤波</li><li>使用<code>imshow</code>显示运动模糊图像、同时添加运动模糊与高斯噪声的图像、对这两种图像分别应用逆滤波和维纳滤波的结果</li></ul><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">source <span class="token operator">=</span> <span class="token function">im2double</span><span class="token punctuation">(</span><span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">'flower1.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>psf <span class="token operator">=</span> <span class="token function">fspecial</span><span class="token punctuation">(</span><span class="token string">'motion'</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%运动模糊滤波器</span>motion <span class="token operator">=</span> <span class="token function">imfilter</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span>psf<span class="token punctuation">,</span><span class="token string">'conv'</span><span class="token punctuation">,</span><span class="token string">'circular'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%产生运动模糊</span>noisy <span class="token operator">=</span> <span class="token function">imnoise</span><span class="token punctuation">(</span>motion<span class="token punctuation">,</span><span class="token string">'gauss'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.0001</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%产生高斯噪声</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'flower1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>motion<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'flower1运动模糊'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">deconvwnr</span><span class="token punctuation">(</span>motion<span class="token punctuation">,</span>psf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'flower1运动模糊逆滤波'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">deconvwnr</span><span class="token punctuation">(</span>motion<span class="token punctuation">,</span>psf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'flower1运动模糊维纳滤波'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>noisy<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'flower1运动模糊&amp;高斯噪声'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">deconvwnr</span><span class="token punctuation">(</span>noisy<span class="token punctuation">,</span>psf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'flower1运动模糊&amp;高斯噪声逆滤波'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">deconvwnr</span><span class="token punctuation">(</span>noisy<span class="token punctuation">,</span>psf<span class="token punctuation">,</span><span class="token number">0.0001</span><span class="token operator">/</span><span class="token function">var</span><span class="token punctuation">(</span><span class="token function">motion</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'flower1运动模糊&amp;高斯噪声维纳滤波'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A%E6%88%AA%E5%9B%BE/lab6_%E9%80%86%E6%BB%A4%E6%B3%A2%E4%B8%8E%E7%BB%B4%E7%BA%B3%E6%BB%A4%E6%B3%A2.png" alt="逆滤波与维纳滤波"></p><p>​    在只添加运动模糊的情况下，逆滤波和维纳滤波本质上是等价的，都可以恢复得到原始图像。在同时添加运动模糊和高斯噪声的情况下，进行逆滤波时高频的高斯噪声会被放大，得到的结果效果很差，在进行维纳滤波时可以抑制噪声得到较好的结果，但噪声并不能完全去除，相比原图仍有一定噪声，这是因为虽然噪信比已知，但高斯噪声在图像上的分布是随机的，无法完全恢复。</p><h3 id="2．-对图像-lena-bmp-采用大津法（OTSU）自动选取阈值进行分割，显示分割二值化结果图像。"><a href="#2．-对图像-lena-bmp-采用大津法（OTSU）自动选取阈值进行分割，显示分割二值化结果图像。" class="headerlink" title="2． 对图像 lena.bmp 采用大津法（OTSU）自动选取阈值进行分割，显示分割二值化结果图像。"></a>2． 对图像 lena.bmp 采用大津法（OTSU）自动选取阈值进行分割，显示分割二值化结果图像。</h3><ul><li>使用<code>imread</code>读取灰度图像</li><li>编写<code>OSTU</code>函数使用大津法（OTSU）自动选取阈值。其中<code>miu</code>为均值累计矩阵，其第<code>i+2</code>项为灰度为<code>[0,i]</code>间的像素的均值，w为概率累计矩阵，其第<code>i+2</code>项为像素处于<code>[0,i]</code>的概率，之后用两个矩阵计算所有的类间方差矩阵g，取类间方差矩阵的最大值得到分割阈值T</li><li>使用<code>imbinarize</code>根据阈值将图像分割产生二值图像</li><li>使用<code>imshow</code>显示分别根据编写的<code>OSTU</code>函数和<code>Matlab</code>的库函数<code>graythresh</code>得到的阈值进行分割的结果</li></ul><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">source <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">'lena.bmp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'lena'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">imbinarize</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token function">OSTU</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'分割二值化结果'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token function">imbinarize</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token function">graythresh</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'分割二值化结果'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">function</span> T <span class="token operator">=</span> <span class="token function">OSTU</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span>    <span class="token punctuation">[</span>r<span class="token punctuation">,</span> l<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>    N <span class="token operator">=</span> r <span class="token operator">*</span> l<span class="token punctuation">;</span><span class="token comment">%获得像素点数</span>    miu <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">257</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%均值累计矩阵</span>    w <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">257</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%概率累计矩阵</span>    <span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">255</span>        p <span class="token operator">=</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>input <span class="token operator">==</span> <span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> N<span class="token punctuation">;</span><span class="token comment">%像素为i的像素所占比例</span>        <span class="token function">miu</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">miu</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p <span class="token operator">*</span> <span class="token number">i</span><span class="token punctuation">;</span>        <span class="token function">w</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">w</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p<span class="token punctuation">;</span>    <span class="token keyword">end</span>    g <span class="token operator">=</span> <span class="token punctuation">(</span>w<span class="token operator">./</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.*</span><span class="token punctuation">(</span>miu<span class="token operator">./</span>w<span class="token operator">-</span><span class="token function">miu</span><span class="token punctuation">(</span><span class="token number">257</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">;</span>    T <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>g<span class="token operator">==</span><span class="token function">max</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">255</span><span class="token punctuation">;</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A%E6%88%AA%E5%9B%BE/lab6_%E9%98%88%E5%80%BC%E5%88%86%E5%89%B2.png" alt="阈值分割"></p><p>  库函数与编写的<code>OSTU</code>函数得到的结果相同</p><h3 id="3．-对图像-cameraman-bmp-采用四叉树表达的迭代区域分裂合并算法进行分割。显示分割结果图像。"><a href="#3．-对图像-cameraman-bmp-采用四叉树表达的迭代区域分裂合并算法进行分割。显示分割结果图像。" class="headerlink" title="3． 对图像 cameraman.bmp 采用四叉树表达的迭代区域分裂合并算法进行分割。显示分割结果图像。"></a>3． 对图像 cameraman.bmp 采用四叉树表达的迭代区域分裂合并算法进行分割。显示分割结果图像。</h3><ul><li><p>使用<code>imread</code>读取灰度图像</p></li><li><p>使用<code>qtdecomp</code>得到对原图像进行四叉树分割后的稀疏矩阵</p></li><li><p>使用<code>qtsetblk</code>设置各个大小的块的边界以获得分割图像</p></li><li><p>使用<code>imshow</code>显示分割后的图像</p></li><li><p>使用<code>qtgetblk</code>得到各个大小的块后，给每个块不同的编号</p></li><li><p>使用<code>boundarymask</code>得到指定编号的边界，再根据边界的编号查找相邻块</p></li><li><p>使用<code>range</code>得到合并区域的极差，将合并后能够小于阈值的块合并</p></li><li><p>使用<code>imshow</code>显示分割后的图像</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">source <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">'cameraman.bmp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'原图'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> range_value <span class="token operator">=</span> <span class="token number">.35</span><span class="token punctuation">;</span>S <span class="token operator">=</span> <span class="token function">qtdecomp</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span>range_value<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%四叉树分割</span>blocks <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%产生分块边界</span><span class="token keyword">for</span> dim <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">64</span> <span class="token number">32</span> <span class="token number">16</span> <span class="token number">8</span> <span class="token number">4</span> <span class="token number">2</span><span class="token punctuation">]</span>numblocks <span class="token operator">=</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>S<span class="token operator">==</span>dim<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>numblocks <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                values <span class="token operator">=</span> <span class="token function">repmat</span><span class="token punctuation">(</span><span class="token function">uint8</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span>dim dim numblocks<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">:</span>dim<span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">:</span>dim<span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        blocks <span class="token operator">=</span> <span class="token function">qtsetblk</span><span class="token punctuation">(</span>blocks<span class="token punctuation">,</span>S<span class="token punctuation">,</span>dim<span class="token punctuation">,</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">end</span><span class="token keyword">end</span><span class="token comment">%产生分裂图</span>output1 <span class="token operator">=</span> source<span class="token punctuation">;</span><span class="token function">output1</span><span class="token punctuation">(</span>blocks<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>output1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'分裂'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">%将各块分别标记</span><span class="token number">i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> dim <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">64</span> <span class="token number">32</span> <span class="token number">16</span> <span class="token number">8</span> <span class="token number">4</span> <span class="token number">2</span><span class="token punctuation">]</span>    <span class="token punctuation">[</span>vals<span class="token punctuation">,</span>r<span class="token punctuation">,</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">qtgetblk</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span>S<span class="token punctuation">,</span>dim<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token operator">~</span><span class="token function">isempty</span><span class="token punctuation">(</span>vals<span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token number">j</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token function">length</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>            <span class="token number">i</span> <span class="token operator">=</span> <span class="token number">i</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">blocks</span><span class="token punctuation">(</span><span class="token function">r</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">r</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">+</span> dim <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">+</span> dim <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">i</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token comment">%将极差较小的块的标记合并</span><span class="token keyword">for</span> <span class="token number">j</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">i</span>    bound <span class="token operator">=</span> <span class="token function">boundarymask</span><span class="token punctuation">(</span>blocks<span class="token operator">==</span><span class="token number">j</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span>blocks<span class="token operator">==</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span>r<span class="token punctuation">,</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>bound<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> k <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token function">size</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        merge <span class="token operator">=</span> <span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">(</span>blocks<span class="token operator">==</span><span class="token number">j</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>blocks<span class="token operator">==</span><span class="token function">blocks</span><span class="token punctuation">(</span><span class="token function">r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token function">merge</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>range_value<span class="token operator">*</span><span class="token number">256</span><span class="token punctuation">)</span>            <span class="token function">blocks</span><span class="token punctuation">(</span>blocks<span class="token operator">==</span><span class="token function">blocks</span><span class="token punctuation">(</span><span class="token function">r</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">l</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">j</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token comment">%根据标记重新分割</span>output2 <span class="token operator">=</span> source<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token number">255</span>    <span class="token keyword">for</span> <span class="token number">j</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token number">255</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">blocks</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">~=</span><span class="token function">blocks</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">blocks</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">~=</span><span class="token function">blocks</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">output2</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imshow</span><span class="token punctuation">(</span>output2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token string">'合并'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A%E6%88%AA%E5%9B%BE/lab6_%E5%9B%9B%E5%8F%89%E6%A0%91%E5%88%86%E8%A3%82%E5%90%88%E5%B9%B6.png" alt="四叉树分裂合并"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-game</title>
      <link href="/2022/08/01/python-game/"/>
      <url>/2022/08/01/python-game/</url>
      
        <content type="html"><![CDATA[<h1 id="python-game"><a href="#python-game" class="headerlink" title="python-game"></a>python-game</h1><p>[Toc]</p><h2 id="小组成员"><a href="#小组成员" class="headerlink" title="小组成员"></a>小组成员</h2><p>PB20111696  王琛<br>PB20111697  王骥扬<br>PB20111699  吴骏东</p><h2 id="项目摘要"><a href="#项目摘要" class="headerlink" title="项目摘要"></a>项目摘要</h2><p>本项目借鉴<a href="https://github.com/grantjenks/free-python-games">Free Python Games</a>使用turtle构建游戏界面，使用开源<a href="https://github.com/deepmind/open_spiel">open_spiel</a>平台的游戏AI，加入<a href="https://github.com/Uberi/speech_recognition">speech_recognition</a>的语音识别辅助游戏输入，支持<a href="https://en.wikipedia.org/wiki/Tic-tac-toe">Tictactoe</a> <a href="https://en.wikipedia.org/wiki/Go_(game)">Go</a> <a href="https://en.wikipedia.org/wiki/Y_(game)">Y</a> <a href="https://en.wikipedia.org/wiki/Hex_(board_game)">Hex</a> <a href="https://en.wikipedia.org/wiki/Havannah">Havannah</a>五种游戏，并对<a href="https://github.com/grantjenks/free-python-games">Free Python Games</a>中的paint与snake进行拓展，同时对原 Free Python Games 中大部分的游戏进行了升级处理。完成了相对统一与独立的游戏封装，提高了可扩展性与可移植性。在Windows11和 Ubuntu 20.04.4 LTS 上测试通过。</p><h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><blockquote><p>OpenSpiel 是用于研究游戏中的强化学习和搜索/规划的环境和算法的集合。OpenSpiel 支持多种类型的游戏，在人数上包括单人与多人，在策略上支持零和、合作和一般和、在规则上支持一次性游戏和顺序游戏、在行动上支持严格轮流和同时行动、在信息上支持完美和不完美信息博弈。OpenSpiel 还包括分析学习动态和其他常见评估指标的工具。</p></blockquote><blockquote><p>Speech recognition 是一个Python的语音识别模块，支持多种语音线上、线下的语音识别模型。采用不同的语音识别模型，可以使用这些语音模型提供的特性，例如根据语法识别、识别特定关键字、识别首选短语，支持多种语言、方言。</p></blockquote><blockquote><p>Free Python Games 是一个 Apache2 许可的免费 Python 游戏集合，用于教育和娱乐。这些游戏是用简单的 Python 代码编写的，专为实验和更改而设计。包括几个经典街机游戏的简化版本。标准库有一个名为 Turtle 的模块，这是一种向孩子们介绍编程的流行方式。Free Python Games中的所有游戏都是使用 Python 及其 Turtle 模块实现的。可以在任何可以安装 Python 的地方运行，包括运行 Windows、Mac OS 或 Linux 的台式计算机以及较旧或低功耗的硬件。</p></blockquote><p>对于教育目的而言，本项目拓展了Free Python Games，增添了新的策略游戏，规则易懂，同时加入了OpenSpiel的游戏ai，使游戏具有可玩性，有助于学者在学习游戏制作的基础上进一步学习基于游戏背景的强化学习、搜索、最优化、估值算法，同时加入了语音识别模块，方便不适用于鼠标操控的场景。</p><p>对于研究目的而言，OpenSpiel 包含当前主流的强化学习算法，与时俱进，Speech recognition 是支持线上的语音识别模型，具有很强的可拓展性。本项目提供的简单图形界面易于实现，便于算法的实际测试与使用，具有实用性。</p><p>项目的技术难度主要在于实现一个统一的接口封装图形化界面、ai与语音识别，在避免复杂逻辑的情况下减少三者的耦合，从而使得项目易于学习与拓展。</p><h2 id="项目内容"><a href="#项目内容" class="headerlink" title="项目内容"></a>项目内容</h2><h3 id="项目目标"><a href="#项目目标" class="headerlink" title="项目目标"></a>项目目标</h3><p>实现OpenSpiel、Speech recognition、Free Python Games的协同工作。实现一个统一的接口封装图形化界面、ai与语音识别。</p><h3 id="基本原理与模型"><a href="#基本原理与模型" class="headerlink" title="基本原理与模型"></a>基本原理与模型</h3><p>项目的图形化界面使用python的turtle库实现。为实现OpenSpiel、Speech recognition、Free Python Games的协同工作，构建了一个基类<code>Game()</code>，在基类中实现ai的初始化，以及游戏的进行的函数。项目中的ai使用蒙特卡洛算法对游戏的状态空间进行搜索，只需将ai的初始化函数<code>init_bot(self, bot_type, game, simulations=1000)</code>修改即可实现模型的替换。</p><p>具体的游戏通过继承父类<code>Game()</code>实现，在子类中使用turtle库构建图形化界面，通过<code>turtle.onscreenclick()</code>增加游戏对于鼠标点击的响应，在触发的函数中调用OpenSpiel，获得ai的行动。若不需要ai，只需将触发函数中的ai调用删去即可。</p><p>语音识别通过在OpenSpiel的人类bot中，在输入部分调用语音模块实现。</p><h3 id="总体架构设计流程"><a href="#总体架构设计流程" class="headerlink" title="总体架构设计流程"></a>总体架构设计流程</h3><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid">classDiagramGame &lt;|-- ExampleGame : __init__(self, name, show, type='mouse', simulations=1000)Game : init_bot(self, bot_type, game, simulations=1000)Game : init_game(self)Game : play_game(self, position=None)Example : _stateExample : playersExample : arrExample : __init__()Example : grid()Example : draw_black()Example : draw_white()Example : draw()Example : show()Example : tap()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid">flowchart    A[解析命令行参数] --&gt; B[初始化游戏界面]    B --&gt; C[初始化ai]    C --&gt; D[添加鼠标触发函数]    D --&gt; E[等待鼠标点击事件]    E --&gt; F[ai响应]    F --&gt; G[游戏结束]    F --&gt; E    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid">flowchart    A[解析命令行参数] --&gt; B[初始化游戏界面]    B --&gt; C[初始化ai]    C --&gt; D[等待语音输入]    D --&gt; E[ai响应]    E --&gt; F[游戏结束]    E --&gt; D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="项目具体实现"><a href="#项目具体实现" class="headerlink" title="项目具体实现"></a>项目具体实现</h3><h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><p>项目在Windows11和 Ubuntu 20.04.4 LTS 上测试通过</p><p>conda 4.13.0</p><p>执行<code>conda create -n openspiel python=3.9</code>创建python3.9环境</p><p>执行<code>conda activate openspiel</code>激活环境</p><h5 id="open-spiel"><a href="#open-spiel" class="headerlink" title="open_spiel"></a>open_spiel</h5><h6 id="Ubuntu-20-04-4-LTS"><a href="#Ubuntu-20-04-4-LTS" class="headerlink" title="Ubuntu 20.04.4 LTS"></a>Ubuntu 20.04.4 LTS</h6><p>执行<code>pip install open_spiel</code>安装open_spiel</p><p>执行<code>pip install tensorflow  </code> 安装open_spiel所需库</p><blockquote><p>参考版本如下</p><p>open-spiel                   1.0.2</p><p>tensorflow                   2.9.1</p></blockquote><h6 id="Windows11"><a href="#Windows11" class="headerlink" title="Windows11"></a>Windows11</h6><p>从github上clone项目，具体操作如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>MyUser<span class="token function">git</span> clone https://github.com/deepmind/open_spiel.git<span class="token builtin class-name">cd</span> open_spiel<span class="token function">git</span> clone -b smart_holder --single-branch --depth <span class="token number">1</span> https://github.com/pybind/pybind11.git pybind11<span class="token function">git</span> clone -b <span class="token number">20211102.0</span> --single-branch --depth <span class="token number">1</span> https://github.com/abseil/abseil-cpp.git open_spiel<span class="token punctuation">\</span>abseil-cpp<span class="token function">git</span> clone -b develop --single-branch --depth <span class="token number">1</span> https://github.com/jblespiau/dds.git open_spiel<span class="token punctuation">\</span>games<span class="token punctuation">\</span>bridge<span class="token punctuation">\</span>double_dummy_solver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用CMake 根据 C:\Users\MyUser\open_spiel\open_spiel\CMakeLists.txt编译整个项目，可以从官网安装CMake或使用Visual Studio打开CMake项目进行编译，将编译得到的pyspiel库放置于python环境的site-packages下，并把C:\Users\MyUser\open_spiel\open_spiel\python复制到site-packages下</p><p>执行<code>pip install absl-py attrs numpy tensorflow</code>  安装open_spiel所需库</p><blockquote><p>参考版本如下</p><p>absl-py                      1.1.0</p><p>attrs                        21.4.0</p><p>numpy                        1.23.0</p><p>tensorflow                   2.9.1</p></blockquote><h5 id="speech-recognition"><a href="#speech-recognition" class="headerlink" title="speech-recognition"></a>speech-recognition</h5><p>从github clone <a href="https://github.com/Uberi/speech_recognition">speech_recognition</a>项目</p><p>在clone的项目下执行<code>python setup.py install</code>安装speech-recognition</p><p>执行<code> sudo apt-get install libasound-dev portaudio19-dev libportaudio2 libportaudiocpp0</code>安装PyAudio的依赖</p><p>执行<code>pip install PyAudio Vosk </code> 安装speech-recognition所需库</p><blockquote><p>参考版本如下</p><p>PyAudio             0.2.11</p><p>vosk                0.3.42</p></blockquote><p>下载vosk的中文<a href="https://alphacephei.com/vosk/models">model</a>并解压于根目录model文件夹下，参考模型为<a href="https://alphacephei.com/vosk/models/vosk-model-cn-0.22.zip">vosk-model-cn-0.22</a></p><blockquote><p>model文件夹目录结构为</p><p>├── model<br>│   ├── am<br>│   │   └── final.mdl<br>│   ├── conf<br>│   │   ├── mfcc.conf<br>│   │   └── model.conf<br>│   ├── graph<br>│   │   ├── HCLG.fst<br>│   │   ├── phones<br>│   │   │   └── word_boundary.int<br>│   │   └── words.txt<br>│   ├── ivector<br>│   │   ├── final.dubm<br>│   │   ├── final.ie<br>│   │   ├── final.mat<br>│   │   ├── global_cmvn.stats<br>│   │   ├── online_cmvn.conf<br>│   │   └── splice.conf<br>│   ├── README<br>│   ├── rescore<br>│   │   ├── G.carpa<br>│   │   └── G.fst<br>│   └── rnnlm<br>│       ├── feat_embedding.final.mat<br>│       ├── features.txt<br>│       ├── final.raw<br>│       ├── oov.txt<br>│       ├── special_symbol_opts.conf<br>│       ├── special_symbol_opts.txt<br>│       └── word_feats.txt</p></blockquote><h5 id="freegames"><a href="#freegames" class="headerlink" title="freegames"></a>freegames</h5><p>执行<code>pip install freegames</code>安装freegames</p><p>参考版本如下</p><p>freegames                    2.4.0</p><h4 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h4><p>在根目录下执行python main.py -h 查看命令行参数说明</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">usage: main.py <span class="token punctuation">[</span>-h<span class="token punctuation">]</span> <span class="token punctuation">[</span>-g GAME<span class="token punctuation">]</span> <span class="token punctuation">[</span>-t TYPE<span class="token punctuation">]</span> <span class="token punctuation">[</span>-s SIMULATIONS<span class="token punctuation">]</span>Free_Python_Game <span class="token operator">&amp;</span> Open_Spiel <span class="token operator">&amp;</span> Speech_Recognitionoptional arguments:  -h, --help            show this <span class="token builtin class-name">help</span> message and <span class="token builtin class-name">exit</span>  -g GAME, --game GAME  game name: Tictactoe、Go、Y、Hex、Havannah、snake、paint、Ant                        、Bagles、Boom、Bounce、Cannon、Connect、Crypto、Fidget、Flapp                        y、Guess、Life、Madlibs、Maze、Memory、Minesweeper、Pacman、Pa                        int、Pong、Rps_game、Simonsays、Snake、Tictactoe、Tiles、Tron  -t TYPE, --type TYPE  mouse or voice  -s SIMULATIONS, --simulations SIMULATIONS                        How many iterations of MCTS to perform<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用-g 指定游戏名称，使用-t 指定输入类型（mouse或voice），使用-s 指定蒙特卡洛迭代次数</p><p>在关于open_speil五个游戏中，三个参数均为可选，-g 默认为Tictactoe，-t 默认为mouse，-s 默认为 1000；其余游戏只可支持第一个参数</p><p>例如 python main.py -g=Go 即可启动Go游戏</p><p>游戏中均为ai先手，第一步可能需要等待一段时间</p><h4 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h4><h5 id="命令行参数解析"><a href="#命令行参数解析" class="headerlink" title="命令行参数解析"></a>命令行参数解析</h5><p>使用 argparse 实现命令行参数的解析，可用的命令行参数有游戏名称（[‘Tictactoe’, ‘Go’, ‘Y’, ‘Hex’, ‘Havannah’]， 以及 free-python-game 中支持的游戏名称）、输入方式（鼠标或语音）、蒙特卡洛算法迭代次数（次数越高ai水平越高，消耗时间随迭代次数线性增长）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> argparse<span class="token keyword">from</span> openspiel<span class="token punctuation">.</span>game<span class="token punctuation">.</span>Tictactoe <span class="token keyword">import</span> Tictactoe<span class="token keyword">from</span> openspiel<span class="token punctuation">.</span>game<span class="token punctuation">.</span>Go <span class="token keyword">import</span> Go<span class="token keyword">from</span> openspiel<span class="token punctuation">.</span>game<span class="token punctuation">.</span>Y <span class="token keyword">import</span> Y<span class="token keyword">from</span> openspiel<span class="token punctuation">.</span>game<span class="token punctuation">.</span>Hex <span class="token keyword">import</span> Hex<span class="token keyword">from</span> openspiel<span class="token punctuation">.</span>game<span class="token punctuation">.</span>Havannah <span class="token keyword">import</span> Havannah<span class="token keyword">import</span> freegames_extern<span class="token punctuation">.</span>snake<span class="token keyword">import</span> freegames_extern<span class="token punctuation">.</span>paint<span class="token keyword">import</span> ospath <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/freegames'</span>freegameslist <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'Ant'</span><span class="token punctuation">,</span>    <span class="token string">'Bagles'</span><span class="token punctuation">,</span>    <span class="token string">'Boom'</span><span class="token punctuation">,</span>    <span class="token string">'Bounce'</span><span class="token punctuation">,</span>    <span class="token string">'Cannon'</span><span class="token punctuation">,</span>    <span class="token string">'Connect'</span><span class="token punctuation">,</span>    <span class="token string">'Crypto'</span><span class="token punctuation">,</span>    <span class="token string">'Fidget'</span><span class="token punctuation">,</span>    <span class="token string">'Flappy'</span><span class="token punctuation">,</span>    <span class="token string">'Guess'</span><span class="token punctuation">,</span>    <span class="token string">'Life'</span><span class="token punctuation">,</span>    <span class="token string">'Madlibs'</span><span class="token punctuation">,</span>    <span class="token string">'Maze'</span><span class="token punctuation">,</span>    <span class="token string">'Memory'</span><span class="token punctuation">,</span>    <span class="token string">'Minesweeper'</span><span class="token punctuation">,</span>    <span class="token string">'Pacman'</span><span class="token punctuation">,</span>    <span class="token string">'Paint'</span><span class="token punctuation">,</span>    <span class="token string">'Pong'</span><span class="token punctuation">,</span>    <span class="token string">'Rps_game'</span><span class="token punctuation">,</span>    <span class="token string">'Simonsays'</span><span class="token punctuation">,</span>    <span class="token string">'Snake'</span><span class="token punctuation">,</span>    <span class="token string">'Tictactoe'</span><span class="token punctuation">,</span>    <span class="token string">'Tiles'</span><span class="token punctuation">,</span>    <span class="token string">'Tron'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gamename <span class="token operator">=</span> <span class="token string">'game name: Tictactoe、Go、Y、Hex、Havannah、snake、paint'</span>    <span class="token keyword">for</span> game <span class="token keyword">in</span> freegameslist<span class="token punctuation">:</span>        gamename <span class="token operator">=</span> gamename <span class="token operator">+</span> <span class="token string">'、'</span> <span class="token operator">+</span> game            parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>        description<span class="token operator">=</span><span class="token string">"Free_Python_Game &amp; Open_Spiel &amp; Speech_Recognition"</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-g'</span><span class="token punctuation">,</span> <span class="token string">'--game'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'Tictactoe'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span>gamename<span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-t'</span><span class="token punctuation">,</span> <span class="token string">'--type'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'mouse'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'mouse or voice'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-s'</span><span class="token punctuation">,</span> <span class="token string">'--simulations'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span>                        <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'How many iterations of MCTS to perform'</span><span class="token punctuation">)</span>    args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># game_list = ['Tictactoe', 'Go', 'Y', 'Hex', 'Havannah', 'snake', 'paint']</span>        <span class="token keyword">if</span> args<span class="token punctuation">.</span>game <span class="token operator">==</span> <span class="token string">'Tictactoe'</span><span class="token punctuation">:</span>        Tictactoe<span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>simulations<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> args<span class="token punctuation">.</span>game <span class="token operator">==</span> <span class="token string">'Go'</span><span class="token punctuation">:</span>        Go<span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>simulations<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> args<span class="token punctuation">.</span>game <span class="token operator">==</span> <span class="token string">'Y'</span><span class="token punctuation">:</span>        Y<span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>simulations<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> args<span class="token punctuation">.</span>game <span class="token operator">==</span> <span class="token string">'Hex'</span><span class="token punctuation">:</span>        Hex<span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>simulations<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> args<span class="token punctuation">.</span>game <span class="token operator">==</span> <span class="token string">'Havannah'</span><span class="token punctuation">:</span>        Havannah<span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>simulations<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> args<span class="token punctuation">.</span>game <span class="token operator">==</span> <span class="token string">'snake'</span><span class="token punctuation">:</span>        freegames_extern<span class="token punctuation">.</span>snake<span class="token punctuation">.</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> args<span class="token punctuation">.</span>game <span class="token operator">==</span> <span class="token string">'paint'</span><span class="token punctuation">:</span>        freegames_extern<span class="token punctuation">.</span>paint<span class="token punctuation">.</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> args<span class="token punctuation">.</span>game <span class="token keyword">in</span> freegameslist<span class="token punctuation">:</span>        name <span class="token operator">=</span> <span class="token string">'/'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>game<span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.py'</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'python '</span> <span class="token operator">+</span> path <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="蒙特卡洛算法（开源）"><a href="#蒙特卡洛算法（开源）" class="headerlink" title="蒙特卡洛算法（开源）"></a>蒙特卡洛算法（开源）</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Copyright 2019 DeepMind Technologies Ltd. All rights reserved.</span><span class="token comment">#</span><span class="token comment"># Licensed under the Apache License, Version 2.0 (the "License");</span><span class="token comment"># you may not use this file except in compliance with the License.</span><span class="token comment"># You may obtain a copy of the License at</span><span class="token comment">#</span><span class="token comment">#     http://www.apache.org/licenses/LICENSE-2.0</span><span class="token comment">#</span><span class="token comment"># Unless required by applicable law or agreed to in writing, software</span><span class="token comment"># distributed under the License is distributed on an "AS IS" BASIS,</span><span class="token comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><span class="token comment"># See the License for the specific language governing permissions and</span><span class="token comment"># limitations under the License.</span><span class="token triple-quoted-string string">"""Monte-Carlo Tree Search algorithm for game play."""</span><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> absolute_import<span class="token keyword">from</span> __future__ <span class="token keyword">import</span> division<span class="token keyword">from</span> __future__ <span class="token keyword">import</span> print_function<span class="token keyword">import</span> math<span class="token keyword">import</span> time<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pyspiel<span class="token keyword">class</span> <span class="token class-name">Evaluator</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token triple-quoted-string string">"""Abstract class representing an evaluation function for a game.  The evaluation function takes in an intermediate state in the game and returns  an evaluation of that state, which should correlate with chances of winning  the game. It returns the evaluation from all player's perspectives.  """</span>  <span class="token keyword">def</span> <span class="token function">evaluate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Returns evaluation on given state."""</span>    <span class="token keyword">raise</span> NotImplementedError  <span class="token keyword">def</span> <span class="token function">prior</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Returns a probability for each legal action in the given state."""</span>    <span class="token keyword">raise</span> NotImplementedError<span class="token keyword">class</span> <span class="token class-name">RandomRolloutEvaluator</span><span class="token punctuation">(</span>Evaluator<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token triple-quoted-string string">"""A simple evaluator doing random rollouts.  This evaluator returns the average outcome of playing random actions from the  given state until the end of the game.  n_rollouts is the number of random  outcomes to be considered.  """</span>  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n_rollouts<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>n_rollouts <span class="token operator">=</span> n_rollouts    self<span class="token punctuation">.</span>_random_state <span class="token operator">=</span> random_state <span class="token keyword">or</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>RandomState<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">evaluate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Returns evaluation on given state."""</span>    result <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>n_rollouts<span class="token punctuation">)</span><span class="token punctuation">:</span>      working_state <span class="token operator">=</span> state<span class="token punctuation">.</span>clone<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">while</span> <span class="token keyword">not</span> working_state<span class="token punctuation">.</span>is_terminal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> working_state<span class="token punctuation">.</span>is_chance_node<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          outcomes <span class="token operator">=</span> working_state<span class="token punctuation">.</span>chance_outcomes<span class="token punctuation">(</span><span class="token punctuation">)</span>          action_list<span class="token punctuation">,</span> prob_list <span class="token operator">=</span> <span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token operator">*</span>outcomes<span class="token punctuation">)</span>          action <span class="token operator">=</span> self<span class="token punctuation">.</span>_random_state<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>action_list<span class="token punctuation">,</span> p<span class="token operator">=</span>prob_list<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>          action <span class="token operator">=</span> self<span class="token punctuation">.</span>_random_state<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>working_state<span class="token punctuation">.</span>legal_actions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        working_state<span class="token punctuation">.</span>apply_action<span class="token punctuation">(</span>action<span class="token punctuation">)</span>      returns <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>working_state<span class="token punctuation">.</span>returns<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      result <span class="token operator">=</span> returns <span class="token keyword">if</span> result <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">else</span> result <span class="token operator">+</span> returns    <span class="token keyword">return</span> result <span class="token operator">/</span> self<span class="token punctuation">.</span>n_rollouts  <span class="token keyword">def</span> <span class="token function">prior</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Returns equal probability for all actions."""</span>    <span class="token keyword">if</span> state<span class="token punctuation">.</span>is_chance_node<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>chance_outcomes<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>      legal_actions <span class="token operator">=</span> state<span class="token punctuation">.</span>legal_actions<span class="token punctuation">(</span>state<span class="token punctuation">.</span>current_player<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>legal_actions<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> action <span class="token keyword">in</span> legal_actions<span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">SearchNode</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token triple-quoted-string string">"""A node in the search tree.  A SearchNode represents a state and possible continuations from it. Each child  represents a possible action, and the expected result from doing so.  Attributes:    action: The action from the parent node's perspective. Not important for the      root node, as the actions that lead to it are in the past.    player: Which player made this action.    prior: A prior probability for how likely this action will be selected.    explore_count: How many times this node was explored.    total_reward: The sum of rewards of rollouts through this node, from the      parent node's perspective. The average reward of this node is      `total_reward / explore_count`    outcome: The rewards for all players if this is a terminal node or the      subtree has been proven, otherwise None.    children: A list of SearchNodes representing the possible actions from this      node, along with their expected rewards.  """</span>  __slots__ <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token string">"action"</span><span class="token punctuation">,</span>      <span class="token string">"player"</span><span class="token punctuation">,</span>      <span class="token string">"prior"</span><span class="token punctuation">,</span>      <span class="token string">"explore_count"</span><span class="token punctuation">,</span>      <span class="token string">"total_reward"</span><span class="token punctuation">,</span>      <span class="token string">"outcome"</span><span class="token punctuation">,</span>      <span class="token string">"children"</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span>  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> action<span class="token punctuation">,</span> player<span class="token punctuation">,</span> prior<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>action <span class="token operator">=</span> action    self<span class="token punctuation">.</span>player <span class="token operator">=</span> player    self<span class="token punctuation">.</span>prior <span class="token operator">=</span> prior    self<span class="token punctuation">.</span>explore_count <span class="token operator">=</span> <span class="token number">0</span>    self<span class="token punctuation">.</span>total_reward <span class="token operator">=</span> <span class="token number">0.0</span>    self<span class="token punctuation">.</span>outcome <span class="token operator">=</span> <span class="token boolean">None</span>    self<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">def</span> <span class="token function">uct_value</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent_explore_count<span class="token punctuation">,</span> uct_c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Returns the UCT value of child."""</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>outcome <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> self<span class="token punctuation">.</span>outcome<span class="token punctuation">[</span>self<span class="token punctuation">.</span>player<span class="token punctuation">]</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>explore_count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">"inf"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span>total_reward <span class="token operator">/</span> self<span class="token punctuation">.</span>explore_count <span class="token operator">+</span> uct_c <span class="token operator">*</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>        math<span class="token punctuation">.</span>log<span class="token punctuation">(</span>parent_explore_count<span class="token punctuation">)</span> <span class="token operator">/</span> self<span class="token punctuation">.</span>explore_count<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">puct_value</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent_explore_count<span class="token punctuation">,</span> uct_c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Returns the PUCT value of child."""</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>outcome <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> self<span class="token punctuation">.</span>outcome<span class="token punctuation">[</span>self<span class="token punctuation">.</span>player<span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>explore_count <span class="token keyword">and</span> self<span class="token punctuation">.</span>total_reward <span class="token operator">/</span> self<span class="token punctuation">.</span>explore_count<span class="token punctuation">)</span> <span class="token operator">+</span>            uct_c <span class="token operator">*</span> self<span class="token punctuation">.</span>prior <span class="token operator">*</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>parent_explore_count<span class="token punctuation">)</span> <span class="token operator">/</span>            <span class="token punctuation">(</span>self<span class="token punctuation">.</span>explore_count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">sort_key</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Returns the best action from this node, either proven or most visited.    This ordering leads to choosing:    - Highest proven score &gt; 0 over anything else, including a promising but      unproven action.    - A proven draw only if it has higher exploration than others that are      uncertain, or the others are losses.    - Uncertain action with most exploration over loss of any difficulty    - Hardest loss if everything is a loss    - Highest expected reward if explore counts are equal (unlikely).    - Longest win, if multiple are proven (unlikely due to early stopping).    """</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">if</span> self<span class="token punctuation">.</span>outcome <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">else</span> self<span class="token punctuation">.</span>outcome<span class="token punctuation">[</span>self<span class="token punctuation">.</span>player<span class="token punctuation">]</span><span class="token punctuation">,</span>            self<span class="token punctuation">.</span>explore_count<span class="token punctuation">,</span> self<span class="token punctuation">.</span>total_reward<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">best_child</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Returns the best child in order of the sort key."""</span>    <span class="token keyword">return</span> <span class="token builtin">max</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>children<span class="token punctuation">,</span> key<span class="token operator">=</span>SearchNode<span class="token punctuation">.</span>sort_key<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">children_str</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> state<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Returns the string representation of this node's children.    They are ordered based on the sort key, so order of being chosen to play.    Args:      state: A `pyspiel.State` object, to be used to convert the action id into        a human readable format. If None, the action integer id is used.    """</span>    <span class="token keyword">return</span> <span class="token string">"\n"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>        c<span class="token punctuation">.</span>to_str<span class="token punctuation">(</span>state<span class="token punctuation">)</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">reversed</span><span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>children<span class="token punctuation">,</span> key<span class="token operator">=</span>SearchNode<span class="token punctuation">.</span>sort_key<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">to_str</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> state<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Returns the string representation of this node.    Args:      state: A `pyspiel.State` object, to be used to convert the action id into        a human readable format. If None, the action integer id is used.    """</span>    action <span class="token operator">=</span> <span class="token punctuation">(</span>        state<span class="token punctuation">.</span>action_to_string<span class="token punctuation">(</span>state<span class="token punctuation">.</span>current_player<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>action<span class="token punctuation">)</span>        <span class="token keyword">if</span> state <span class="token keyword">and</span> self<span class="token punctuation">.</span>action <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">else</span> <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>action<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">"{:&gt;6}: player: {}, prior: {:5.3f}, value: {:6.3f}, sims: {:5d}, "</span>            <span class="token string">"outcome: {}, {:3d} children"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>                action<span class="token punctuation">,</span> self<span class="token punctuation">.</span>player<span class="token punctuation">,</span> self<span class="token punctuation">.</span>prior<span class="token punctuation">,</span> self<span class="token punctuation">.</span>explore_count <span class="token keyword">and</span>                self<span class="token punctuation">.</span>total_reward <span class="token operator">/</span> self<span class="token punctuation">.</span>explore_count<span class="token punctuation">,</span> self<span class="token punctuation">.</span>explore_count<span class="token punctuation">,</span>                <span class="token punctuation">(</span><span class="token string">"{:4.1f}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>outcome<span class="token punctuation">[</span>self<span class="token punctuation">.</span>player<span class="token punctuation">]</span><span class="token punctuation">)</span>                 <span class="token keyword">if</span> self<span class="token punctuation">.</span>outcome <span class="token keyword">else</span> <span class="token string">"none"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span>to_str<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MCTSBot</span><span class="token punctuation">(</span>pyspiel<span class="token punctuation">.</span>Bot<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token triple-quoted-string string">"""Bot that uses Monte-Carlo Tree Search algorithm."""</span>  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>               game<span class="token punctuation">,</span>               uct_c<span class="token punctuation">,</span>               max_simulations<span class="token punctuation">,</span>               evaluator<span class="token punctuation">,</span>               solve<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>               random_state<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>               child_selection_fn<span class="token operator">=</span>SearchNode<span class="token punctuation">.</span>uct_value<span class="token punctuation">,</span>               dirichlet_noise<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>               verbose<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Initializes a MCTS Search algorithm in the form of a bot.    In multiplayer games, or non-zero-sum games, the players will play the    greedy strategy.    Args:      game: A pyspiel.Game to play.      uct_c: The exploration constant for UCT.      max_simulations: How many iterations of MCTS to perform. Each simulation        will result in one call to the evaluator. Memory usage should grow        linearly with simulations * branching factor. How many nodes in the        search tree should be evaluated. This is correlated with memory size and        tree depth.      evaluator: A `Evaluator` object to use to evaluate a leaf node.      solve: Whether to back up solved states.      random_state: An optional numpy RandomState to make it deterministic.      child_selection_fn: A function to select the child in the descent phase.        The default is UCT.      dirichlet_noise: A tuple of (epsilon, alpha) for adding dirichlet noise to        the policy at the root. This is from the alpha-zero paper.      verbose: Whether to print information about the search tree before        returning the action. Useful for confirming the search is working        sensibly.    Raises:      ValueError: if the game type isn't supported.    """</span>    pyspiel<span class="token punctuation">.</span>Bot<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token comment"># Check that the game satisfies the conditions for this MCTS implemention.</span>    game_type <span class="token operator">=</span> game<span class="token punctuation">.</span>get_type<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> game_type<span class="token punctuation">.</span>reward_model <span class="token operator">!=</span> pyspiel<span class="token punctuation">.</span>GameType<span class="token punctuation">.</span>RewardModel<span class="token punctuation">.</span>TERMINAL<span class="token punctuation">:</span>      <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"Game must have terminal rewards."</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> game_type<span class="token punctuation">.</span>dynamics <span class="token operator">!=</span> pyspiel<span class="token punctuation">.</span>GameType<span class="token punctuation">.</span>Dynamics<span class="token punctuation">.</span>SEQUENTIAL<span class="token punctuation">:</span>      <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"Game must have sequential turns."</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>_game <span class="token operator">=</span> game    self<span class="token punctuation">.</span>uct_c <span class="token operator">=</span> uct_c    self<span class="token punctuation">.</span>max_simulations <span class="token operator">=</span> max_simulations    self<span class="token punctuation">.</span>evaluator <span class="token operator">=</span> evaluator    self<span class="token punctuation">.</span>verbose <span class="token operator">=</span> verbose    self<span class="token punctuation">.</span>solve <span class="token operator">=</span> solve    self<span class="token punctuation">.</span>max_utility <span class="token operator">=</span> game<span class="token punctuation">.</span>max_utility<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>_dirichlet_noise <span class="token operator">=</span> dirichlet_noise    self<span class="token punctuation">.</span>_random_state <span class="token operator">=</span> random_state <span class="token keyword">or</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>RandomState<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>_child_selection_fn <span class="token operator">=</span> child_selection_fn  <span class="token keyword">def</span> <span class="token function">restart_at</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>  <span class="token keyword">def</span> <span class="token function">step_with_policy</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Returns bot's policy and action at given state."""</span>    t1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    root <span class="token operator">=</span> self<span class="token punctuation">.</span>mcts_search<span class="token punctuation">(</span>state<span class="token punctuation">)</span>    best <span class="token operator">=</span> root<span class="token punctuation">.</span>best_child<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>verbose<span class="token punctuation">:</span>      seconds <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t1      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Finished {} sims in {:.3f} secs, {:.1f} sims/s"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>          root<span class="token punctuation">.</span>explore_count<span class="token punctuation">,</span> seconds<span class="token punctuation">,</span> root<span class="token punctuation">.</span>explore_count <span class="token operator">/</span> seconds<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Root:"</span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>to_str<span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Children:"</span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>children_str<span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> best<span class="token punctuation">.</span>children<span class="token punctuation">:</span>        chosen_state <span class="token operator">=</span> state<span class="token punctuation">.</span>clone<span class="token punctuation">(</span><span class="token punctuation">)</span>        chosen_state<span class="token punctuation">.</span>apply_action<span class="token punctuation">(</span>best<span class="token punctuation">.</span>action<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Children of chosen:"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>best<span class="token punctuation">.</span>children_str<span class="token punctuation">(</span>chosen_state<span class="token punctuation">)</span><span class="token punctuation">)</span>    mcts_action <span class="token operator">=</span> best<span class="token punctuation">.</span>action    policy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token keyword">if</span> action <span class="token operator">==</span> mcts_action <span class="token keyword">else</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token keyword">for</span> action <span class="token keyword">in</span> state<span class="token punctuation">.</span>legal_actions<span class="token punctuation">(</span>state<span class="token punctuation">.</span>current_player<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> policy<span class="token punctuation">,</span> mcts_action  <span class="token keyword">def</span> <span class="token function">step</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span>step_with_policy<span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token keyword">def</span> <span class="token function">_apply_tree_policy</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Applies the UCT policy to play the game until reaching a leaf node.    A leaf node is defined as a node that is terminal or has not been evaluated    yet. If it reaches a node that has been evaluated before but hasn't been    expanded, then expand it's children and continue.    Args:      root: The root node in the search tree.      state: The state of the game at the root node.    Returns:      visit_path: A list of nodes descending from the root node to a leaf node.      working_state: The state of the game at the leaf node.    """</span>    visit_path <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span>    working_state <span class="token operator">=</span> state<span class="token punctuation">.</span>clone<span class="token punctuation">(</span><span class="token punctuation">)</span>    current_node <span class="token operator">=</span> root    <span class="token keyword">while</span> <span class="token keyword">not</span> working_state<span class="token punctuation">.</span>is_terminal<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">and</span> current_node<span class="token punctuation">.</span>explore_count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>      <span class="token keyword">if</span> <span class="token keyword">not</span> current_node<span class="token punctuation">.</span>children<span class="token punctuation">:</span>        <span class="token comment"># For a new node, initialize its state, then choose a child as normal.</span>        legal_actions <span class="token operator">=</span> self<span class="token punctuation">.</span>evaluator<span class="token punctuation">.</span>prior<span class="token punctuation">(</span>working_state<span class="token punctuation">)</span>        <span class="token keyword">if</span> current_node <span class="token keyword">is</span> root <span class="token keyword">and</span> self<span class="token punctuation">.</span>_dirichlet_noise<span class="token punctuation">:</span>          epsilon<span class="token punctuation">,</span> alpha <span class="token operator">=</span> self<span class="token punctuation">.</span>_dirichlet_noise          noise <span class="token operator">=</span> self<span class="token punctuation">.</span>_random_state<span class="token punctuation">.</span>dirichlet<span class="token punctuation">(</span><span class="token punctuation">[</span>alpha<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>legal_actions<span class="token punctuation">)</span><span class="token punctuation">)</span>          legal_actions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> epsilon<span class="token punctuation">)</span> <span class="token operator">*</span> p <span class="token operator">+</span> epsilon <span class="token operator">*</span> n<span class="token punctuation">)</span>                           <span class="token keyword">for</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>legal_actions<span class="token punctuation">,</span> noise<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment"># Reduce bias from move generation order.</span>        self<span class="token punctuation">.</span>_random_state<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>legal_actions<span class="token punctuation">)</span>        player <span class="token operator">=</span> working_state<span class="token punctuation">.</span>current_player<span class="token punctuation">(</span><span class="token punctuation">)</span>        current_node<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token punctuation">[</span>            SearchNode<span class="token punctuation">(</span>action<span class="token punctuation">,</span> player<span class="token punctuation">,</span> prior<span class="token punctuation">)</span> <span class="token keyword">for</span> action<span class="token punctuation">,</span> prior <span class="token keyword">in</span> legal_actions        <span class="token punctuation">]</span>      <span class="token keyword">if</span> working_state<span class="token punctuation">.</span>is_chance_node<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># For chance nodes, rollout according to chance node's probability</span>        <span class="token comment"># distribution</span>        outcomes <span class="token operator">=</span> working_state<span class="token punctuation">.</span>chance_outcomes<span class="token punctuation">(</span><span class="token punctuation">)</span>        action_list<span class="token punctuation">,</span> prob_list <span class="token operator">=</span> <span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token operator">*</span>outcomes<span class="token punctuation">)</span>        action <span class="token operator">=</span> self<span class="token punctuation">.</span>_random_state<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>action_list<span class="token punctuation">,</span> p<span class="token operator">=</span>prob_list<span class="token punctuation">)</span>        chosen_child <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span>            c <span class="token keyword">for</span> c <span class="token keyword">in</span> current_node<span class="token punctuation">.</span>children <span class="token keyword">if</span> c<span class="token punctuation">.</span>action <span class="token operator">==</span> action<span class="token punctuation">)</span>      <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment"># Otherwise choose node with largest UCT value</span>        chosen_child <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>            current_node<span class="token punctuation">.</span>children<span class="token punctuation">,</span>            key<span class="token operator">=</span><span class="token keyword">lambda</span> c<span class="token punctuation">:</span> self<span class="token punctuation">.</span>_child_selection_fn<span class="token punctuation">(</span>  <span class="token comment"># pylint: disable=g-long-lambda</span>                c<span class="token punctuation">,</span> current_node<span class="token punctuation">.</span>explore_count<span class="token punctuation">,</span> self<span class="token punctuation">.</span>uct_c<span class="token punctuation">)</span><span class="token punctuation">)</span>      working_state<span class="token punctuation">.</span>apply_action<span class="token punctuation">(</span>chosen_child<span class="token punctuation">.</span>action<span class="token punctuation">)</span>      current_node <span class="token operator">=</span> chosen_child      visit_path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>current_node<span class="token punctuation">)</span>    <span class="token keyword">return</span> visit_path<span class="token punctuation">,</span> working_state  <span class="token keyword">def</span> <span class="token function">mcts_search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""A vanilla Monte-Carlo Tree Search algorithm.    This algorithm searches the game tree from the given state.    At the leaf, the evaluator is called if the game state is not terminal.    A total of max_simulations states are explored.    At every node, the algorithm chooses the action with the highest PUCT value,    defined as: `Q/N + c * prior * sqrt(parent_N) / N`, where Q is the total    reward after the action, and N is the number of times the action was    explored in this position. The input parameter c controls the balance    between exploration and exploitation; higher values of c encourage    exploration of under-explored nodes. Unseen actions are always explored    first.    At the end of the search, the chosen action is the action that has been    explored most often. This is the action that is returned.    This implementation supports sequential n-player games, with or without    chance nodes. All players maximize their own reward and ignore the other    players' rewards. This corresponds to max^n for n-player games. It is the    norm for zero-sum games, but doesn't have any special handling for    non-zero-sum games. It doesn't have any special handling for imperfect    information games.    The implementation also supports backing up solved states, i.e. MCTS-Solver.    The implementation is general in that it is based on a max^n backup (each    player greedily chooses their maximum among proven children values, or there    exists one child whose proven value is game.max_utility()), so it will work    for multiplayer, general-sum, and arbitrary payoff games (not just win/loss/    draw games). Also chance nodes are considered proven only if all children    have the same value.    Some references:    - Sturtevant, An Analysis of UCT in Multi-Player Games,  2008,      https://web.cs.du.edu/~sturtevant/papers/multi-player_UCT.pdf    - Nijssen, Monte-Carlo Tree Search for Multi-Player Games, 2013,      https://project.dke.maastrichtuniversity.nl/games/files/phd/Nijssen_thesis.pdf    - Silver, AlphaGo Zero: Starting from scratch, 2017      https://deepmind.com/blog/article/alphago-zero-starting-scratch    - Winands, Bjornsson, and Saito, "Monte-Carlo Tree Search Solver", 2008.      https://dke.maastrichtuniversity.nl/m.winands/documents/uctloa.pdf    Arguments:      state: pyspiel.State object, state to search from    Returns:      The most visited move from the root node.    """</span>    root_player <span class="token operator">=</span> state<span class="token punctuation">.</span>current_player<span class="token punctuation">(</span><span class="token punctuation">)</span>    root <span class="token operator">=</span> SearchNode<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> state<span class="token punctuation">.</span>current_player<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>max_simulations<span class="token punctuation">)</span><span class="token punctuation">:</span>      visit_path<span class="token punctuation">,</span> working_state <span class="token operator">=</span> self<span class="token punctuation">.</span>_apply_tree_policy<span class="token punctuation">(</span>root<span class="token punctuation">,</span> state<span class="token punctuation">)</span>      <span class="token keyword">if</span> working_state<span class="token punctuation">.</span>is_terminal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        returns <span class="token operator">=</span> working_state<span class="token punctuation">.</span>returns<span class="token punctuation">(</span><span class="token punctuation">)</span>        visit_path<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>outcome <span class="token operator">=</span> returns        solved <span class="token operator">=</span> self<span class="token punctuation">.</span>solve      <span class="token keyword">else</span><span class="token punctuation">:</span>        returns <span class="token operator">=</span> self<span class="token punctuation">.</span>evaluator<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>working_state<span class="token punctuation">)</span>        solved <span class="token operator">=</span> <span class="token boolean">False</span>      <span class="token keyword">for</span> node <span class="token keyword">in</span> <span class="token builtin">reversed</span><span class="token punctuation">(</span>visit_path<span class="token punctuation">)</span><span class="token punctuation">:</span>        node<span class="token punctuation">.</span>total_reward <span class="token operator">+=</span> returns<span class="token punctuation">[</span>root_player <span class="token keyword">if</span> node<span class="token punctuation">.</span>player <span class="token operator">==</span>                                     pyspiel<span class="token punctuation">.</span>PlayerId<span class="token punctuation">.</span>CHANCE <span class="token keyword">else</span> node<span class="token punctuation">.</span>player<span class="token punctuation">]</span>        node<span class="token punctuation">.</span>explore_count <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> solved <span class="token keyword">and</span> node<span class="token punctuation">.</span>children<span class="token punctuation">:</span>          player <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>player          <span class="token keyword">if</span> player <span class="token operator">==</span> pyspiel<span class="token punctuation">.</span>PlayerId<span class="token punctuation">.</span>CHANCE<span class="token punctuation">:</span>            <span class="token comment"># Only back up chance nodes if all have the same outcome.</span>            <span class="token comment"># An alternative would be to back up the weighted average of</span>            <span class="token comment"># outcomes if all children are solved, but that is less clear.</span>            outcome <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>outcome            <span class="token keyword">if</span> <span class="token punctuation">(</span>outcome <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">and</span>                <span class="token builtin">all</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>array_equal<span class="token punctuation">(</span>c<span class="token punctuation">.</span>outcome<span class="token punctuation">,</span> outcome<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> node<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>              node<span class="token punctuation">.</span>outcome <span class="token operator">=</span> outcome            <span class="token keyword">else</span><span class="token punctuation">:</span>              solved <span class="token operator">=</span> <span class="token boolean">False</span>          <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment"># If any have max utility (won?), or all children are solved,</span>            <span class="token comment"># choose the one best for the player choosing.</span>            best <span class="token operator">=</span> <span class="token boolean">None</span>            all_solved <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">for</span> child <span class="token keyword">in</span> node<span class="token punctuation">.</span>children<span class="token punctuation">:</span>              <span class="token keyword">if</span> child<span class="token punctuation">.</span>outcome <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                all_solved <span class="token operator">=</span> <span class="token boolean">False</span>              <span class="token keyword">elif</span> best <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> child<span class="token punctuation">.</span>outcome<span class="token punctuation">[</span>player<span class="token punctuation">]</span> <span class="token operator">&gt;</span> best<span class="token punctuation">.</span>outcome<span class="token punctuation">[</span>player<span class="token punctuation">]</span><span class="token punctuation">:</span>                best <span class="token operator">=</span> child            <span class="token keyword">if</span> <span class="token punctuation">(</span>best <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">and</span>                <span class="token punctuation">(</span>all_solved <span class="token keyword">or</span> best<span class="token punctuation">.</span>outcome<span class="token punctuation">[</span>player<span class="token punctuation">]</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>max_utility<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>              node<span class="token punctuation">.</span>outcome <span class="token operator">=</span> best<span class="token punctuation">.</span>outcome            <span class="token keyword">else</span><span class="token punctuation">:</span>              solved <span class="token operator">=</span> <span class="token boolean">False</span>      <span class="token keyword">if</span> root<span class="token punctuation">.</span>outcome <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">return</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="人类bot"><a href="#人类bot" class="headerlink" title="人类bot"></a>人类bot</h5><p>这部分为open_spiel所用的人类bot，修改了其中输入的部分，使其可以响应鼠标和语音输入。若选择鼠标输入，当鼠标点击时主动向bot传递参数。若选择语音输入，让bot向语音输入发出请求</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Copyright 2019 DeepMind Technologies Ltd. All rights reserved.</span><span class="token comment">#</span><span class="token comment"># Licensed under the Apache License, Version 2.0 (the "License");</span><span class="token comment"># you may not use this file except in compliance with the License.</span><span class="token comment"># You may obtain a copy of the License at</span><span class="token comment">#</span><span class="token comment">#     http://www.apache.org/licenses/LICENSE-2.0</span><span class="token comment">#</span><span class="token comment"># Unless required by applicable law or agreed to in writing, software</span><span class="token comment"># distributed under the License is distributed on an "AS IS" BASIS,</span><span class="token comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><span class="token comment"># See the License for the specific language governing permissions and</span><span class="token comment"># limitations under the License.</span><span class="token triple-quoted-string string">"""A bot that asks the user which action to play."""</span><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> absolute_import<span class="token keyword">from</span> __future__ <span class="token keyword">import</span> division<span class="token keyword">from</span> __future__ <span class="token keyword">import</span> print_function<span class="token keyword">import</span> math<span class="token keyword">import</span> os<span class="token keyword">import</span> pyspiel<span class="token keyword">import</span> sys<span class="token punctuation">,</span> ossys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>realpath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">from</span> speechrecognition<span class="token punctuation">.</span>microphone_recognition <span class="token keyword">import</span> recognition_MAX_WIDTH <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getenv<span class="token punctuation">(</span><span class="token string">"COLUMNS"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># Get your TTY width.</span><span class="token keyword">def</span> <span class="token function">_print_columns</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Prints a list of strings in columns."""</span>    padding <span class="token operator">=</span> <span class="token number">2</span>    longest <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">for</span> s <span class="token keyword">in</span> strings<span class="token punctuation">)</span>    max_columns <span class="token operator">=</span> math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token punctuation">(</span>_MAX_WIDTH <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>longest <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> padding<span class="token punctuation">)</span><span class="token punctuation">)</span>    rows <span class="token operator">=</span> math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span> <span class="token operator">/</span> max_columns<span class="token punctuation">)</span>    columns <span class="token operator">=</span> math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span> <span class="token operator">/</span> rows<span class="token punctuation">)</span>  <span class="token comment"># Might not fill all max_columns.</span>    <span class="token keyword">for</span> r <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>columns<span class="token punctuation">)</span><span class="token punctuation">:</span>            i <span class="token operator">=</span> r <span class="token operator">+</span> c <span class="token operator">*</span> rows            <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" "</span> <span class="token operator">*</span> padding <span class="token operator">+</span>                      strings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span>longest <span class="token operator">+</span> padding<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">HumanBot</span><span class="token punctuation">(</span>pyspiel<span class="token punctuation">.</span>Bot<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Asks the user which action to play."""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span><span class="token builtin">type</span> <span class="token operator">=</span> <span class="token builtin">type</span>    <span class="token keyword">def</span> <span class="token function">step_with_policy</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> state<span class="token punctuation">,</span> _str<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Returns the stochastic policy and selected action in the given state."""</span>        legal_actions <span class="token operator">=</span> state<span class="token punctuation">.</span>legal_actions<span class="token punctuation">(</span>state<span class="token punctuation">.</span>current_player<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> legal_actions<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pyspiel<span class="token punctuation">.</span>INVALID_ACTION        p <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>legal_actions<span class="token punctuation">)</span>        policy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token keyword">for</span> action <span class="token keyword">in</span> legal_actions<span class="token punctuation">]</span>        action_map <span class="token operator">=</span> <span class="token punctuation">{</span>            state<span class="token punctuation">.</span>action_to_string<span class="token punctuation">(</span>state<span class="token punctuation">.</span>current_player<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">:</span> action            <span class="token keyword">for</span> action <span class="token keyword">in</span> legal_actions        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Choose an action: "</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span><span class="token builtin">type</span> <span class="token operator">==</span> <span class="token string">'mouse'</span><span class="token punctuation">:</span>                action_str <span class="token operator">=</span> _str            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Legal actions(s):"</span><span class="token punctuation">)</span>                longest_num <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> action <span class="token keyword">in</span> legal_actions<span class="token punctuation">)</span>                _print_columns<span class="token punctuation">(</span><span class="token punctuation">[</span>                    <span class="token string">"{}: {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span>longest_num<span class="token punctuation">)</span><span class="token punctuation">,</span> action_str<span class="token punctuation">)</span>                    <span class="token keyword">for</span> action_str<span class="token punctuation">,</span> action <span class="token keyword">in</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>action_map<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">]</span><span class="token punctuation">)</span>                action_str <span class="token operator">=</span> recognition<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> action_str<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Legal actions(s):"</span><span class="token punctuation">)</span>                longest_num <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> action <span class="token keyword">in</span> legal_actions<span class="token punctuation">)</span>                _print_columns<span class="token punctuation">(</span><span class="token punctuation">[</span>                    <span class="token string">"{}: {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span>longest_num<span class="token punctuation">)</span><span class="token punctuation">,</span> action_str<span class="token punctuation">)</span>                    <span class="token keyword">for</span> action_str<span class="token punctuation">,</span> action <span class="token keyword">in</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>action_map<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span>            <span class="token keyword">if</span> action_str <span class="token keyword">in</span> action_map<span class="token punctuation">:</span>                <span class="token keyword">return</span> policy<span class="token punctuation">,</span> action_map<span class="token punctuation">[</span>action_str<span class="token punctuation">]</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                action <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>action_str<span class="token punctuation">)</span>            <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Could not parse the action:"</span><span class="token punctuation">,</span> action_str<span class="token punctuation">)</span>                <span class="token keyword">continue</span>            <span class="token keyword">if</span> action <span class="token keyword">in</span> legal_actions<span class="token punctuation">:</span>                <span class="token keyword">return</span> policy<span class="token punctuation">,</span> action            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Illegal action selected:"</span><span class="token punctuation">,</span> action_str<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">step</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>step_with_policy<span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">restart_at</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="语音输入"><a href="#语音输入" class="headerlink" title="语音输入"></a>语音输入</h5><p>调用speech_recognition实现语音输入，选用的模型为中文模型，对得到的模型输出进行字符串解析转化为数字并传递给bot，在结果不符合要求时bot会再次请求语音输入</p><p>在选择语音输入时，每一步会提示合法的下一步对应的数字，例如在Tictactoe中</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Choose an action <span class="token punctuation">(</span>empty to print legal actions<span class="token punctuation">)</span>: Legal actions<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:  <span class="token number">0</span>: o<span class="token punctuation">(</span><span class="token number">0,0</span><span class="token punctuation">)</span>    <span class="token number">2</span>: o<span class="token punctuation">(</span><span class="token number">0,2</span><span class="token punctuation">)</span>    <span class="token number">5</span>: o<span class="token punctuation">(</span><span class="token number">1,2</span><span class="token punctuation">)</span>    <span class="token number">7</span>: o<span class="token punctuation">(</span><span class="token number">2,1</span><span class="token punctuation">)</span>    <span class="token number">1</span>: o<span class="token punctuation">(</span><span class="token number">0,1</span><span class="token punctuation">)</span>    <span class="token number">3</span>: o<span class="token punctuation">(</span><span class="token number">1,0</span><span class="token punctuation">)</span>    <span class="token number">6</span>: o<span class="token punctuation">(</span><span class="token number">2,0</span><span class="token punctuation">)</span>    <span class="token number">8</span>: o<span class="token punctuation">(</span><span class="token number">2,2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>用中文读出对应的数字即可完成输入，例如 一、十、二十、三十一、一百、二百零三、三百一十、三百二十四</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> speech_recognition <span class="token keyword">as</span> sr<span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'零'</span><span class="token punctuation">,</span> <span class="token string">'一'</span><span class="token punctuation">,</span> <span class="token string">'二'</span><span class="token punctuation">,</span> <span class="token string">'三'</span><span class="token punctuation">,</span> <span class="token string">'四'</span><span class="token punctuation">,</span> <span class="token string">'五'</span><span class="token punctuation">,</span> <span class="token string">'六'</span><span class="token punctuation">,</span> <span class="token string">'七'</span><span class="token punctuation">,</span> <span class="token string">'八'</span><span class="token punctuation">,</span> <span class="token string">'九'</span><span class="token punctuation">,</span> <span class="token string">'十'</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> index<span class="token punctuation">,</span> value <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> value <span class="token operator">==</span> target<span class="token punctuation">:</span>            <span class="token keyword">return</span> index    <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token keyword">def</span> <span class="token function">convert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'"text" : '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'"'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> find<span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> <span class="token builtin">len</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'十'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">10</span> <span class="token operator">+</span> find<span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'十'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> find<span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span>        <span class="token keyword">elif</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'百'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> find<span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span>    <span class="token keyword">elif</span> <span class="token builtin">len</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'十'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> find<span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> find<span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> <span class="token builtin">len</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'百'</span> <span class="token keyword">and</span> result<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'零'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> find<span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">+</span> find<span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'百'</span> <span class="token keyword">and</span> result<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'十'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> find<span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">+</span> find<span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span>    <span class="token keyword">elif</span> <span class="token builtin">len</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'百'</span> <span class="token keyword">and</span> result<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'十'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> find<span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">+</span> find<span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span> find<span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'error'</span><span class="token keyword">def</span> <span class="token function">recognition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># obtain audio from the microphone</span>    r <span class="token operator">=</span> sr<span class="token punctuation">.</span>Recognizer<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> sr<span class="token punctuation">.</span>Microphone<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> source<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Say something!"</span><span class="token punctuation">)</span>        audio <span class="token operator">=</span> r<span class="token punctuation">.</span>listen<span class="token punctuation">(</span>source<span class="token punctuation">)</span>    <span class="token comment"># recognize speech using Vosk</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> convert<span class="token punctuation">(</span>r<span class="token punctuation">.</span>recognize_vosk<span class="token punctuation">(</span>audio<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">except</span> sr<span class="token punctuation">.</span>UnknownValueError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Vosk could not understand audio"</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> sr<span class="token punctuation">.</span>RequestError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Vosk error; {0}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Game类的实现"><a href="#Game类的实现" class="headerlink" title="Game类的实现"></a>Game类的实现</h5><p>Game类是五种游戏的基类，通过调用open_spiel库实现了游戏状态与游戏ai的初始化，游戏的进行与结果的判断</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> absolute_import<span class="token keyword">from</span> __future__ <span class="token keyword">import</span> division<span class="token keyword">from</span> __future__ <span class="token keyword">import</span> print_function<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> sys<span class="token punctuation">,</span> ossys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>realpath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">from</span> openspiel<span class="token punctuation">.</span>algorithms <span class="token keyword">import</span> mcts<span class="token keyword">from</span> openspiel<span class="token punctuation">.</span>bots <span class="token keyword">import</span> human<span class="token keyword">import</span> pyspiel<span class="token keyword">class</span> <span class="token class-name">Game</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> show<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">'mouse'</span><span class="token punctuation">,</span> simulations<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>game <span class="token operator">=</span> pyspiel<span class="token punctuation">.</span>load_game<span class="token punctuation">(</span>name<span class="token punctuation">)</span>        self<span class="token punctuation">.</span><span class="token builtin">type</span> <span class="token operator">=</span> <span class="token builtin">type</span>        self<span class="token punctuation">.</span>bots <span class="token operator">=</span> <span class="token punctuation">[</span>            self<span class="token punctuation">.</span>init_bot<span class="token punctuation">(</span><span class="token string">'mcts'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>game<span class="token punctuation">,</span> simulations<span class="token punctuation">)</span><span class="token punctuation">,</span>            self<span class="token punctuation">.</span>init_bot<span class="token punctuation">(</span><span class="token string">'human'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>game<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>        self<span class="token punctuation">.</span>state <span class="token operator">=</span> self<span class="token punctuation">.</span>game<span class="token punctuation">.</span>new_initial_state<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>show <span class="token operator">=</span> show        self<span class="token punctuation">.</span>init_game<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">init_bot</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> bot_type<span class="token punctuation">,</span> game<span class="token punctuation">,</span> simulations<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Initializes a bot by type."""</span>        rng <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>RandomState<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> bot_type <span class="token operator">==</span> <span class="token string">"mcts"</span><span class="token punctuation">:</span>            evaluator <span class="token operator">=</span> mcts<span class="token punctuation">.</span>RandomRolloutEvaluator<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> rng<span class="token punctuation">)</span>            <span class="token keyword">return</span> mcts<span class="token punctuation">.</span>MCTSBot<span class="token punctuation">(</span>                game<span class="token punctuation">,</span>                <span class="token number">2</span><span class="token punctuation">,</span>                simulations<span class="token punctuation">,</span>                evaluator<span class="token punctuation">,</span>                random_state<span class="token operator">=</span>rng<span class="token punctuation">,</span>                solve<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                verbose<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> bot_type <span class="token operator">==</span> <span class="token string">"human"</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> human<span class="token punctuation">.</span>HumanBot<span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">)</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"Invalid bot type: %s"</span> <span class="token operator">%</span> bot_type<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">init_game</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Initial state:\n{}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>play_game<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">play_game</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> position<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>state<span class="token punctuation">.</span>is_terminal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span>        current_player <span class="token operator">=</span> self<span class="token punctuation">.</span>state<span class="token punctuation">.</span>current_player<span class="token punctuation">(</span><span class="token punctuation">)</span>        bot <span class="token operator">=</span> self<span class="token punctuation">.</span>bots<span class="token punctuation">[</span>current_player<span class="token punctuation">]</span>        action <span class="token operator">=</span> bot<span class="token punctuation">.</span>step<span class="token punctuation">(</span>self<span class="token punctuation">.</span>state<span class="token punctuation">,</span> position<span class="token punctuation">)</span>        action_str <span class="token operator">=</span> self<span class="token punctuation">.</span>state<span class="token punctuation">.</span>action_to_string<span class="token punctuation">(</span>current_player<span class="token punctuation">,</span> action<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Player {} sampled action: {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>            current_player<span class="token punctuation">,</span> action_str<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> bot <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>bots<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">!=</span> current_player<span class="token punctuation">:</span>                bot<span class="token punctuation">.</span>inform_action<span class="token punctuation">(</span>self<span class="token punctuation">.</span>state<span class="token punctuation">,</span> current_player<span class="token punctuation">,</span> action<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>state<span class="token punctuation">.</span>apply_action<span class="token punctuation">(</span>action<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Next state:\n{}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>state<span class="token punctuation">.</span>is_terminal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            overall_returns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>state<span class="token punctuation">.</span>returns<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                overall_returns<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> v            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Overall returns"</span><span class="token punctuation">,</span> overall_returns<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="游戏类"><a href="#游戏类" class="headerlink" title="游戏类"></a>游戏类</h5><p>以下前五个游戏类的基类为Game，采用turtle库实现游戏界面，在基类的基础上根据不同的游戏设定了窗体大小，增加了grid、draw_black、draw_white、floor、draw、show、tap、_state、players、arr成员，它们的作用如下</p><blockquote><ul><li>grid 绘制游戏棋盘</li><li>draw_black、draw_white 绘制游戏双方的棋子</li><li>floor 对鼠标点击的坐标进行取整</li><li>draw 绘制棋子</li><li>tap 响应鼠标点击</li><li>_state 存储当前游戏方信息</li><li>players 用于棋子绘制</li><li>arr 保存当前盘面信息，防止在同一处再次落子</li></ul></blockquote><p>后两个小游戏是基于freegame库中的游戏拓展功能实现的</p><h6 id="Tictactoe"><a href="#Tictactoe" class="headerlink" title="Tictactoe"></a>Tictactoe</h6><p>井字棋由两名玩家轮流在 3×3 棋盘中标记空格为X或O。成功将三个标记放置在水平、垂直或对角线中的玩家为获胜者。</p><p><img src="image/Tictactoe.png" alt="Tictactoe.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> turtle<span class="token keyword">import</span> sys<span class="token punctuation">,</span> ossys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>realpath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">from</span> Game <span class="token keyword">import</span> Game<span class="token keyword">class</span> <span class="token class-name">Tictactoe</span><span class="token punctuation">(</span>Game<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">'mouse'</span><span class="token punctuation">,</span> simulations<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'player'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span>        self<span class="token punctuation">.</span>players <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>drawx<span class="token punctuation">,</span> self<span class="token punctuation">.</span>drawo<span class="token punctuation">]</span>        self<span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        turtle<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">420</span><span class="token punctuation">,</span> <span class="token number">420</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Tictactoe'</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>hideturtle<span class="token punctuation">(</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>tracer<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token string">'tic_tac_toe'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>show<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">,</span> simulations<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">type</span> <span class="token operator">==</span> <span class="token string">'mouse'</span><span class="token punctuation">:</span>            turtle<span class="token punctuation">.</span>onscreenclick<span class="token punctuation">(</span>self<span class="token punctuation">.</span>tap<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>state<span class="token punctuation">.</span>is_terminal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>play_game<span class="token punctuation">(</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">line</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        turtle<span class="token punctuation">.</span>up<span class="token punctuation">(</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>down<span class="token punctuation">(</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">grid</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>line<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">67</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>line<span class="token punctuation">(</span><span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>line<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">67</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>line<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">drawx</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>line<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x <span class="token operator">+</span> <span class="token number">133</span><span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">133</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>line<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">133</span><span class="token punctuation">,</span> x <span class="token operator">+</span> <span class="token number">133</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">drawo</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        turtle<span class="token punctuation">.</span>up<span class="token punctuation">(</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">67</span><span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>down<span class="token punctuation">(</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">62</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">floor</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">133</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">133</span> <span class="token operator">-</span> <span class="token number">200</span>    <span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Draw X or O in tapped square."""</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>floor<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        y <span class="token operator">=</span> self<span class="token punctuation">.</span>floor<span class="token punctuation">(</span>y<span class="token punctuation">)</span>        player <span class="token operator">=</span> self<span class="token punctuation">.</span>_state<span class="token punctuation">[</span><span class="token string">'player'</span><span class="token punctuation">]</span>        draw <span class="token operator">=</span> self<span class="token punctuation">.</span>players<span class="token punctuation">[</span>player<span class="token punctuation">]</span>        draw<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_state<span class="token punctuation">[</span><span class="token string">'player'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">not</span> player    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        turtle<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                    self<span class="token punctuation">.</span>_state<span class="token punctuation">[</span><span class="token string">'player'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">if</span> <span class="token builtin">str</span><span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'x'</span> <span class="token keyword">else</span> <span class="token number">1</span>                    self<span class="token punctuation">.</span>draw<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">133</span><span class="token operator">+</span>j<span class="token operator">*</span><span class="token number">133</span><span class="token punctuation">,</span> <span class="token number">133</span><span class="token operator">-</span>i<span class="token operator">*</span><span class="token number">133</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">tap</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">133</span><span class="token punctuation">)</span>        y <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token punctuation">(</span>y <span class="token operator">+</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">133</span><span class="token punctuation">)</span>        position <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>play_game<span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    Tictactoe<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h6><p>围棋使用矩形格状棋盘及黑白二色圆形棋子进行对弈，正规棋盘上有纵横各19条线段，361个交叉点，棋子必须走在空格非禁着点的交叉点上，双方交替行棋，落子后不能移动或悔棋，以目数多者为胜。</p><p><img src="image/Go.png" alt="Go.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> turtle<span class="token keyword">import</span> sys<span class="token punctuation">,</span> ossys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>realpath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">from</span> Game <span class="token keyword">import</span> Game<span class="token keyword">class</span> <span class="token class-name">Go</span><span class="token punctuation">(</span>Game<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">'mouse'</span><span class="token punctuation">,</span> simulations<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'player'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span>        self<span class="token punctuation">.</span>players <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>draw_black<span class="token punctuation">,</span> self<span class="token punctuation">.</span>draw_white<span class="token punctuation">]</span>        self<span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        turtle<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">760</span><span class="token punctuation">,</span> <span class="token number">760</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Go'</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>hideturtle<span class="token punctuation">(</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>tracer<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token string">'go'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>show<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">,</span> simulations<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">type</span> <span class="token operator">==</span> <span class="token string">'mouse'</span><span class="token punctuation">:</span>            turtle<span class="token punctuation">.</span>onscreenclick<span class="token punctuation">(</span>self<span class="token punctuation">.</span>tap<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>state<span class="token punctuation">.</span>is_terminal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>play_game<span class="token punctuation">(</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">grid</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        turtle<span class="token punctuation">.</span>home<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 画横向</span>            turtle<span class="token punctuation">.</span>up<span class="token punctuation">(</span><span class="token punctuation">)</span>            turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">360</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">360</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token number">40</span><span class="token punctuation">)</span>            turtle<span class="token punctuation">.</span>down<span class="token punctuation">(</span><span class="token punctuation">)</span>            turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">720</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 画竖向</span>            turtle<span class="token punctuation">.</span>up<span class="token punctuation">(</span><span class="token punctuation">)</span>            turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">360</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">360</span><span class="token punctuation">)</span>            turtle<span class="token punctuation">.</span>down<span class="token punctuation">(</span><span class="token punctuation">)</span>            turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">720</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>up<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 画标点</span>        turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>dot<span class="token punctuation">(</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>dot<span class="token punctuation">(</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>dot<span class="token punctuation">(</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">240</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">240</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>dot<span class="token punctuation">(</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">240</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">240</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>dot<span class="token punctuation">(</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">draw_black</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>dot<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">draw_white</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>down<span class="token punctuation">(</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>up<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">floor</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token number">360</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">40</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">40</span> <span class="token operator">-</span> <span class="token number">360</span>    <span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>floor<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        y <span class="token operator">=</span> self<span class="token punctuation">.</span>floor<span class="token punctuation">(</span>y<span class="token punctuation">)</span>        player <span class="token operator">=</span> self<span class="token punctuation">.</span>_state<span class="token punctuation">[</span><span class="token string">'player'</span><span class="token punctuation">]</span>        draw <span class="token operator">=</span> self<span class="token punctuation">.</span>players<span class="token punctuation">[</span>player<span class="token punctuation">]</span>        draw<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_state<span class="token punctuation">[</span><span class="token string">'player'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">not</span> player    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">]</span>        turtle<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>        i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> substr <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>            j <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> ch <span class="token keyword">in</span> substr<span class="token punctuation">:</span>                <span class="token keyword">if</span> ch <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">:</span>                    j <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">elif</span> ch <span class="token operator">==</span> <span class="token string">'X'</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                    self<span class="token punctuation">.</span>_state<span class="token punctuation">[</span><span class="token string">'player'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>                    self<span class="token punctuation">.</span>draw<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">360</span><span class="token operator">+</span>j<span class="token operator">*</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token operator">-</span>i<span class="token operator">*</span><span class="token number">40</span><span class="token punctuation">)</span>                    j <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">elif</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'O'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                    self<span class="token punctuation">.</span>_state<span class="token punctuation">[</span><span class="token string">'player'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                    self<span class="token punctuation">.</span>draw<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">360</span><span class="token operator">+</span>j<span class="token operator">*</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token operator">-</span>i<span class="token operator">*</span><span class="token number">40</span><span class="token punctuation">)</span>                    j <span class="token operator">+=</span> <span class="token number">1</span>            i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">tap</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">360</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">40</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span>        y <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">+</span> <span class="token number">360</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">40</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span>        position <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token operator">*</span><span class="token number">19</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token number">18</span> <span class="token operator">-</span> y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>play_game<span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    Go<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="Y"><a href="#Y" class="headerlink" title="Y"></a>Y</h6><p>规则如下：</p><ul><li>玩家轮流在棋盘上放置一颗他们颜色的棋子。</li><li>一旦玩家连接了棋盘的所有三个面，游戏就结束并且该玩家获胜。角点属于它们相邻的板的两侧。</li></ul><p><img src="image/Y.png" alt="Y.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> turtle<span class="token keyword">import</span> sys<span class="token punctuation">,</span> ossys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>realpath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">from</span> Game <span class="token keyword">import</span> Game<span class="token keyword">class</span> <span class="token class-name">Y</span><span class="token punctuation">(</span>Game<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">'mouse'</span><span class="token punctuation">,</span> simulations<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'player'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span>        self<span class="token punctuation">.</span>players <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>draw_black<span class="token punctuation">,</span> self<span class="token punctuation">.</span>draw_white<span class="token punctuation">]</span>        self<span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        turtle<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">700</span><span class="token punctuation">,</span> <span class="token number">700</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Y'</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>hideturtle<span class="token punctuation">(</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>tracer<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>show<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">,</span> simulations<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">type</span> <span class="token operator">==</span> <span class="token string">'mouse'</span><span class="token punctuation">:</span>            turtle<span class="token punctuation">.</span>onscreenclick<span class="token punctuation">(</span>self<span class="token punctuation">.</span>tap<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>state<span class="token punctuation">.</span>is_terminal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>play_game<span class="token punctuation">(</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">hexagon</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> steps<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">grid</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>hexagon<span class="token punctuation">(</span><span class="token number">350</span><span class="token operator">+</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">**</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">230</span><span class="token operator">-</span><span class="token number">30</span><span class="token operator">*</span>j<span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">draw_black</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        turtle<span class="token punctuation">.</span>fillcolor<span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hexagon<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">draw_white</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        turtle<span class="token punctuation">.</span>fillcolor<span class="token punctuation">(</span><span class="token string">'blue'</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hexagon<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        player <span class="token operator">=</span> self<span class="token punctuation">.</span>_state<span class="token punctuation">[</span><span class="token string">'player'</span><span class="token punctuation">]</span>        draw <span class="token operator">=</span> self<span class="token punctuation">.</span>players<span class="token punctuation">[</span>player<span class="token punctuation">]</span>        draw<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_state<span class="token punctuation">[</span><span class="token string">'player'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">not</span> player    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span>        turtle<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>        i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> substr <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>            j <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> ch <span class="token keyword">in</span> substr<span class="token punctuation">:</span>                <span class="token keyword">if</span> ch <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">:</span>                    j <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">elif</span> ch <span class="token operator">==</span> <span class="token string">'O'</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                    self<span class="token punctuation">.</span>_state<span class="token punctuation">[</span><span class="token string">'player'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>                    self<span class="token punctuation">.</span>draw<span class="token punctuation">(</span><span class="token number">350</span><span class="token operator">+</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">**</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">230</span><span class="token operator">-</span><span class="token number">30</span><span class="token operator">*</span>i<span class="token punctuation">)</span>                    j <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">elif</span> ch <span class="token operator">==</span> <span class="token string">'@'</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                    self<span class="token punctuation">.</span>_state<span class="token punctuation">[</span><span class="token string">'player'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                    self<span class="token punctuation">.</span>draw<span class="token punctuation">(</span><span class="token number">350</span><span class="token operator">+</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">**</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">230</span><span class="token operator">-</span><span class="token number">30</span><span class="token operator">*</span>i<span class="token punctuation">)</span>                    j <span class="token operator">+=</span> <span class="token number">1</span>            i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">tap</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>                X <span class="token operator">=</span> <span class="token number">350</span><span class="token operator">+</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">**</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">)</span>                Y <span class="token operator">=</span> <span class="token number">230</span><span class="token operator">-</span><span class="token number">30</span><span class="token operator">*</span>j                <span class="token keyword">if</span> x <span class="token operator">&gt;=</span> X <span class="token operator">-</span> <span class="token number">20</span> <span class="token keyword">and</span> x <span class="token operator">&lt;=</span> X <span class="token operator">+</span> <span class="token number">20</span> <span class="token keyword">and</span> y <span class="token operator">&gt;=</span> Y <span class="token operator">-</span> <span class="token number">20</span> <span class="token keyword">and</span> y <span class="token operator">&lt;=</span> Y <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> x <span class="token operator">&gt;=</span> X <span class="token operator">-</span> <span class="token number">20</span> <span class="token keyword">and</span> x <span class="token operator">&lt;=</span> X<span class="token punctuation">:</span>                        <span class="token keyword">if</span> y <span class="token operator">&gt;</span> Y <span class="token operator">-</span> <span class="token number">10</span> <span class="token operator">-</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token punctuation">(</span>X<span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">**</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">and</span> y <span class="token operator">&lt;</span> Y <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token punctuation">(</span>X<span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">**</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                            <span class="token keyword">if</span> self<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">19</span><span class="token operator">-</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                                <span class="token keyword">return</span>                            position <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token operator">*</span>j<span class="token operator">+</span><span class="token number">19</span><span class="token operator">-</span>i<span class="token punctuation">)</span>                            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                self<span class="token punctuation">.</span>play_game<span class="token punctuation">(</span>position<span class="token punctuation">)</span>                            <span class="token keyword">return</span>                    <span class="token keyword">elif</span> x <span class="token operator">&gt;=</span> X <span class="token keyword">and</span> x <span class="token operator">&lt;=</span> X <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">:</span>                        <span class="token keyword">if</span> y <span class="token operator">&gt;</span> Y <span class="token operator">-</span> <span class="token number">10</span> <span class="token operator">-</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token operator">+</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">-</span> x<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">**</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">and</span> y <span class="token operator">&lt;</span> Y <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token operator">+</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">-</span> x<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">**</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                            <span class="token keyword">if</span> self<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">19</span><span class="token operator">-</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                                <span class="token keyword">return</span>                            position <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token operator">*</span>j<span class="token operator">+</span><span class="token number">19</span><span class="token operator">-</span>i<span class="token punctuation">)</span>                            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                self<span class="token punctuation">.</span>play_game<span class="token punctuation">(</span>position<span class="token punctuation">)</span>                            <span class="token keyword">return</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    Y<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="Hex"><a href="#Hex" class="headerlink" title="Hex"></a>Hex</h6><p>它传统上在 11×11菱形板上进行。每个玩家都被分配了一对相对的棋盘面，他们必须轮流将一块与他们颜色相同的棋子放在任何空白处，以尝试将它们连接起来。一旦放置，石头就无法移动或移除。当玩家通过一连串相邻的棋子成功地将相对的棋盘面连接在一起时获胜。由于游戏板的拓扑结构，在 Hex 中无法进行平局。</p><p><img src="image/Hex.png" alt="Hex.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> turtle<span class="token keyword">import</span> sys<span class="token punctuation">,</span> ossys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>realpath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">from</span> Game <span class="token keyword">import</span> Game<span class="token keyword">class</span> <span class="token class-name">Hex</span><span class="token punctuation">(</span>Game<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">'mouse'</span><span class="token punctuation">,</span> simulations<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'player'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span>        self<span class="token punctuation">.</span>players <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>draw_black<span class="token punctuation">,</span> self<span class="token punctuation">.</span>draw_white<span class="token punctuation">]</span>        self<span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        turtle<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Hex'</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>hideturtle<span class="token punctuation">(</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>tracer<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>show<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">,</span> simulations<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">type</span> <span class="token operator">==</span> <span class="token string">'mouse'</span><span class="token punctuation">:</span>            turtle<span class="token punctuation">.</span>onscreenclick<span class="token punctuation">(</span>self<span class="token punctuation">.</span>tap<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>state<span class="token punctuation">.</span>is_terminal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>play_game<span class="token punctuation">(</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">hexagon</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> steps<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">grid</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>hexagon<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">250</span><span class="token operator">+</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">**</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>j<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token operator">-</span><span class="token number">30</span><span class="token operator">*</span>i<span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">draw_black</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        turtle<span class="token punctuation">.</span>fillcolor<span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hexagon<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">draw_white</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        turtle<span class="token punctuation">.</span>fillcolor<span class="token punctuation">(</span><span class="token string">'blue'</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hexagon<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        player <span class="token operator">=</span> self<span class="token punctuation">.</span>_state<span class="token punctuation">[</span><span class="token string">'player'</span><span class="token punctuation">]</span>        draw <span class="token operator">=</span> self<span class="token punctuation">.</span>players<span class="token punctuation">[</span>player<span class="token punctuation">]</span>        draw<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_state<span class="token punctuation">[</span><span class="token string">'player'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">not</span> player    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>        i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> substr <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>            j <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> ch <span class="token keyword">in</span> substr<span class="token punctuation">:</span>                <span class="token keyword">if</span> ch <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">:</span>                    j <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">elif</span> ch <span class="token operator">==</span> <span class="token string">'x'</span> <span class="token keyword">or</span> ch <span class="token operator">==</span> <span class="token string">'y'</span> <span class="token keyword">or</span> ch <span class="token operator">==</span> <span class="token string">'z'</span> <span class="token keyword">or</span> ch <span class="token operator">==</span> <span class="token string">'X'</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                    self<span class="token punctuation">.</span>_state<span class="token punctuation">[</span><span class="token string">'player'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>                    self<span class="token punctuation">.</span>draw<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">250</span><span class="token operator">+</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">**</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>j<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token operator">-</span><span class="token number">30</span><span class="token operator">*</span>i<span class="token punctuation">)</span>                    j <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">elif</span> ch <span class="token operator">==</span> <span class="token string">'o'</span> <span class="token keyword">or</span> ch <span class="token operator">==</span> <span class="token string">'p'</span> <span class="token keyword">or</span> ch <span class="token operator">==</span> <span class="token string">'q'</span> <span class="token keyword">or</span> ch <span class="token operator">==</span> <span class="token string">'O'</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                    self<span class="token punctuation">.</span>_state<span class="token punctuation">[</span><span class="token string">'player'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                    self<span class="token punctuation">.</span>draw<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">250</span><span class="token operator">+</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">**</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>j<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token operator">-</span><span class="token number">30</span><span class="token operator">*</span>i<span class="token punctuation">)</span>                    j <span class="token operator">+=</span> <span class="token number">1</span>            i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">tap</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                X <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">250</span><span class="token operator">+</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">**</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>j<span class="token operator">+</span>i<span class="token punctuation">)</span>                Y <span class="token operator">=</span> <span class="token number">150</span><span class="token operator">-</span><span class="token number">30</span><span class="token operator">*</span>i                <span class="token keyword">if</span> x <span class="token operator">&gt;=</span> X <span class="token operator">-</span> <span class="token number">20</span> <span class="token keyword">and</span> x <span class="token operator">&lt;=</span> X <span class="token operator">+</span> <span class="token number">20</span> <span class="token keyword">and</span> y <span class="token operator">&gt;=</span> Y <span class="token operator">-</span> <span class="token number">20</span> <span class="token keyword">and</span> y <span class="token operator">&lt;=</span> Y <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> x <span class="token operator">&gt;=</span> X <span class="token operator">-</span> <span class="token number">20</span> <span class="token keyword">and</span> x <span class="token operator">&lt;=</span> X<span class="token punctuation">:</span>                        <span class="token keyword">if</span> y <span class="token operator">&gt;</span> Y <span class="token operator">-</span> <span class="token number">10</span> <span class="token operator">-</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token punctuation">(</span>X<span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">**</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">and</span> y <span class="token operator">&lt;</span> Y <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token punctuation">(</span>X<span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">**</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                            <span class="token keyword">if</span> self<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                                <span class="token keyword">return</span>                            position <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">11</span><span class="token operator">+</span>j<span class="token punctuation">)</span>                            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                self<span class="token punctuation">.</span>play_game<span class="token punctuation">(</span>position<span class="token punctuation">)</span>                            <span class="token keyword">return</span>                    <span class="token keyword">elif</span> x <span class="token operator">&gt;=</span> X <span class="token keyword">and</span> x <span class="token operator">&lt;=</span> X <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">:</span>                        <span class="token keyword">if</span> y <span class="token operator">&gt;</span> Y <span class="token operator">-</span> <span class="token number">10</span> <span class="token operator">-</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token operator">+</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">-</span> x<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">**</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">and</span> y <span class="token operator">&lt;</span> Y <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token operator">+</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">-</span> x<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">**</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                            <span class="token keyword">if</span> self<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                                <span class="token keyword">return</span>                            position <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">11</span><span class="token operator">+</span>j<span class="token punctuation">)</span>                            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                self<span class="token punctuation">.</span>play_game<span class="token punctuation">(</span>position<span class="token punctuation">)</span>                            <span class="token keyword">return</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    Hex<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="Havannah"><a href="#Havannah" class="headerlink" title="Havannah"></a>Havannah</h6><p>规则如下：</p><ul><li>每位玩家每回合将一颗与其颜色相同的棋子放在棋盘上。</li><li>棋子永远不会被移动、捕获或以其他方式改变。</li><li>当玩家完成三个不同结构中的一个时获胜：<ul><li>环，围绕一个或多个单元格的循环（无论被包围的单元格是否被任何玩家占据或空）；</li><li>桥，连接棋盘六个角点中的任意两个；</li><li>叉子，连接棋盘的任意三个边缘；角点不被视为边缘的一部分。</li></ul></li></ul><p><img src="image/Havannah_1.png" alt="Havannah_1.png"></p><p><img src="image/Havannah_2.png" alt="Havannah_2.png"></p><p><img src="image/Havannah_3.png" alt="Havannah_3.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> turtle<span class="token keyword">import</span> sys<span class="token punctuation">,</span> ossys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>realpath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">from</span> Game <span class="token keyword">import</span> Game<span class="token keyword">class</span> <span class="token class-name">Havannah</span><span class="token punctuation">(</span>Game<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">'mouse'</span><span class="token punctuation">,</span> simulations<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'player'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span>        self<span class="token punctuation">.</span>players <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>draw_black<span class="token punctuation">,</span> self<span class="token punctuation">.</span>draw_white<span class="token punctuation">]</span>        self<span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        turtle<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Havannah'</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>hideturtle<span class="token punctuation">(</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>tracer<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token string">'havannah'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>show<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">,</span> simulations<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">type</span> <span class="token operator">==</span> <span class="token string">'mouse'</span><span class="token punctuation">:</span>            turtle<span class="token punctuation">.</span>onscreenclick<span class="token punctuation">(</span>self<span class="token punctuation">.</span>tap<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>state<span class="token punctuation">.</span>is_terminal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>play_game<span class="token punctuation">(</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">hexagon</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> steps<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">grid</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">7</span> <span class="token keyword">and</span> j <span class="token operator">&lt;=</span> <span class="token number">7</span> <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token number">8</span> <span class="token keyword">and</span> j <span class="token operator">&gt;=</span> i <span class="token operator">-</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>hexagon<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">125</span><span class="token operator">+</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">**</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>j<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token operator">-</span><span class="token number">30</span><span class="token operator">*</span>i<span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">draw_black</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        turtle<span class="token punctuation">.</span>fillcolor<span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hexagon<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">draw_white</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        turtle<span class="token punctuation">.</span>fillcolor<span class="token punctuation">(</span><span class="token string">'blue'</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>hexagon<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        player <span class="token operator">=</span> self<span class="token punctuation">.</span>_state<span class="token punctuation">[</span><span class="token string">'player'</span><span class="token punctuation">]</span>        draw <span class="token operator">=</span> self<span class="token punctuation">.</span>players<span class="token punctuation">[</span>player<span class="token punctuation">]</span>        draw<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_state<span class="token punctuation">[</span><span class="token string">'player'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">not</span> player    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span>        turtle<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>        i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> substr <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>            j <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">if</span> i <span class="token operator">&lt;=</span> <span class="token number">7</span> <span class="token keyword">else</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">7</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> ch <span class="token keyword">in</span> substr<span class="token punctuation">:</span>                <span class="token keyword">if</span> ch <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">:</span>                    j <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">elif</span> ch <span class="token operator">==</span> <span class="token string">'O'</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                    self<span class="token punctuation">.</span>_state<span class="token punctuation">[</span><span class="token string">'player'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>                    self<span class="token punctuation">.</span>draw<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">125</span><span class="token operator">+</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">**</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>j<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token operator">-</span><span class="token number">30</span><span class="token operator">*</span>i<span class="token punctuation">)</span>                    j <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">elif</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'@'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                    self<span class="token punctuation">.</span>_state<span class="token punctuation">[</span><span class="token string">'player'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                    self<span class="token punctuation">.</span>draw<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">125</span><span class="token operator">+</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">**</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>j<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token operator">-</span><span class="token number">30</span><span class="token operator">*</span>i<span class="token punctuation">)</span>                    j <span class="token operator">+=</span> <span class="token number">1</span>            i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">tap</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">7</span> <span class="token keyword">and</span> j <span class="token operator">&lt;=</span> <span class="token number">7</span> <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token number">8</span> <span class="token keyword">and</span> j <span class="token operator">&gt;=</span> i <span class="token operator">-</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    X <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">125</span><span class="token operator">+</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">**</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>j<span class="token operator">-</span>i<span class="token punctuation">)</span>                    Y <span class="token operator">=</span> <span class="token number">200</span><span class="token operator">-</span><span class="token number">30</span><span class="token operator">*</span>i                    <span class="token keyword">if</span> x <span class="token operator">&gt;=</span> X <span class="token operator">-</span> <span class="token number">20</span> <span class="token keyword">and</span> x <span class="token operator">&lt;=</span> X <span class="token operator">+</span> <span class="token number">20</span> <span class="token keyword">and</span> y <span class="token operator">&gt;=</span> Y <span class="token operator">-</span> <span class="token number">20</span> <span class="token keyword">and</span> y <span class="token operator">&lt;=</span> Y <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">:</span>                        <span class="token keyword">if</span> x <span class="token operator">&gt;=</span> X <span class="token operator">-</span> <span class="token number">20</span> <span class="token keyword">and</span> x <span class="token operator">&lt;=</span> X<span class="token punctuation">:</span>                            <span class="token keyword">if</span> y <span class="token operator">&gt;</span> Y <span class="token operator">-</span> <span class="token number">10</span> <span class="token operator">-</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token punctuation">(</span>X<span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">**</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">and</span> y <span class="token operator">&lt;</span> Y <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token punctuation">(</span>X<span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">**</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                <span class="token keyword">if</span> self<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                                    <span class="token keyword">return</span>                                position <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">15</span><span class="token operator">+</span>j<span class="token punctuation">)</span>                                <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                    self<span class="token punctuation">.</span>play_game<span class="token punctuation">(</span>position<span class="token punctuation">)</span>                                <span class="token keyword">return</span>                        <span class="token keyword">elif</span> x <span class="token operator">&gt;=</span> X <span class="token keyword">and</span> x <span class="token operator">&lt;=</span> X <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">:</span>                            <span class="token keyword">if</span> y <span class="token operator">&gt;</span> Y <span class="token operator">-</span> <span class="token number">10</span> <span class="token operator">-</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token operator">+</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">-</span> x<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">**</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">and</span> y <span class="token operator">&lt;</span> Y <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token operator">+</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">-</span> x<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">**</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                <span class="token keyword">if</span> self<span class="token punctuation">.</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                                    <span class="token keyword">return</span>                                position <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">15</span><span class="token operator">+</span>j<span class="token punctuation">)</span>                                <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                    self<span class="token punctuation">.</span>play_game<span class="token punctuation">(</span>position<span class="token punctuation">)</span>                                <span class="token keyword">return</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    Havannah<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Free-Python-Games"><a href="#Free-Python-Games" class="headerlink" title="Free Python Games"></a>Free Python Games</h5><p>项目对原 Free Python Games 中大部分的游戏进行了升级处理，并对Free Python Games中的paint与snake进行拓展</p><h6 id="paint"><a href="#paint" class="headerlink" title="paint"></a>paint</h6><p>该程序通过键盘来控制颜色、形状、是否填充：K、W、G、B、R分别代表颜色黑、白、绿、蓝、红；l、s、c、r、t分别代表形状线段、正方形、圆、长方形、三角形；f代表所化封闭图形需要填充；F则代表不用填充。</p><p>圆形、长方形、三角形与填充选项为拓展。</p><ul><li><p>圆形：通过图上鼠标点击的两点得到半径，第二个点为圆心而得到目标的图形。</p></li><li><p>长方形：通过图上鼠标点击的两点得到目标图形的对角的两个点，进行绘制。</p></li><li><p>三角形：通过图上鼠标点击的三个点得到目标图形的三个顶点。 </p></li></ul><p><img src="image/paint.png" alt="paint.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> turtle<span class="token keyword">import</span> math<span class="token keyword">from</span> freegames <span class="token keyword">import</span> vector<span class="token keyword">def</span> <span class="token function">line</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> middle<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Draw line from start to end."""</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>end<span class="token punctuation">.</span>x<span class="token punctuation">,</span> end<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">square</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> middle<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Draw square from start to end."""</span>    <span class="token keyword">for</span> count <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        turtle<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>end<span class="token punctuation">.</span>x <span class="token operator">-</span> start<span class="token punctuation">.</span>x<span class="token punctuation">)</span>        turtle<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">circle</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> middle<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Draw circle from start to end."""</span>    r <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>end<span class="token punctuation">.</span>x <span class="token operator">-</span> start<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end<span class="token punctuation">.</span>y <span class="token operator">-</span> start<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">0.5</span>    angle <span class="token operator">=</span> math<span class="token punctuation">.</span>atan2<span class="token punctuation">(</span>end<span class="token punctuation">.</span>x <span class="token operator">-</span> start<span class="token punctuation">.</span>x<span class="token punctuation">,</span> end<span class="token punctuation">.</span>y <span class="token operator">-</span> start<span class="token punctuation">.</span>y<span class="token punctuation">)</span>    angle <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>angle <span class="token operator">*</span> <span class="token number">180</span><span class="token operator">/</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>right<span class="token punctuation">(</span>angle<span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span>r<span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>left<span class="token punctuation">(</span>angle<span class="token punctuation">)</span>    <span class="token keyword">pass</span>  <span class="token comment"># TODO</span><span class="token keyword">def</span> <span class="token function">rectangle</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> middle<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Draw rectangle from start to end."""</span>    turtle<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>end<span class="token punctuation">.</span>x <span class="token operator">-</span> start<span class="token punctuation">.</span>x<span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>end<span class="token punctuation">.</span>y <span class="token operator">-</span> start<span class="token punctuation">.</span>y<span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>end<span class="token punctuation">.</span>x <span class="token operator">-</span> start<span class="token punctuation">.</span>x<span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>end<span class="token punctuation">.</span>y <span class="token operator">-</span> start<span class="token punctuation">.</span>y<span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span>  <span class="token comment"># TODO</span><span class="token keyword">def</span> <span class="token function">triangle</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> middle<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Draw triangle from start to end."""</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>middle<span class="token punctuation">.</span>x<span class="token punctuation">,</span> middle<span class="token punctuation">.</span>y<span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>end<span class="token punctuation">.</span>x<span class="token punctuation">,</span> end<span class="token punctuation">.</span>y<span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>start<span class="token punctuation">.</span>x<span class="token punctuation">,</span> start<span class="token punctuation">.</span>y<span class="token punctuation">)</span>    <span class="token keyword">pass</span>  <span class="token comment"># TODO</span><span class="token keyword">def</span> <span class="token function">tap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Store starting point or draw shape."""</span>    start <span class="token operator">=</span> state<span class="token punctuation">[</span><span class="token string">'start'</span><span class="token punctuation">]</span>    middle <span class="token operator">=</span> state<span class="token punctuation">[</span><span class="token string">'middle'</span><span class="token punctuation">]</span>    shape <span class="token operator">=</span> state<span class="token punctuation">[</span><span class="token string">'shape'</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> state<span class="token punctuation">[</span><span class="token string">'shape'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> triangle<span class="token punctuation">:</span>        <span class="token keyword">if</span> start <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            state<span class="token punctuation">[</span><span class="token string">'start'</span><span class="token punctuation">]</span> <span class="token operator">=</span> vector<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            shape <span class="token operator">=</span> state<span class="token punctuation">[</span><span class="token string">'shape'</span><span class="token punctuation">]</span>            end <span class="token operator">=</span> vector<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>            draw_shape<span class="token punctuation">(</span>start<span class="token punctuation">,</span> middle<span class="token punctuation">,</span> end<span class="token punctuation">)</span>            state<span class="token punctuation">[</span><span class="token string">'start'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> start <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            state<span class="token punctuation">[</span><span class="token string">'start'</span><span class="token punctuation">]</span> <span class="token operator">=</span> vector<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>        <span class="token keyword">elif</span> middle <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            state<span class="token punctuation">[</span><span class="token string">'middle'</span><span class="token punctuation">]</span> <span class="token operator">=</span> vector<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            shape <span class="token operator">=</span> state<span class="token punctuation">[</span><span class="token string">'shape'</span><span class="token punctuation">]</span>            end <span class="token operator">=</span> vector<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>            draw_shape<span class="token punctuation">(</span>start<span class="token punctuation">,</span> middle<span class="token punctuation">,</span> end<span class="token punctuation">)</span>            state<span class="token punctuation">[</span><span class="token string">'start'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span>            state<span class="token punctuation">[</span><span class="token string">'middle'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span>            <span class="token keyword">def</span> <span class="token function">draw_shape</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> middle<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>    turtle<span class="token punctuation">.</span>up<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>start<span class="token punctuation">.</span>x<span class="token punctuation">,</span> start<span class="token punctuation">.</span>y<span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>down<span class="token punctuation">(</span><span class="token punctuation">)</span>    shape <span class="token operator">=</span> state<span class="token punctuation">[</span><span class="token string">'shape'</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> state<span class="token punctuation">[</span><span class="token string">'fill'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'yes'</span><span class="token punctuation">:</span>    turtle<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>    shape<span class="token punctuation">(</span>start<span class="token punctuation">,</span> middle<span class="token punctuation">,</span> end<span class="token punctuation">)</span>        <span class="token keyword">if</span> state<span class="token punctuation">[</span><span class="token string">'fill'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'yes'</span><span class="token punctuation">:</span>    turtle<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">store</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Store value in state at key."""</span>    state<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#state = {'start': None, 'middle': None, 'shape': line, 'fill': 'no'}</span>    turtle<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">420</span><span class="token punctuation">,</span> <span class="token number">420</span><span class="token punctuation">,</span> <span class="token number">370</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>onscreenclick<span class="token punctuation">(</span>tap<span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>onkey<span class="token punctuation">(</span>turtle<span class="token punctuation">.</span>undo<span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>onkey<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> turtle<span class="token punctuation">.</span>color<span class="token punctuation">(</span><span class="token string">'black'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'K'</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>onkey<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> turtle<span class="token punctuation">.</span>color<span class="token punctuation">(</span><span class="token string">'white'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'W'</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>onkey<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> turtle<span class="token punctuation">.</span>color<span class="token punctuation">(</span><span class="token string">'green'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>onkey<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> turtle<span class="token punctuation">.</span>color<span class="token punctuation">(</span><span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>onkey<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> turtle<span class="token punctuation">.</span>color<span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'R'</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>onkey<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> store<span class="token punctuation">(</span><span class="token string">'shape'</span><span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>onkey<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> store<span class="token punctuation">(</span><span class="token string">'shape'</span><span class="token punctuation">,</span> square<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>onkey<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> store<span class="token punctuation">(</span><span class="token string">'shape'</span><span class="token punctuation">,</span> circle<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>onkey<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> store<span class="token punctuation">(</span><span class="token string">'shape'</span><span class="token punctuation">,</span> rectangle<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>onkey<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> store<span class="token punctuation">(</span><span class="token string">'shape'</span><span class="token punctuation">,</span> triangle<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>onkey<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> store<span class="token punctuation">(</span><span class="token string">'fill'</span><span class="token punctuation">,</span> <span class="token string">'yes'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>onkey<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> store<span class="token punctuation">(</span><span class="token string">'fill'</span><span class="token punctuation">,</span> <span class="token string">'no'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span>    state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'start'</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">'middle'</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">'shape'</span><span class="token punctuation">:</span> line<span class="token punctuation">,</span> <span class="token string">'fill'</span><span class="token punctuation">:</span> <span class="token string">'no'</span><span class="token punctuation">}</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="snake"><a href="#snake" class="headerlink" title="snake"></a>snake</h6><p>该游戏为贪吃蛇，基于源程序拓展了以下功能：</p><ul><li>当蛇头碰到一边的边界后会从另一个边界出来，即蛇不会因碰到边界而游戏失败。</li><li>蛇只可以转向它前进方向的左边和右边，即按动与前进方向相反的方向键后，蛇不会死亡且不改变移动方向。</li><li>蛇在死亡后可以按’r’键原地复活，但身体长度回到初始；按’q’，直接退出游戏。</li></ul><p><img src="image/snake1.png" alt="snake1.png"></p><p><img src="image/snake2.png" alt="snake2.png"></p><p><img src="image/snake3.png" alt="snake3.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> random <span class="token keyword">import</span> randrange<span class="token keyword">from</span> turtle <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> sys<span class="token keyword">from</span> freegames <span class="token keyword">import</span> square<span class="token punctuation">,</span> vectorfood <span class="token operator">=</span> vector<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>snake <span class="token operator">=</span> <span class="token punctuation">[</span>vector<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span>aim <span class="token operator">=</span> vector<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span>turnning <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Change snake direction."""</span>    <span class="token keyword">global</span> turnning    <span class="token keyword">if</span> turnning <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span>    turnning <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">if</span> x <span class="token operator">!=</span> <span class="token number">0</span> <span class="token keyword">and</span> aim<span class="token punctuation">.</span>x <span class="token operator">!=</span> <span class="token number">0</span> <span class="token keyword">and</span> x <span class="token operator">+</span> aim<span class="token punctuation">.</span>x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        turnning <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">return</span>    <span class="token keyword">elif</span> y <span class="token operator">!=</span> <span class="token number">0</span> <span class="token keyword">and</span> aim<span class="token punctuation">.</span>y <span class="token operator">!=</span> <span class="token number">0</span> <span class="token keyword">and</span> y <span class="token operator">+</span> aim<span class="token punctuation">.</span>y <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        turnning <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">return</span>    aim<span class="token punctuation">.</span>x <span class="token operator">=</span> x    aim<span class="token punctuation">.</span>y <span class="token operator">=</span> y    turnning <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">inside</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Return True if head inside boundaries."""</span>    <span class="token keyword">if</span> head<span class="token punctuation">.</span>x <span class="token operator">&lt;=</span> <span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">:</span>        head<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">190</span>    <span class="token keyword">elif</span> head<span class="token punctuation">.</span>x <span class="token operator">&gt;=</span> <span class="token number">190</span><span class="token punctuation">:</span>        head<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">200</span>    <span class="token keyword">elif</span> head<span class="token punctuation">.</span>y <span class="token operator">&lt;=</span> <span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">:</span>        head<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">190</span>    <span class="token keyword">elif</span> head<span class="token punctuation">.</span>y <span class="token operator">&gt;=</span> <span class="token number">190</span><span class="token punctuation">:</span>        head<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">200</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">200</span> <span class="token operator">&lt;=</span> head<span class="token punctuation">.</span>x <span class="token operator">&lt;=</span> <span class="token number">190</span> <span class="token keyword">and</span> <span class="token operator">-</span><span class="token number">200</span> <span class="token operator">&lt;=</span> head<span class="token punctuation">.</span>y <span class="token operator">&lt;=</span> <span class="token number">190</span><span class="token keyword">def</span> <span class="token function">direction</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> aim<span class="token punctuation">.</span>x <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">10</span> <span class="token keyword">and</span> key <span class="token operator">==</span> <span class="token string">'Right'</span><span class="token punctuation">:</span>        change<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> aim<span class="token punctuation">.</span>x <span class="token operator">!=</span> <span class="token number">10</span> <span class="token keyword">and</span> key <span class="token operator">==</span> <span class="token string">'Left'</span><span class="token punctuation">:</span>        change<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> aim<span class="token punctuation">.</span>y <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">10</span> <span class="token keyword">and</span> key <span class="token operator">==</span> <span class="token string">'Up'</span><span class="token punctuation">:</span>        change<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> aim<span class="token punctuation">.</span>y <span class="token operator">!=</span> <span class="token number">10</span> <span class="token keyword">and</span> key <span class="token operator">==</span> <span class="token string">'Down'</span><span class="token punctuation">:</span>        change<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Move snake forward one segment."""</span>    head <span class="token operator">=</span> snake<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>    head<span class="token punctuation">.</span>move<span class="token punctuation">(</span>aim<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> inside<span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token keyword">or</span> head <span class="token keyword">in</span> snake<span class="token punctuation">:</span>        square<span class="token punctuation">(</span>head<span class="token punctuation">.</span>x<span class="token punctuation">,</span> head<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">)</span>        update<span class="token punctuation">(</span><span class="token punctuation">)</span>        ontimer<span class="token punctuation">(</span>restart<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    snake<span class="token punctuation">.</span>append<span class="token punctuation">(</span>head<span class="token punctuation">)</span>    <span class="token keyword">if</span> head <span class="token operator">==</span> food<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Snake:'</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>snake<span class="token punctuation">)</span><span class="token punctuation">)</span>        food<span class="token punctuation">.</span>x <span class="token operator">=</span> randrange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span>        food<span class="token punctuation">.</span>y <span class="token operator">=</span> randrange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        snake<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    clear<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> body <span class="token keyword">in</span> snake<span class="token punctuation">:</span>        square<span class="token punctuation">(</span>body<span class="token punctuation">.</span>x<span class="token punctuation">,</span> body<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">'black'</span><span class="token punctuation">)</span>    square<span class="token punctuation">(</span>food<span class="token punctuation">.</span>x<span class="token punctuation">,</span> food<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">)</span>    update<span class="token punctuation">(</span><span class="token punctuation">)</span>    ontimer<span class="token punctuation">(</span>move<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">restart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'tape r to restart;tape q to exit'</span><span class="token punctuation">)</span>    listen<span class="token punctuation">(</span><span class="token punctuation">)</span>    onkey<span class="token punctuation">(</span>main<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>    onkey<span class="token punctuation">(</span>exit<span class="token punctuation">,</span> <span class="token string">'q'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> turnning     turnnong <span class="token operator">=</span> <span class="token number">0</span>    setup<span class="token punctuation">(</span><span class="token number">420</span><span class="token punctuation">,</span> <span class="token number">420</span><span class="token punctuation">,</span> <span class="token number">370</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>snake<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> body <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>snake<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            snake<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    reset<span class="token punctuation">(</span><span class="token punctuation">)</span>    hideturtle<span class="token punctuation">(</span><span class="token punctuation">)</span>    tracer<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    listen<span class="token punctuation">(</span><span class="token punctuation">)</span>    onkey<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> change<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'Right'</span><span class="token punctuation">)</span>    onkey<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> change<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'Left'</span><span class="token punctuation">)</span>    onkey<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> change<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'Up'</span><span class="token punctuation">)</span>    onkey<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> change<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'Down'</span><span class="token punctuation">)</span>    move<span class="token punctuation">(</span><span class="token punctuation">)</span>    done<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结与展望"><a href="#总结与展望" class="headerlink" title="总结与展望"></a>总结与展望</h2><p>本项目实现了一个统一的接口封装图形化界面、ai与语音识别，在避免复杂逻辑的情况下减少三者的耦合，从而使得项目易于学习与拓展。项目中作为例子实现了open_spiel的蒙特卡罗算法调用，Tictactoe, Go, Y, Hex, Havannah五个双人策略游戏，对Free Python Games中的paint与snake进行拓展，对原 Free Python Games 中大部分的游戏进行了升级处理，基于线下Vosk的语音识别。未来基于现有的接口可以方便的引入其它的强化学习、搜索、最优化、估值算法，补充支持的游戏，增加语音识别api。项目在Windows11和 Ubuntu 20.04.4 LTS 上测试通过，具有较高的可扩展性与可移植性。</p>]]></content>
      
      
      <categories>
          
          <category> 大作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Huffman 编码</title>
      <link href="/2022/01/24/huffman-bian-ma/"/>
      <url>/2022/01/24/huffman-bian-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="Huffman-编码压缩-解压器实验报告"><a href="#Huffman-编码压缩-解压器实验报告" class="headerlink" title="Huffman 编码压缩/解压器实验报告"></a>Huffman 编码压缩/解压器实验报告</h1><p>完成了<code>实验基本要求</code>、<code>【实现可指定的任意基本符号单元⼤小的Huffman压缩/解压缩算法】</code>、<code>【实现可指定的任意多元Huffman压缩/解压缩算法】</code>以及<code>【额外加分项】：实现可指定的对于基本符号单元⼤小和Huffman元数这两个参数的的任意组合的Huffman编码算法，统计分析这两个参数对于压缩/解压缩情况的联合影响</code></p><h2 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h2><h3 id="实验基本要求"><a href="#实验基本要求" class="headerlink" title="实验基本要求"></a>实验基本要求</h3><blockquote><p>基于 Huffman 编码实现⼀个压缩器和解压缩器（其中 Huffman 编码以字节作为统计和编码的基本符号单元），使其可以对任意的⽂件进⾏压缩和解压缩操作。针对编译⽣成的程序，要求压缩和解压缩部分可以分别独立运⾏。</p></blockquote><blockquote><p>每次运⾏程序时，用户可以指定只压缩/只解压缩指定路径的⽂件。实现的时候不限制与用户的交互⽅式，可供参考的⽅式包括但不限于</p><ul><li>根据命令行参数指定功能（压缩/解压缩）和输入/输出⽂件路径</li><li>GUI 界面</li><li>运行程序后由用户交互输⼊指定功能和路径</li></ul></blockquote><h3 id="实验选做内容"><a href="#实验选做内容" class="headerlink" title="实验选做内容"></a>实验选做内容</h3><blockquote><p>【实现可指定的任意基本符号单元⼤小的 <strong>Huffman</strong> 压缩**/**解压缩算法】原先我们的 Huffman 编码是对原⽂件的每⼀个字节为基本的符号单位进⾏统计和编码，试修改你的压缩/解压缩器，使其可以指定基本符号单元的⼤小，以 0.5 个字节为其⼤小变化的粒度</p></blockquote><blockquote><p>【实现可指定的任意多元 <strong>Huffman</strong> 压缩**/**解压缩算法】 原先我们的 Huffman 编码是针对基本符号单元⽣成⼆叉树进⾏编码，试修改你的压缩/解压缩器，使其可以指定⽣成 n 叉树进⾏ Huffman 编码，要求展示修改后压缩/解压缩指定⽂件时的 n 叉树 </p></blockquote><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><h3 id="命令行交互"><a href="#命令行交互" class="headerlink" title="命令行交互"></a>命令行交互</h3><p>第一个参数为文件路径</p><p>第二个参数为功能选择（0：压缩 1：解压缩）</p><p>第三个参数为基本符号单元⼤小，可省略</p><p>第四个参数为Huffman树阶数，可省略</p><p>示例如下</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">./HuffmanCode.exe [路径] [功能编号] (基本符号单元⼤小) (Huffman树阶数)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>压缩后的文件将保存在与源文件相同的路径下，并加上后缀.cop</p><p>压缩和解压缩时提示如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">基本符号单元:2 Huffman树阶数:2开始压缩编码中……压缩完成<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">基本符号单元:2 Huffman树阶数:2开始解压解码中……解压完成<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行时的Huffman树的链表存储如下</p><p><img src="image/Huffman%E6%A0%911.jpg" alt="Huffman树1"></p><p>上图为2叉Huffman树</p><p><img src="image/Huffman%E6%A0%912.jpg" alt="Huffman树2"></p><p>上图为填充了部分0权值节点的8叉Huffman树</p><h3 id="用户交互类"><a href="#用户交互类" class="headerlink" title="用户交互类"></a>用户交互类</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class User{public:User(unsigned int halfbyte = 2, unsigned int branch = 2);~User();void compress();void decompress();std::string path;private:unsigned int halfbyte;unsigned int readSupplement, writeSupplement;FILE* fpOrigin, * fpCompress;unsigned long long progress;std::map&lt;unsigned int, unsigned int&gt; charfrequency;HuffmanTree* huffmantree;void readFile(FILE*&amp; fp);unsigned int readsymbol(unsigned int&amp; bits);void calculateFrequency();void transcodeAndWriteFile();void getFrequencyAndLength();char* baseConversion(unsigned int ch, char destination[]);std::string baseDecode(unsigned char ch);void checkAndSave(char temp[], const unsigned int num);void decodeAndWriteFile();};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提供压缩和解压缩两个<code>public</code>函数，并存储<code>基本符号单元大小</code>，<code>压缩文件和解压缩文件指针</code>，<code>字符频数表</code>，<code>Huffman树</code></p><h3 id="HuffmanTree类"><a href="#HuffmanTree类" class="headerlink" title="HuffmanTree类"></a>HuffmanTree类</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">struct HTNode{unsigned int weight;unsigned int parent, child[16] = { 0 };unsigned int ch;HTNode(){weight = 0;parent = 0;ch = 0;}};class HuffmanTree{public:HuffmanTree(unsigned int halfbyte, unsigned int branch);~HuffmanTree();void createTree(std::map&lt;unsigned int, unsigned int&gt; charfrequency);void createCode();unsigned int getUnitSize();std::unordered_map&lt;unsigned int, std::string&gt; code;// 叶子节点数unsigned int leavesnum;// 总字符数为n，最多需要2*n-1个节点，0号单元未用HTNode* HT;unsigned int branch;private:unsigned int halfbyte;void selectMinNum(const unsigned int i, std::pair&lt;unsigned int, unsigned int&gt; minNum[]);};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现Huffman树的节点<code>HTNode</code>类与<code>HuffmanTree</code>类，<code>HTNode</code>包含节点权重，父节点，孩子和字符，<code>HuffmanTree</code>实现了创建HuffmanTree、生成Huffman编码、获取单元大小三个<code>Public</code>函数</p><h2 id="关键代码讲解"><a href="#关键代码讲解" class="headerlink" title="关键代码讲解"></a>关键代码讲解</h2><h3 id="命令行交互-1"><a href="#命令行交互-1" class="headerlink" title="命令行交互"></a>命令行交互</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">User* user;if (argc == 5){user = new User(atoi(argv[3]), atoi(argv[4]));std::cout &lt;&lt; "基本符号单元:" &lt;&lt; argv[3] &lt;&lt; " " &lt;&lt; "Huffman树阶数:" &lt;&lt; argv[4] &lt;&lt; std::endl;}else if (argc == 3){std::cout &lt;&lt; "基本符号单元:" &lt;&lt; 2 &lt;&lt; " " &lt;&lt; "Huffman树阶数:" &lt;&lt; 2 &lt;&lt; std::endl;user = new User();}else{std::cout &lt;&lt; "参数错误" &lt;&lt; std::endl;exit(2);}user-&gt;path = argv[1];if (atoi(argv[2]) == 0){user-&gt;compress();}else if (atoi(argv[2]) == 1){user-&gt;decompress();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>判断程序接受的参数个数是否符合要求，再根据参数选取<code>基本符号单元⼤小</code>、<code>Huffman树阶数</code>对相应的文件进行压缩或解压缩</p><h3 id="用户交互类-1"><a href="#用户交互类-1" class="headerlink" title="用户交互类"></a>用户交互类</h3><h4 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void User::compress(){std::cout &lt;&lt; "开始压缩" &lt;&lt; std::endl;readFile(fpOrigin);calculateFrequency();std::cout &lt;&lt; "编码中……" &lt;&lt; std::endl;huffmantree-&gt;createTree(charfrequency);huffmantree-&gt;createCode();transcodeAndWriteFile();std::cout &lt;&lt; "压缩完成" &lt;&lt; std::endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>压缩函数中首先使用二进制模式打开文件，然后计算字符频数，创建Huffman树，生成Huffman编码，最后将源文件根据Huffman编码生成压缩文件</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">unsigned int User::readsymbol(unsigned int&amp; bits){unsigned int symbol = 0, i = 0;static int unuse = 0;static unsigned char ch, high, low;for (i = 0; i &lt; halfbyte; i++){if (!unuse){ch = fgetc(fpOrigin);if (feof(fpOrigin)) break;high = ch &gt;&gt; 4;low = ch &amp; 15;unuse = 2;}if (unuse == 2) symbol = (symbol &lt;&lt; 4) + high;else symbol = (symbol &lt;&lt; 4) + low;unuse--;}bits = i;return symbol;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>读取字符时，先将字符按半个字节拆分，再按照需要合并</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">// 预留写最后补零个数的位置fwrite(&amp;writeSupplement, sizeof(unsigned int), 1, fpCompress);fwrite(&amp;readSupplement, sizeof(unsigned int), 1, fpCompress);fwrite(&amp;charfrequencysize, sizeof(unsigned int), 1, fpCompress);for (auto i : charfrequency){fwrite(&amp;i.first, sizeof(unsigned int), 1, fpCompress);fwrite(&amp;i.second, sizeof(unsigned int), 1, fpCompress);}std::string temp = "";fseek(fpOrigin, 0l, SEEK_SET);do{unsigned int bits = 0;unsigned int symbol = readsymbol(bits);if (feof(fpOrigin)){if (bits != 0){for (unsigned int i = bits; i &lt; halfbyte; i++){symbol = symbol &lt;&lt; 4;}temp += huffmantree-&gt;code[symbol];}}else temp += huffmantree-&gt;code[symbol];if (feof(fpOrigin)){for (unsigned int i = 0; i &lt; huffmantree-&gt;getUnitSize() - 1; i++)temp += "0";}while (temp.length() &gt;= huffmantree-&gt;getUnitSize()){char byte[9] = { 0 };strncpy(byte, temp.c_str(), huffmantree-&gt;getUnitSize());unsigned char bytetoch = (unsigned char)strtol(byte, NULL, huffmantree-&gt;branch);fputc(bytetoch, fpCompress);temp.erase(0, huffmantree-&gt;getUnitSize());}if (feof(fpOrigin)){fseek(fpCompress, 0l, SEEK_SET);writeSupplement = huffmantree-&gt;getUnitSize() - 1 - temp.length();fputc(writeSupplement, fpCompress);}} while (!feof(fpOrigin));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后生成压缩文件时，将额外补0的个数写在文件开头，紧接着写入词频表，最后依次读入源文件的字符转换后存入压缩文件</p><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void User::decompress(){std::cout &lt;&lt; "开始解压" &lt;&lt; std::endl;readFile(fpCompress);getFrequencyAndLength();std::cout &lt;&lt; "解码中……" &lt;&lt; std::endl;huffmantree-&gt;createTree(charfrequency);decodeAndWriteFile();std::cout &lt;&lt; "解压完成" &lt;&lt; std::endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解压缩时先读取压缩文件，获取词频，创建Huffman树后读取压缩文件译码生成源文件</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">std::string User::baseDecode(unsigned char ch){std::string result = "";for (unsigned int i = 0; i &lt; huffmantree-&gt;getUnitSize(); i++){result += ch % huffmantree-&gt;branch + '0';ch = ch / huffmantree-&gt;branch;}return result;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该函数实现将k叉Huffman树得到的k进制串转换为字符的功能</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">while (true){if (num == 0){ch = fgetc(fpCompress);num = huffmantree-&gt;getUnitSize();result = baseDecode(ch);if (--progress == 0) break;}if (huffmantree-&gt;HT[p].child[0] != 0){p = huffmantree-&gt;HT[p].child[result.c_str()[--num] - '0'];}else{char ch[10];strcat(temp, baseConversion(huffmantree-&gt;HT[p].ch, ch));checkAndSave(temp, 8u);p = root;}}while (num &gt;= (int)writeSupplement){if (huffmantree-&gt;HT[p].child[0] != 0){p = huffmantree-&gt;HT[p].child[result.c_str()[--num] - '0'];}else{char ch[10];strcat(temp, baseConversion(huffmantree-&gt;HT[p].ch, ch));checkAndSave(temp, 8u);p = root;}}checkAndSave(temp, readSupplement);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据构建好的Huffman树得到原始字符，去除压缩时填充部分后得到源文件</p><h3 id="HuffmanTree类-1"><a href="#HuffmanTree类-1" class="headerlink" title="HuffmanTree类"></a>HuffmanTree类</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void HuffmanTree::createTree(std::map&lt;unsigned int, unsigned int&gt; charfrequency){leavesnum = charfrequency.size();leavesnum += branch - 1 - (leavesnum - 1) % (branch - 1);HT = new HTNode[leavesnum + (leavesnum - 1) / (branch - 1) + 1]();leavesnum = 0;for (auto i : charfrequency){HT[++leavesnum].ch = i.first;HT[leavesnum].weight = i.second;}if (leavesnum == 0 || leavesnum == 1){std::cout &lt;&lt; "无法构造Huffman树" &lt;&lt; std::endl;exit(1);}leavesnum += branch - 1 - (leavesnum - 1) % (branch - 1);for (unsigned int i = leavesnum + 1; i &lt;= leavesnum + (leavesnum - 1) / (branch - 1); i++){std::pair&lt;unsigned int, unsigned int&gt;  minNum[16];selectMinNum(i - 1, minNum);for (unsigned int j = 0; j &lt; branch; j++){HT[minNum[j].first].parent = i;HT[i].child[j] = minNum[j].first;HT[i].weight += minNum[j].second;}}}void HuffmanTree::createCode(){for (unsigned int i = 1; i &lt;= leavesnum; i++){if (HT[i].weight == 0) continue;code[HT[i].ch] = "";for (unsigned int j = i; HT[j].parent; j = HT[j].parent){unsigned int parent = HT[j].parent;for (unsigned int k = 0; k &lt; branch; k++){if (HT[parent].child[k] == j){if (k &lt; 10)code[HT[i].ch] += '0' + k;else code[HT[i].ch] += 'a' + k - 10;break;}}}std::reverse(code[HT[i].ch].begin(), code[HT[i].ch].end());}}bool compare(std::pair&lt;unsigned int, unsigned int&gt; a, std::pair&lt;unsigned int, unsigned int&gt; b){return a.second &lt; b.second;}void HuffmanTree::selectMinNum(const unsigned int i, std::pair&lt;unsigned int, unsigned int&gt; minNum[]){unsigned int j = 0;for (unsigned int i = 0; i &lt; branch; i++){while (true){j++;if (HT[j].parent == 0){minNum[i].first = j;minNum[i].second = HT[j].weight;break;}}}std::sort(minNum, minNum + branch, compare);for (j = j + 1; j &lt;= i; j++){if (HT[j].parent == 0){if (HT[j].weight &lt; minNum[branch - 1].second){minNum[branch - 1].first = j;minNum[branch - 1].second = HT[j].weight;std::sort(minNum, minNum + branch, compare);}}}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造Huffman树和生成Huffman编码部分参考课本<code>6.6.2</code>节内容，此处拓展为k叉树的情况对每个叶子节点生成k进制串</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">unsigned int HuffmanTree::getUnitSize(){switch (branch){case 2:return 8;case 3:return 5;case 4:return 4;case 5:case 6:return 3;default:return 2;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该函数返回一个字节所存储的k进制数的个数</p><h2 id="调试分析"><a href="#调试分析" class="headerlink" title="调试分析"></a>调试分析</h2><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><h4 id="Huffman树"><a href="#Huffman树" class="headerlink" title="Huffman树"></a>Huffman树</h4><p>记叶子节点个数为n，在构造k叉Huffman树的过程中，取最小节点的次数为<code>O(n/k)</code>，每次取最小节点的复杂度为<code>O(n)</code>，将所有节点合并的时间复杂度为<code>O(n)</code>，则构造Huffman树的时间复杂度为<code>O(n^2/k+n)</code>即<code>O(n^2/k)</code></p><p>在求Huffman编码的过程中，叶子节点的平均深度为<code>O(logn)</code>，对n个叶子节点分别求编码的总时间复杂度为<code>O(nlogn)</code></p><h4 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h4><p>文件读写的时间复杂度为<code>O(m)</code>，m为文件中含有的字节数</p><h4 id="压缩-解压缩的总复杂度"><a href="#压缩-解压缩的总复杂度" class="headerlink" title="压缩/解压缩的总复杂度"></a>压缩/解压缩的总复杂度</h4><p>总时间复杂度为<code>O(n^2/k+m)</code></p><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>存储Huffman树以及Huffman编码的空间复杂度为<code>O(n)</code></p><h3 id="遇到的bug"><a href="#遇到的bug" class="headerlink" title="遇到的bug"></a>遇到的bug</h3><h4 id="bug1"><a href="#bug1" class="headerlink" title="bug1"></a>bug1</h4><ul><li>bug内容：使用较大的基本符号单元时程序发生溢出</li><li>bug原因：对每个字符都分配存储空间，存储词频表所用空间过大</li><li>解决方案：按需分配词频表的存储空间，对词频为0的字符不分配空间</li></ul><h4 id="bug2"><a href="#bug2" class="headerlink" title="bug2"></a>bug2</h4><ul><li>bug内容：使用k叉Huffman树解压缩时，无法还原出原先的k进制字符串</li><li>bug原因：k进制串的高位部分0被忽略</li><li>解决方案：确定每个进制在一个字符中所存的位数，以便解压缩时得出高位是否含0</li></ul><h2 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h2><table><thead><tr><th>阶数/单元</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th></tr></thead><tbody><tr><td>2</td><td>0.93</td><td>0.77</td><td>0.81</td><td>0.67</td><td>0.79</td><td>0.86</td><td>1.22</td><td>1.09</td></tr><tr><td>3</td><td>0.95</td><td>0.78</td><td>0.82</td><td>0.68</td><td>0.80</td><td>0.87</td><td>1.23</td><td>1.10</td></tr><tr><td>4</td><td>0.97</td><td>0.78</td><td>0.81</td><td>0.68</td><td>0.79</td><td>0.87</td><td>1.23</td><td>1.10</td></tr><tr><td>5</td><td>1.11</td><td>0.90</td><td>0.94</td><td>0.78</td><td>0.90</td><td>0.95</td><td>1.31</td><td>1.17</td></tr><tr><td>6</td><td>0.98</td><td>0.82</td><td>0.85</td><td>0.71</td><td>0.82</td><td>0.89</td><td>1.25</td><td>1.11</td></tr><tr><td>7</td><td>1.40</td><td>1.12</td><td>1.17</td><td>0.97</td><td>1.09</td><td>1.11</td><td>1.46</td><td>1.30</td></tr><tr><td>8</td><td>1.34</td><td>1.06</td><td>1.10</td><td>0.91</td><td>1.03</td><td>1.06</td><td>1.41</td><td>1.26</td></tr><tr><td>9</td><td>1.25</td><td>1.01</td><td>1.04</td><td>0.87</td><td>0.98</td><td>1.02</td><td>1.37</td><td>1.22</td></tr><tr><td>10</td><td>1.21</td><td>0.97</td><td>1.00</td><td>0.83</td><td>0.94</td><td>0.99</td><td>1.35</td><td>1.20</td></tr><tr><td>11</td><td>1.17</td><td>0.94</td><td>0.96</td><td>0.80</td><td>0.91</td><td>0.97</td><td>1.32</td><td>1.18</td></tr><tr><td>12</td><td>1.13</td><td>0.92</td><td>0.93</td><td>0.77</td><td>0.89</td><td>0.94</td><td>1.30</td><td>1.16</td></tr><tr><td>13</td><td>1.10</td><td>0.89</td><td>0.90</td><td>0.75</td><td>0.86</td><td>0.92</td><td>1.28</td><td>1.14</td></tr><tr><td>14</td><td>1.07</td><td>0.87</td><td>0.88</td><td>0.73</td><td>0.84</td><td>0.91</td><td>1.26</td><td>1.13</td></tr><tr><td>15</td><td>1.04</td><td>0.85</td><td>0.86</td><td>0.72</td><td>0.82</td><td>0.89</td><td>1.25</td><td>1.12</td></tr><tr><td>16</td><td>1.02</td><td>0.84</td><td>0.84</td><td>0.70</td><td>0.81</td><td>0.88</td><td>1.24</td><td>1.11</td></tr></tbody></table><p>使用文本文件进行压缩测试，在不同的基本符号单元⼤小与Huffman树阶数下测得的压缩率如上，单元以半个字节计，1-8即为0.5-4个字节</p><p><img src="image/%E5%9B%BE%E8%A1%A81.jpg" alt="图表1"></p><p>如图所示，在基本符号单元相同时，2叉~4叉Huffman树的压缩率较小</p><p><img src="image/%E5%9B%BE%E8%A1%A82.jpg" alt="图表2"></p><p>在Huffman树阶数相同时，基本符号单元为2字节时压缩率最小，可能的原因是测试的文本文件采用ANSI编码，每个字符用两个字节存储，因此在基本符号单元为2字节时呈现出有规律的词频分布，压缩效率较高</p><p><img src="image/%E5%9B%BE%E8%A1%A83.jpg" alt="图表3"></p><p>使用MATLAB以压缩率为因变量，基本符号单元大小与Huffman树阶数为自变量作图并求得压缩率最低点如上，在基本符号单元⼤小为<code>2字节</code>，Huffman树阶数为<code>2</code>时压缩率最小为<code>67.4%</code></p><h2 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h2><p>通过这次实验，我熟练掌握了使用Huffman树进行压缩和解压缩的方法，熟悉了树的基本存储结构，学习了使用命令行获取参数的方法，并学习了测试与分析测试结果的方法。通过编写这样一个小项目，提高了代码组织能力和问题的发现与解决能力，同时对于书上的算法的具体代码实现有了更深的理解。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ul><li><p>User.h</p><p>用户交互类头文件</p></li><li><p>User.cpp</p><p>用户交互类实现</p></li><li><p>HuffmanTree.h</p><p>Huffman树类头文件</p></li><li><p>HuffmanTree.cpp</p><p>Huffman树类实现</p></li><li><p>test.cpp</p><p>主函数</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 大作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>银行业务模拟</title>
      <link href="/2022/01/23/yin-xing-ye-wu-mo-ni/"/>
      <url>/2022/01/23/yin-xing-ye-wu-mo-ni/</url>
      
        <content type="html"><![CDATA[<h1 id="离散事件模拟实验报告（银行业务模拟）"><a href="#离散事件模拟实验报告（银行业务模拟）" class="headerlink" title="离散事件模拟实验报告（银行业务模拟）"></a>离散事件模拟实验报告（银行业务模拟）</h1><p>完成了<code>实验基本要求</code>、<code>图形化界面</code>、<code>实验附加要求：多个第一种队列的服务窗口，通过输入数字确定数量</code></p><h2 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h2><h3 id="实验基本要求"><a href="#实验基本要求" class="headerlink" title="实验基本要求"></a>实验基本要求</h3><p><img src="image/%E5%AE%9E%E9%AA%8C%E8%A6%81%E6%B1%82.jpg" alt="实验要求"></p><p>​    <strong>在此基础上实现图形化界面</strong></p><h3 id="实验附加要求"><a href="#实验附加要求" class="headerlink" title="实验附加要求"></a>实验附加要求</h3><blockquote><p>实现：多个第一种队列的服务窗口，通过输入数字确定数量（3 分）</p></blockquote><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><h3 id="事件表与客户队列"><a href="#事件表与客户队列" class="headerlink" title="事件表与客户队列"></a>事件表与客户队列</h3><p>将银行中发生的事件分为两类，到达事件和离开事件，使用队列数据结构来存储事件表，队列中从队头到队尾依次按照事件发生的时间顺序进行排列，每次出队时队头即为下一个发生的事件</p><p>将客户队列也使用队列数据结构进行存储，后来的客户直接入队，这样可以保证队列中先来后到的顺序</p><p>开始时向事件表中添加到达事件，在处理每一个到达事件时添加下一个到达事件。当客户队列非空时向事件表中添加离开事件，当处理离开事件时如果客户队列仍非空添加下一个离开事件，这样即可完成事件的驱动。</p><p>在处理客户时，若申请金额超出银行资金，则将其排入第二个队列等候。在每一个客户离开时统计其完成业务的等待时间，当银行营业结束后输出最终结果。</p><h3 id="队列数据结构的实现"><a href="#队列数据结构的实现" class="headerlink" title="队列数据结构的实现"></a>队列数据结构的实现</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">/** * @brief 队列的基本节点 * @details data数组在客户队列中存储[0]-ArrivalTime [1]-money [2]-duration * @details data数组在事件队列中存储[0]-OccurTime [1]-Type*/typedef struct QNode{QNode();QNode(int(&amp;data)[3]);int data[3];QNode* next;} QNode, * QuenePtr;typedef struct LinkQunene{LinkQunene();QuenePtr front;QuenePtr rear;} LinkQunene;class Quene{public:Quene();void enQuene(int(&amp;data)[3]);void deQuene(int(&amp;data)[3]);/** * @brief 根据data[0]中存储的值升序排列*/void enQueneInOrder(int(&amp;data)[3]);void moveFrontToRear();int getLength();QNode* getFront();void print();~Quene();private:LinkQunene quene;int length;};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现了队列节点<code>QNode</code>，队列<code>LinkQuene</code>，以及队列数据类型<code>Quene</code></p><p><code>Quene</code>中包含<strong>入队</strong>、<strong>出队</strong>、<strong>按序入队</strong>、<strong>获得长度</strong>、<strong>获得头节点</strong>、<strong>输出队列信息</strong>等基本操作</p><h3 id="银行类的实现"><a href="#银行类的实现" class="headerlink" title="银行类的实现"></a>银行类的实现</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Bank{public:/** * @brief 构造函数 * @details 存取金额范围为 [-moneyScope, moneyScope-1] * @details 处理业务时间范围为 [1,durationScope] * @details 到来间隔时间范围为 [1,intertimeScope] * @param totalMoney 总金额 * @param closeTime 营业时间 * @param moneyScope 客户存取金额范围 * @param durationScope 客户处理业务时间范围 * @param intertimeScope 客户到来间隔时间范围*/Bank(const int totalMoney = 10000, const int closeTime = 100000, const int moneyScope = 5000, const int durationScope = 15, const int intertimeScope = 30);/** * @brief 处理事件 * @details data[1]存储事件种类Type，0-到达事件， 1-withdrawMoneyList离开事件，2-customerList1离开事件 * @deatils 事件的发生时间必须小于closeTime*/void handleEvent();bool isEventListNotEmpty();/** * @brief 输出模拟结果 * @return 客户平均耗时*/int printResult();/** * @brief 输出当前银行状态*/void printCurrentCondition();private:/** * @brief 总金额*/int totalMoney;/** * @brief 营业时间*/int closeTime;/** * @brief 客户总等待时间*/int totalTime;/** * @brief 客户总等待时间*/int customerNum;bool dealingWithdrawMoneyList;int moneyScope;int durationScope;int intertimeScope;int bottomMoney;Quene withdrawMoneyList;Quene customerList1;Quene eventList;/** * @brief 处理客户的离开事件 * @param leaveTime 离开事件的发生时间 * @param type 1-withdrawMoneyList 2-customerList1*/void departure(const int leaveTime, const int type);void customerArrived(const int arriveTime);/** * @brief 检查并处理withdrawMoneyList中的客户 * @details 每次检查队头客户，若银行钱不够取则将将该客户排到队尾 * @details 直到所有客户都被检查一遍 * @details 或者银行钱已经少于上一个客户存钱之前的金额 * @param startTime 上一个存钱客户的离开时间*/void withdrawMoneyListCheck(const int startTime);/** * @brief 生成离开事件并插入事件表 * @details 插入的客户一定在队头 * @details 若银行钱足够并且能在营业时间完成则插入成功 * @param startTime 开始处理顾客的时间 * @param type 1-withdrawMoneyList 2-customerList1 * @return 0-插入成功 -1-银行缺钱 1-超出营业时间*/int generateLeaveEvent(const int startTime, const int type);};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>银行类中存储了银行<strong>总金额</strong>、<strong>营业时间</strong>等信息,实现了<strong>事件处理</strong>、<strong>输出结果</strong>等基本功能。</p><h3 id="附加功能的实现"><a href="#附加功能的实现" class="headerlink" title="附加功能的实现"></a>附加功能的实现</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">Quene *customerList;customerList = new Quene[listNum];int getSmallerListNum();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建一个第一种队列的数组，并编写从中获取最短队列的函数</p><h3 id="图形化界面的实现"><a href="#图形化界面的实现" class="headerlink" title="图形化界面的实现"></a>图形化界面的实现</h3><p>通过qt实现图形化界面，对第一种队列数为1的情况做出具体的中间过程模拟</p><h2 id="关键代码讲解"><a href="#关键代码讲解" class="headerlink" title="关键代码讲解"></a>关键代码讲解</h2><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void Quene::enQueneInOrder(int(&amp;data)[3]){QuenePtr front = quene.front;if (front == NULL){enQuene(data);}else{QuenePtr node = new QNode(data);if (node == NULL)abort();if (node-&gt;data[0] &lt; front-&gt;data[0]){node-&gt;next = front;quene.front = node;}else{QuenePtr pre = quene.front;QuenePtr cur = pre-&gt;next;while (cur){if (pre-&gt;data[0] &lt;= data[0] &amp;&amp; data[0] &lt;= cur-&gt;data[0])break;pre = cur;cur = pre-&gt;next;}pre-&gt;next = node;node-&gt;next = cur;if (!cur)quene.rear = node;}length++;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>队列数据结构中实现了通过逐个比较队列中节点的<code>data</code>域来寻找入队时合适的插入位置，以便完成事件表的按序排列</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void Quene::moveFrontToRear(){if (length &gt; 1){QuenePtr front = quene.front;quene.front = front-&gt;next;front-&gt;next = NULL;quene.rear-&gt;next = front;quene.rear = front;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处实现将队头节点移动到队尾，以便实现循环检测取钱的第二个队中是否有人可以取钱</p><h3 id="银行类"><a href="#银行类" class="headerlink" title="银行类"></a>银行类</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">Bank::Bank(const int totalMoney, const int closeTime, const int moneyScope, const int durationScope, const int intertimeScope) : totalMoney(totalMoney),closeTime(closeTime), totalTime(0), customerNum(0), dealingWithdrawMoneyList(false), moneyScope(moneyScope), durationScope(durationScope),intertimeScope(intertimeScope), bottomMoney(0){//插入第一个到达事件int arrive[3] = { 0, 0, 0 };eventList.enQueneInOrder(arrive);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造函数中初始化<strong>银行总金额</strong>、<strong>营业时间</strong>、<strong>客户存取金额上限</strong>、<strong>客户办理业务时间上限</strong>、<strong>客户到达间隔上限</strong>，并插入第一个到达事件</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void Bank::handleEvent(){int event[3];eventList.deQuene(event);switch (event[1]){case 0:customerArrived(event[0]);break;case 1: case 2:departure(event[0], event[1]);break;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>事件处理函数中根据事件表头的事件类型进行处理，0代表到达事件，其它数字代表离开事件，并用不同数字来区分不同队列的离开事件</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void Bank::customerArrived(const int arriveTime){int money = rand() % moneyScope;money = (rand() % 2) &gt; 0 ? money : -money;int duration = rand() % durationScope + 1;int customer[3] = { arriveTime, money, duration };//customerList1队尾插入新客户customerList1.enQuene(customer);int intertime = rand() % intertimeScope + 1;//在营业结束前新客户到来则插入到来事件if (arriveTime + intertime &lt; closeTime){int newarrive[3] = { arriveTime + intertime, 0, 0 };eventList.enQueneInOrder(newarrive);}//若此时未处理取钱客户 且 customerList1仅有1位刚到达客户//试图处理这位客户if (!dealingWithdrawMoneyList &amp;&amp; customerList1.getLength() == 1){int condition = generateLeaveEvent(arriveTime, 2);if (condition == -1){int customer[3];customerList1.deQuene(customer);withdrawMoneyList.enQuene(customer);}}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户到达时调用该函数进行处理，随机生成客户存取金额，办理业务事件、下一客户到达时间，并将下一客户的到达事件插入事件表中，若该客户为当前排队的第一个客户则试图插入这位客户的离开事件</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void Bank::departure(const int leaveTime, const int type){int customer[3];if (type == 1){withdrawMoneyList.deQuene(customer);dealingWithdrawMoneyList = false;withdrawMoneyListCheck(leaveTime);}else if (type == 2)customerList1.deQuene(customer);else{abort();}//客户等待时间为离开时间-到达时间totalTime += leaveTime - customer[0];totalMoney += customer[1];customerNum++;if (customer[1] &gt; 0){bottomMoney = totalMoney - customer[1];withdrawMoneyListCheck(leaveTime);}//若没有正在处理的客户if (!dealingWithdrawMoneyList){int condition;//循环检查customerList1队头顾客并将银行钱不够取的顾客插入withdrawMoneyList//直到队列为空while ((customerList1.getLength() != 0) &amp;&amp; (condition = generateLeaveEvent(leaveTime, 2)) == -1){int customer[3];customerList1.deQuene(customer);withdrawMoneyList.enQuene(customer);}}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户离开时调用该函数进行处理，将对应客户出队，将客户办理业务事件存储，更新银行的金额，如果这个客户存钱则检查取钱队列中是否有客户可以满足，如果没有就插入下一个客户的离开事件</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void Bank::withdrawMoneyListCheck(const int startTime){if (withdrawMoneyList.getLength() == 0 || totalMoney &lt;= bottomMoney || dealingWithdrawMoneyList)return;QuenePtr oldfirst = withdrawMoneyList.getFront();do{int condition = generateLeaveEvent(startTime, 1);if (condition == 0){dealingWithdrawMoneyList = true;break;}else{withdrawMoneyList.moveFrontToRear();}} while (withdrawMoneyList.getFront() != oldfirst);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进行取钱客户队列的检查，如果队头的客户不能满足，则将队头客户排至队尾，直到发现可以满足的客户，或者整个队列循环一次为止。如果在处理过程中银行的钱已经少于开始处理时的钱，则剩下的客户必定不能满足，直接退出函数</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int Bank::generateLeaveEvent(const int startTime, const int type){QuenePtr front;if (type == 1){front = withdrawMoneyList.getFront();}else if (type == 2){front = customerList1.getFront();}else{abort();}if (totalMoney + front-&gt;data[1] &lt; 0) return -1;if (startTime + front-&gt;data[2] &gt;= closeTime) return 1;int leave[3] = { startTime + front-&gt;data[2], type, 0 };eventList.enQueneInOrder(leave);return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>检查当前银行的金额能否满足，处理所需时间是否超出银行营业时间，如果都符合要求则插入客户的离开事件</p><h3 id="附加功能"><a href="#附加功能" class="headerlink" title="附加功能"></a>附加功能</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int BankAdvanced::getSmallerListNum(){int min = customerList[0].getLength(), minNum = 2;for (int i = 1; i &lt; listNum; i++){if (customerList[i].getLength() &lt; min){min = customerList[i].getLength();minNum = i + 2;}}return minNum;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每次插入前获取最短队列，并插入到最短队列中</p><h3 id="图形化的实现"><a href="#图形化的实现" class="headerlink" title="图形化的实现"></a>图形化的实现</h3><p><img src="image/mainwindow.jpg" alt="主界面"></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void MainWindow::on_simulation_clicked(){    int totalmoney = ui-&gt;totalmoney-&gt;text().toInt();    int closetime = ui-&gt;closetime-&gt;text().toInt();    int moneyscope = ui-&gt;moneyscope-&gt;text().toInt();    int durationscope = ui-&gt;durationscope-&gt;text().toInt();    int intertimescope = ui-&gt;intertimescope-&gt;text().toInt();    int listnum = ui-&gt;listnum-&gt;text().toInt();    if(listnum == 1)    {        this-&gt;hide();        Bank *bank = new Bank(totalmoney,closetime,moneyscope,durationscope,intertimescope);        Step *step=new Step();        step-&gt;setBank(bank);        step-&gt;show();        step-&gt;exec();        this-&gt;show();        while (bank-&gt;isEventListNotEmpty())        {            bank-&gt;handleEvent();        }        QString string = QString("平均用时：")+QString::number(bank-&gt;printResult());        ui-&gt;value-&gt;setText(string);        delete(bank);    }    else    {        BankAdvanced *bank = new BankAdvanced(totalmoney,closetime,moneyscope,durationscope,intertimescope,listnum);        while (bank-&gt;isEventListNotEmpty())        {            bank-&gt;handleEvent();        }        QString string = QString("平均用时：")+QString::number(bank-&gt;printResult());        ui-&gt;value-&gt;setText(string);        delete(bank);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>点击按钮后获取主界面中填入的参数并传入Bank类中得到结果后进行输出</p><p>如果设定的第一种队列个数为1，会打开中间模拟窗口，隐藏主窗口，待中间模拟窗口关闭后重新显示主窗口</p><p><img src="image/step.jpg" alt="中间模拟"></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void Step::on_nextStep_clicked(){    if((bank-&gt;isEventListNotEmpty()))    {        bank-&gt;handleEvent();        ui-&gt;totalMoney-&gt;setText(QString::number(bank-&gt;totalMoney));        ui-&gt;eventList-&gt;clearContents();        ui-&gt;withdrawMoneyList-&gt;clearContents();        ui-&gt;customerList1-&gt;clearContents();        QNode *node;        node = bank-&gt;eventList.getFront();        for(int i=0;node&amp;&amp;i&lt;13;i++)        {            ui-&gt;eventList-&gt;setItem(i,0,new QTableWidgetItem(QString::number(node-&gt;data[0])));            ui-&gt;eventList-&gt;setItem(i,1,new QTableWidgetItem(QString::number(node-&gt;data[1])));            node=node-&gt;next;        }        node = bank-&gt;withdrawMoneyList.getFront();        for(int i=0;node&amp;&amp;i&lt;13;i++)        {            ui-&gt;withdrawMoneyList-&gt;setItem(i,0,new QTableWidgetItem(QString::number(node-&gt;data[0])));            ui-&gt;withdrawMoneyList-&gt;setItem(i,1,new QTableWidgetItem(QString::number(node-&gt;data[1])));            ui-&gt;withdrawMoneyList-&gt;setItem(i,2,new QTableWidgetItem(QString::number(node-&gt;data[2])));            node=node-&gt;next;        }        node = bank-&gt;customerList1.getFront();        for(int i=0;node&amp;&amp;i&lt;13;i++)        {            ui-&gt;customerList1-&gt;setItem(i,0,new QTableWidgetItem(QString::number(node-&gt;data[0])));            ui-&gt;customerList1-&gt;setItem(i,1,new QTableWidgetItem(QString::number(node-&gt;data[1])));            ui-&gt;customerList1-&gt;setItem(i,2,new QTableWidgetItem(QString::number(node-&gt;data[2])));            node=node-&gt;next;        }    }    else        accept();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>点击按钮时会进行下一个事件的处理，并将事件处理后的结果显示</p><h2 id="调试分析"><a href="#调试分析" class="headerlink" title="调试分析"></a>调试分析</h2><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>在银行金额充足的情况下，每个客户只需要被遍历一遍即可完成处理，时间复杂度为<code>O(n)</code>，但在银行金额不够大多数用户取时，每有一个用户存钱，就会遍历整个取钱队列，最差时间复杂度为<code>O(n^n)</code></p><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>每个客户只需要一个节点进行存储，每个客户分别对应一个到达事件和一个离开事件，空间复杂度为<code>O(n)</code></p><h3 id="遇到的bug"><a href="#遇到的bug" class="headerlink" title="遇到的bug"></a>遇到的bug</h3><h4 id="bug1"><a href="#bug1" class="headerlink" title="bug1"></a>bug1</h4><ul><li>bug内容：在尝试让队头的客户排到队尾时陷入死循环</li><li>bug原因：每次将队头的空间释放后重新申请空间创建节点插入队尾，导致无法判断整个队列是否循环一次</li><li>解决方案：不进行空间的释放和重新申请，通过指针的改变直接改变队列的结构，以便通过节点的地址判断是否循环一次</li></ul><h4 id="bug2"><a href="#bug2" class="headerlink" title="bug2"></a>bug2</h4><ul><li>bug内容：队列中只有1个客户时，让队头的客户排到队尾时发生空指针异常</li><li>bug原因：队列只有一个客户时无法将自身插入到自身的后面</li><li>解决方案：对队列中只有1个客户的情况进行单独判断</li></ul><h2 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h2><h3 id="运行状态测试"><a href="#运行状态测试" class="headerlink" title="运行状态测试"></a>运行状态测试</h3><p>参数为：银行总金额 = 10000, 营业时间 = 100, 客户存取金额上限 = 5000, 客户办理业务时间上限 = 15, 客户到达间隔上限 = 30</p><pre class="line-numbers language-none"><code class="language-none">event list:(0,0,0)customerList1:withdrawMoneyList:totalMoney:10000totalTime:0customerNum:0dealingWithdrawMoneyList:0event list:(5,2,0)(11,0,0)customerList1:(0,41,5)withdrawMoneyList:totalMoney:10000totalTime:0customerNum:0dealingWithdrawMoneyList:0event list:(11,0,0)customerList1:withdrawMoneyList:totalMoney:10041totalTime:5customerNum:1dealingWithdrawMoneyList:0event list:(15,2,0)(30,0,0)customerList1:(11,-4169,4)withdrawMoneyList:totalMoney:10041totalTime:5customerNum:1dealingWithdrawMoneyList:0event list:(30,0,0)customerList1:withdrawMoneyList:totalMoney:5872totalTime:9customerNum:2dealingWithdrawMoneyList:0event list:(36,0,0)(36,2,0)customerList1:(30,-1962,6)withdrawMoneyList:totalMoney:5872totalTime:9customerNum:2dealingWithdrawMoneyList:0event list:(36,2,0)(48,0,0)customerList1:(30,-1962,6)(36,3281,2)withdrawMoneyList:totalMoney:5872totalTime:9customerNum:2dealingWithdrawMoneyList:0event list:(38,2,0)(48,0,0)customerList1:(36,3281,2)withdrawMoneyList:totalMoney:3910totalTime:15customerNum:3dealingWithdrawMoneyList:0event list:(48,0,0)customerList1:withdrawMoneyList:totalMoney:7191totalTime:17customerNum:4dealingWithdrawMoneyList:0event list:(55,0,0)(61,2,0)customerList1:(48,-2995,13)withdrawMoneyList:totalMoney:7191totalTime:17customerNum:4dealingWithdrawMoneyList:0event list:(59,0,0)(61,2,0)customerList1:(48,-2995,13)(55,-2391,3)withdrawMoneyList:totalMoney:7191totalTime:17customerNum:4dealingWithdrawMoneyList:0event list:(61,2,0)(86,0,0)customerList1:(48,-2995,13)(55,-2391,3)(59,-292,7)withdrawMoneyList:totalMoney:7191totalTime:17customerNum:4dealingWithdrawMoneyList:0event list:(64,2,0)(86,0,0)customerList1:(55,-2391,3)(59,-292,7)withdrawMoneyList:totalMoney:4196totalTime:30customerNum:5dealingWithdrawMoneyList:0event list:(71,2,0)(86,0,0)customerList1:(59,-292,7)withdrawMoneyList:totalMoney:1805totalTime:39customerNum:6dealingWithdrawMoneyList:0event list:(86,0,0)customerList1:withdrawMoneyList:totalMoney:1513totalTime:51customerNum:7dealingWithdrawMoneyList:0event list:(89,2,0)(93,0,0)customerList1:(86,4718,3)withdrawMoneyList:totalMoney:1513totalTime:51customerNum:7dealingWithdrawMoneyList:0event list:(93,0,0)customerList1:withdrawMoneyList:totalMoney:6231totalTime:54customerNum:8dealingWithdrawMoneyList:0event list:customerList1:(93,-4771,10)withdrawMoneyList:totalMoney:6231totalTime:54customerNum:8dealingWithdrawMoneyList:06BankingSimulation.exe (进程 7008)已退出，代码为 0。按任意键关闭此窗口. . .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序运行中间状态正常</p><h3 id="运行结果测试"><a href="#运行结果测试" class="headerlink" title="运行结果测试"></a>运行结果测试</h3><h4 id="测试1-单队列"><a href="#测试1-单队列" class="headerlink" title="测试1(单队列)"></a>测试1(单队列)</h4><p>参数为：银行总金额 = 10000, 营业时间 = 100000, 客户存取金额上限 = 5000, 客户办理业务时间上限 = 15, 客户到达间隔上限 = 30</p><pre class="line-numbers language-none"><code class="language-none">30BankingSimulation.exe (进程 4284)已退出，代码为 0。按任意键关闭此窗口. . .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在<strong>客户到达间隔上限</strong>远大于<strong>办理业务时间上限</strong>时，平均处理时间趋近于<strong>客户到达间隔上限</strong></p><h4 id="测试2-单队列"><a href="#测试2-单队列" class="headerlink" title="测试2(单队列)"></a>测试2(单队列)</h4><p>参数为：银行总金额 = 10000, 营业时间 = 100000, 客户存取金额上限 = 5000, 客户办理业务时间上限 = 15, 客户到达间隔上限 = 15</p><pre class="line-numbers language-none"><code class="language-none">245BankingSimulation.exe (进程 16512)已退出，代码为 0。按任意键关闭此窗口. . .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在<strong>客户到达间隔上限</strong>与<strong>办理业务时间上限</strong>接近时，平均处理时间远大于<strong>客户到达间隔上限</strong></p><h4 id="测试3-多队列"><a href="#测试3-多队列" class="headerlink" title="测试3(多队列)"></a>测试3(多队列)</h4><p>参数为：银行总金额 = 10000, 营业时间 = 100000, 客户存取金额上限 = 5000, 客户办理业务时间上限 = 15, 客户到达间隔上限 = 15, 队列数 = 5</p><pre class="line-numbers language-none"><code class="language-none">21BankingSimulation.exe (进程 17852)已退出，代码为 0。按任意键关闭此窗口. . .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在<strong>第一种队列增加后</strong>，平均处理时间明显下降</p><h3 id="图形化测试"><a href="#图形化测试" class="headerlink" title="图形化测试"></a>图形化测试</h3><p><img src="image/test.jpg" alt="测试"></p><p>程序能正常模拟出中间过程，并在窗口关闭后自动显示主界面</p><p><img src="image/mainwindow.jpg" alt="主界面"></p><div style="page-break-after: always;"></div><h2 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h2><p>通过这次实验，我熟练掌握了离散事件模拟的问题分析与算法设计，熟悉了队列数据结构的使用，学习了使用qt进行图形化的方法，并学习了自己设计参数进行测试的过程。通过编写这样一个小项目，提高了代码组织能力和问题的发现与解决能力，同时对于生活中的银行排队问题有了更深入的理解。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ul><li><p>Bank.h</p><p>Bank类头文件</p></li><li><p>Bank.cpp</p><p>Bank类的实现，程序的主要模拟功能部分</p></li><li><p>BankAdvanced.h</p><p>BankAdvanced类头文件</p></li><li><p>BankAdvanced.cpp</p><p>BankAdvanced类的实现，程序的附加模拟功能部分，实现多条第一种队列的模拟</p></li><li><p>Quene.h</p><p>Quene类的头文件</p></li><li><p>Quene.cpp</p><p>Quene类的实现，实现队列数据结构</p></li><li><p>step.h</p><p>step类头文件</p></li><li><p>step.cpp</p><p>step类的实现，使用QDialog实现过程模拟</p></li><li><p>step.ui</p><p>qtUi文件，实现过程模拟的界面</p></li><li><p>mainwindow.h</p><p>mainwindow类头文件</p></li><li><p>mainwindow.cpp</p><p>mainwindow类的实现，实现主界面</p></li><li><p>mainwindow.ui</p><p>qtUi文件，实现主界面</p></li><li><p>main.cpp</p><p>实现主函数，调用mainwindow</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 大作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数独</title>
      <link href="/2021/08/08/shu-du/"/>
      <url>/2021/08/08/shu-du/</url>
      
        <content type="html"><![CDATA[<h1 id="程序设计II大作业实验报告"><a href="#程序设计II大作业实验报告" class="headerlink" title="程序设计II大作业实验报告"></a>程序设计II大作业实验报告</h1><h2 id="实验题目与要求"><a href="#实验题目与要求" class="headerlink" title="实验题目与要求"></a>实验题目与要求</h2><p>本次实验主要内容是实现一个简单的数独软件,具体要求如下</p><h3 id="基本功能部分"><a href="#基本功能部分" class="headerlink" title="基本功能部分"></a>基本功能部分</h3><h4 id="程序说明信息以及交互"><a href="#程序说明信息以及交互" class="headerlink" title="程序说明信息以及交互"></a>程序说明信息以及交互</h4><p>程序运行后,显示游戏开始界面,此时点击任意位置进入游戏</p><p><img src="%E5%9B%BE%E7%89%87/%E5%BC%80%E5%A7%8B%E7%95%8C%E9%9D%A2.jpg" alt="开始界面"></p><p>在进入游戏过程中会显示游戏基本操作说明</p><p><img src="%E5%9B%BE%E7%89%87/%E6%8F%90%E7%A4%BA%E4%BF%A1%E6%81%AF.jpg" alt="提示信息"></p><p>其余游戏基本功能在游戏中通过按钮可以清晰展示,<strong>无需额外说明</strong></p><p><img src="%E5%9B%BE%E7%89%87/%E6%B8%B8%E6%88%8F%E7%95%8C%E9%9D%A2.jpg" alt="游戏界面"></p><p>点击退出按钮即可退出游戏</p><h4 id="打印数独"><a href="#打印数独" class="headerlink" title="打印数独"></a>打印数独</h4><p>在游戏过程中数独的当前状态在屏幕左侧动态显示出来,故<strong>无需额外打印数独操作</strong></p><h4 id="输入数独"><a href="#输入数独" class="headerlink" title="输入数独"></a>输入数独</h4><p>点击自定义按钮,进入接受输入数独状态</p><p><img src="%E5%9B%BE%E7%89%87/%E8%BE%93%E5%85%A5%E6%95%B0%E7%8B%AC1.jpg" alt="输入数独1"></p><blockquote><p>输入是合法的（输入全是数字字符,且已填入位置的行列对角线九宫格不重复）</p></blockquote><p>输入过程中,由于按钮的设计,在试图输入不合法的数字时,点击按钮无效,数字不被接受,因此可以保证输入是合法的</p><p><img src="%E5%9B%BE%E7%89%87/%E8%BE%93%E5%85%A5%E6%95%B0%E7%8B%AC2.jpg" alt="输入数独2"></p><blockquote><p>我们可以确定的是,对普通数独（9x9）,目前已知至少要有17 个已知数字才可能有唯一解。</p></blockquote><p>在点击确定后,至少含17个数字的合法数独会被固定成为题目,其中题目的数字用<em><strong>蓝色</strong></em>显示,与用<em><strong>白色</strong></em>显示的玩家填入的数字区分</p><p><img src="%E5%9B%BE%E7%89%87/%E8%BE%93%E5%85%A5%E6%95%B0%E7%8B%AC3.jpg" alt="输入数独3"></p><h4 id="生成数独"><a href="#生成数独" class="headerlink" title="生成数独"></a>生成数独</h4><p>点击新游戏按钮后,程序将会自动生成一个合法数独,此处我使用<strong>挖空法</strong>来保证生成的数独是有解的,但并不保证有<strong>唯一解</strong></p><p><img src="%E5%9B%BE%E7%89%87/%E7%94%9F%E6%88%90%E6%95%B0%E7%8B%AC.jpg" alt="生成数独"></p><p>生成的题目中预先给出的数字个数统一设定为21</p><h4 id="输出数独的解"><a href="#输出数独的解" class="headerlink" title="输出数独的解"></a>输出数独的解</h4><p>点击解答按钮,如果数独有解,输出数独的一个解</p><p><img src="%E5%9B%BE%E7%89%87/%E8%BE%93%E5%87%BA%E8%A7%A3.jpg" alt="输出解"></p><h4 id="填入数字合法情况"><a href="#填入数字合法情况" class="headerlink" title="填入数字合法情况"></a>填入数字合法情况</h4><p>通过点击按钮向数独中填入数字</p><p><img src="%E5%9B%BE%E7%89%87/%E8%BE%93%E5%85%A5%E6%95%B0%E5%AD%971.jpg" alt="输入数字1"></p><p>如果填入数字合法,将会在数独中直接显示</p><p><img src="%E5%9B%BE%E7%89%87/%E8%BE%93%E5%85%A5%E6%95%B0%E5%AD%972.jpg" alt="输入数字2"></p><h4 id="填入数字异常情况"><a href="#填入数字异常情况" class="headerlink" title="填入数字异常情况"></a>填入数字异常情况</h4><blockquote><p>如果试图修改题目固定的数字</p></blockquote><p><strong>蓝色</strong>显示的题目固定的数字方格在点击后也会显示1-9的小按钮,但点击后无任何反应</p><p><img src="%E5%9B%BE%E7%89%87/%E5%90%88%E6%B3%95%E6%95%B0%E5%AD%971.jpg" alt="合法数字1"></p><blockquote><p>如果填入的数字过大</p></blockquote><p>输入数字只能使用输入1-9,不存在填入的数字过大的情况</p><blockquote><p>如果输入的填入位置不合法</p></blockquote><p>输入数字只能使用每个数字方格对应的按钮输入,不存在填入位置不合法的情况</p><blockquote><p>如果填入的数字和已有数字重复</p></blockquote><p>在填入的数字如果与行列对角线九宫格重复,数字将不会被填入,同时所有相同数字会被标为<strong>红色</strong>以提示错误</p><p><img src="%E5%9B%BE%E7%89%87/%E5%90%88%E6%B3%95%E6%95%B0%E5%AD%972.jpg" alt="合法数字2"></p><h4 id="数独提示信息"><a href="#数独提示信息" class="headerlink" title="数独提示信息"></a>数独提示信息</h4><p>点击提示按钮后,程序将会求解当前数独,选取其中的一个解,并按照从左到右,从上到下的顺序,选择第一个未填数字的方格显示答案中应有的数字</p><p><img src="%E5%9B%BE%E7%89%87/%E6%8F%90%E7%A4%BA.jpg" alt="提示"></p><p>可以通过不停的提示获得最终的一个解</p><h4 id="保存游戏状态"><a href="#保存游戏状态" class="headerlink" title="保存游戏状态"></a>保存游戏状态</h4><p>点击存档按钮可以打开存档列表,在游戏中设计了五个存档位置,可以保存5个不同的存档</p><p><img src="%E5%9B%BE%E7%89%87/%E5%AD%98%E6%A1%A31.jpg" alt="存档1"></p><p>在每个存档的右侧有<strong>存档</strong>和<strong>读档</strong>两个按钮,点击存档会显示存档名输入界面</p><p><img src="%E5%9B%BE%E7%89%87/%E5%AD%98%E6%A1%A32.jpg" alt="存档2"></p><p>在此界面可以使用键盘输入存档名字,存档名字只可以为英文大写字母,并且不支持删除字母</p><p><img src="%E5%9B%BE%E7%89%87/%E5%AD%98%E6%A1%A33.jpg" alt="存档3"></p><p>点击确定后存档保存完成,存档名输入界面和存档列表淡出,恢复到数独界面</p><p>如果保存的存档位置已有存档,将会覆盖原先的存档,不同存档的存档名可以相同</p><h4 id="加载游戏状态"><a href="#加载游戏状态" class="headerlink" title="加载游戏状态"></a>加载游戏状态</h4><p>点击存档按钮可以打开存档列表,点击读档即可载入先前保存的存档</p><p><img src="%E5%9B%BE%E7%89%87/%E8%AF%BB%E6%A1%A3.jpg" alt="读档"></p><p>在存档名中会记录存档保存的时间,存档中存有题目以及玩家输入的数字</p><h3 id="扩展部分"><a href="#扩展部分" class="headerlink" title="扩展部分"></a>扩展部分</h3><h4 id="图形化界面"><a href="#图形化界面" class="headerlink" title="图形化界面"></a>图形化界面</h4><p>图形化界面用<code>Unity 2021.1.7f1c1 (64-bit)</code>实现,脚本语言采用<code>C#</code></p><h4 id="高级搜索技巧"><a href="#高级搜索技巧" class="headerlink" title="高级搜索技巧"></a>高级搜索技巧</h4><p>在基础的DFS算法之外,实现了GBFS(贪婪最佳优先算法)与DLX(跳舞链)两种高级搜索算法,都可以独立完成对对角线数独的求解</p><p><img src="%E5%9B%BE%E7%89%87/%E9%AB%98%E7%BA%A7%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A71.jpg" alt="高级搜索技巧1"></p><p>设计了四个选项按钮,在解答前选择不同的选项,再点击解答按钮将会采用不同的算法进行求解,同时四个按钮在同一时刻仅能有一个被选中</p><p><img src="%E5%9B%BE%E7%89%87/%E9%AB%98%E7%BA%A7%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A72.jpg" alt="高级搜索技巧2"></p><blockquote><p>Issues #90<br><br>zhiyuan @PB17121741<br><br>这一得分点的设置目的主要是鼓励同学们了解通用的高级搜索技术,并将其进行具体实现。对于特化的一些解数独的算法其实偏离了我们的设计目的。如果使用dlx算法作为高级算法提交,首先需要额外增加数独类型开关,指定数独为不考虑对角线的数独；其次实现dlx算法解不考虑对角线的数独。</p></blockquote><p>实际上,DLX算法可以实现对<strong>对角线数独</strong>的求解,因此未增加数独类型开关,而是实现了DLX对对角线数独的求解</p><h4 id="多线程优化"><a href="#多线程优化" class="headerlink" title="多线程优化"></a>多线程优化</h4><p>使用多线程技术,采用DLX算法并行搜索输出数独全部的解</p><p><img src="%E5%9B%BE%E7%89%87/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%8C%961.jpg" alt="多线程优化1"></p><p>选择DLX多线程选项后点击解答,会在数独右侧显示<strong>上一个</strong>和<strong>下一个</strong>两个按钮</p><p><img src="%E5%9B%BE%E7%89%87/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%8C%962.jpg" alt="多线程优化2"></p><p>点击<strong>下一个</strong>后可以开始查看数独所有可能的解</p><p><img src="%E5%9B%BE%E7%89%87/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%8C%963.jpg" alt="多线程优化3"></p><p>点击<strong>上一个</strong>和<strong>下一个</strong>可以在不同的解之间进行切换</p><p><img src="%E5%9B%BE%E7%89%87/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%8C%964.jpg" alt="多线程优化4"></p><h2 id="具体设计"><a href="#具体设计" class="headerlink" title="具体设计"></a>具体设计</h2><p>该部分<strong>简单介绍</strong>实验中的函数拆分与图形化实现的细节,例如,包括哪些函数,函数参数是什么,作用是什么等。扩展功能的介绍等。</p><h3 id="数独基本单元的构造"><a href="#数独基本单元的构造" class="headerlink" title="数独基本单元的构造"></a>数独基本单元的构造</h3><p>使用预制体<code>prefab</code>来构造数独方格,然后进行实例化</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">for (int i = 0; i &lt; 9; i++)    for (int j = 0; j &lt; 9; j++)    {        Data.unitarray[i, j] = Instantiate(prefab);        Data.unitarray[i, j].transform.GetComponent&lt;Unit&gt;().i = i; Data.unitarray[i, j].transform.GetComponent&lt;Unit&gt;().j = j;        Data.unitarray[i, j].GetComponent&lt;RectTransform&gt;().localPosition = new Vector3((j / 3) * 20 + 95 * j + 1920 / 2 - 700, -(i / 3) * 20 - 95 * i + 1080 / 2 + 420);        Data.unitarray[i, j].transform.SetParent(father);    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数独方格本身是一个按钮,又包含9个小按钮来支持数字的修改</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public void ChangevalueByButton(int number)//通过按钮修改单元的值{    int i = transform.GetComponent&lt;Unit&gt;().i, j = transform.GetComponent&lt;Unit&gt;().j;    if (Data.question[i][j] != 0) return;    if (Sudoku.put(ref Data.condition, i, j, number))        Sudoku.printSudoku(ref Data.condition);    else    {        Sudoku.printSudoku(ref Data.condition);        for(int m=0;m&lt;9;m++)            for(int n=0;n&lt;9;n++)                if(Data.condition[m][n]==number)                     Data.unitarray[m,n].transform.Find("Value").GetComponent&lt;Text&gt;().color = new Color(1, (50f / 255), 0);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时支持外部函数调用来修改数字</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public void Changevalue(int number)//修改单元的值{    int i = transform.GetComponent&lt;Unit&gt;().i, j = transform.GetComponent&lt;Unit&gt;().j;    if (number == 0)        transform.Find("Value").GetComponent&lt;Text&gt;().text = "";    else        transform.Find("Value").GetComponent&lt;Text&gt;().text = number.ToString();    if (Data.question[i][j] == 0)        transform.Find("Value").GetComponent&lt;Text&gt;().color = new Color(1, 1, 1);    else        transform.Find("Value").GetComponent&lt;Text&gt;().color = new Color((71f / 255), (243f / 255), 1);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>增加了对鼠标右键点击的监听,通过鼠标右键来删除已填写的数字</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">void Start(){    rightClick.AddListener(new UnityAction(ButtonRightClick));}public void OnPointerClick(PointerEventData eventData){    if (eventData.button == PointerEventData.InputButton.Right)        rightClick.Invoke();}private void ButtonRightClick()//右键删除数字{    int i = transform.GetComponent&lt;Unit&gt;().i, j = transformGetComponent&lt;Unit&gt;().j;    if (Data.question[i][j] != (char)0) return;    Data.condition[i][j] = (char)0;    Sudoku.printSudoku(ref Data.condition);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据的存储"><a href="#数据的存储" class="headerlink" title="数据的存储"></a>数据的存储</h3><p>使用静态类<code>Data</code>来实现对基本变量的统一调度</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">static public GameObject[,] unitarray = new GameObject[10, 10];static public List&lt;List&lt;char&gt;&gt; question = new List&lt;List&lt;char&gt;&gt;(9);static public List&lt;List&lt;char&gt;&gt; condition = new List&lt;List&lt;char&gt;&gt;(9);static public List&lt;List&lt;char&gt;&gt; solution = new List&lt;List&lt;char&gt;&gt;(9);static public int now;//当前sudoku的解的序数,从1开始static public int sudokunum;//当前的sudoku的数组下标,从0开始static public List&lt;DLX&gt; sudoku = new List&lt;DLX&gt;();static public List&lt;List&lt;List&lt;int&gt;&gt;&gt; matrix = new List&lt;List&lt;List&lt;int&gt;&gt;&gt;();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时编写了对<code>List&lt;List&lt;char&gt;&gt;</code>进行初始化与拷贝的函数</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">static public void initboard(ref List&lt;List&lt;char&gt;&gt; board)//初始化{    board.Clear();    for (int i = 0; i &lt; 9; i++)    {        List&lt;char&gt; row = new List&lt;char&gt; { (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0 };        board.Add(row);    }}static public void copyboard(ref List&lt;List&lt;char&gt;&gt; des, refList&lt;List&lt;char&gt;&gt; sorce)//复制{    des.Clear();    for (int i = 0; i &lt; 9; i++)    {        List&lt;char&gt; row = new List&lt;char&gt;();        for (int j = 0; j &lt; 9; j++)            row.Add(sorce[i][j]);        des.Add(row);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数独的基本本功能"><a href="#数独的基本本功能" class="headerlink" title="数独的基本本功能"></a>数独的基本本功能</h3><h4 id="当前数独状态的输出"><a href="#当前数独状态的输出" class="headerlink" title="当前数独状态的输出"></a>当前数独状态的输出</h4><p>通过调用数独方格的<code>public void Changevalue(int number)</code>来实现输出</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">static public void printSudoku(ref List&lt;List&lt;char&gt;&gt; board)//输出数独{    for (int i = 0; i &lt; 9; i++)        for (int j = 0; j &lt; 9; j++)            Data.unitarray[i, j].GetComponent&lt;Unit&gt;().Changevalue((int)(board[i][j]));}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="dfs算法求解数独"><a href="#dfs算法求解数独" class="headerlink" title="dfs算法求解数独"></a>dfs算法求解数独</h4><p>使用深度优先搜索完成对数独的求解</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">static private void dfs(ref List&lt;List&lt;char&gt;&gt; board, int pos)//深度优先索{    if (pos == spaces.Count)    {        valid = true;        return;    }    int i = spaces[pos].Key, j = spaces[pos].Value;    int mask = line[i] | column[j] | block[i / 3, j / 3];    if (i == j) mask |= diagonal[0]; if (i + j == 8) mask |= diagonal[1];//x数独    mask = ~(mask) &amp; 0x1ff;    for (; mask != 0 &amp;&amp; !valid; mask &amp;= (mask - 1))    {        int digit = __builtin_ctz(mask);        flip(i, j, digit);        board[i][j] = (char)(digit + 1);        dfs(ref board, pos + 1);        flip(i, j, digit);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为提高效率,对数独行列九宫格对角线的状态进行<code>状态压缩</code></p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">static private int __builtin_ctz(int x)//获取二进制数末尾的0的个数{    int digit = 0;    while ((x &amp; (1 &lt;&lt; digit)) == 0) digit++;    return digit;}static private void flip(int i, int j, int digit)//改变某一位状态{    line[i] ^= (1 &lt;&lt; digit);    column[j] ^= (1 &lt;&lt; digit);    block[i / 3, j / 3] ^= (1 &lt;&lt; digit);    if (i == j) diagonal[0] ^= 1 &lt;&lt; digit; if (i + j == 8) diagonal[1] ^= 1 &lt;&lt; digit;//x数独}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="提示功能"><a href="#提示功能" class="headerlink" title="提示功能"></a>提示功能</h4><p>通过求解数独再选取第一个空格填入正确答案来实现提示</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">static public KeyValuePair&lt;int, int&gt; hint(ref List&lt;List&lt;char&gt;&gt; board)/提示{    KeyValuePair&lt;int, int&gt; pos = new KeyValuePair&lt;int, int&gt;(-1, -1);    if (isfinish(ref board)) return pos;    for (int i = 0; i &lt; 9; i++)        for (int j = 0; j &lt; 9; j++)            if (pos.Key == -1 &amp;&amp; board[i][j] == (char)0) pos = new KeyValuePair&lt;int, int&gt;(i, j);    if (solve_Sudoku(ref board))        return pos;    return new KeyValuePair&lt;int, int&gt;(-1, -1);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="整个数独合法性的判断"><a href="#整个数独合法性的判断" class="headerlink" title="整个数独合法性的判断"></a>整个数独合法性的判断</h4><p>逐个将数字填入,并更新行列九宫格对角线的状态,直到数字填完或出现矛盾为止</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">static public bool judge(ref List&lt;List&lt;char&gt;&gt; board, bool output)//整数独判断{    for (int i = 0; i &lt; 9; i++)        for (int j = 0; j &lt; 9; j++)            if (board[i][j] &lt; 0 || board[i][j] &gt; 9)                return false;    Array.Clear(line, 0, line.Length);    Array.Clear(column, 0, column.Length);    Array.Clear(block, 0, block.Length);    Array.Clear(diagonal, 0, diagonal.Length);//x数独    valid = false;    for (int i = 0; i &lt; 9; ++i)        for (int j = 0; j &lt; 9; ++j)            if (board[i][j] != 0)            {                int digit = board[i][j] - 1;                int mask = line[i] | column[j] | block[i / 3, j / 3];                if (i == j) mask |= diagonal[0]; if (i + j == 8) mask |= diagonal[1];//x数独                if (((1 &lt;&lt; digit) &amp; mask) != 0)                    return false;                flip(i, j, digit);            }    return true;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="填入数字"><a href="#填入数字" class="headerlink" title="填入数字"></a>填入数字</h4><p>将数字填入后调用<code>static public bool judge(ref List&lt;List&lt;char&gt;&gt; board, bool output)</code>进行判断</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">static public bool put(ref List&lt;List&lt;char&gt;&gt; board, int line, intcolumn, int number)//填入数字{    board[line][column] = (char)number;    if (!judge(ref board, true))    {        board[line][column] = (char)0;        return false;    }    return true;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="生成数独-1"><a href="#生成数独-1" class="headerlink" title="生成数独"></a>生成数独</h4><p>采用挖空法生成数独以保证数独有解,首先随机填入6个数字,然后对数独进行求解,求解完成后再随机挖去50个数字得到最终的题目</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">static public void generate(ref List&lt;List&lt;char&gt;&gt; board)//生成数独{    int step = 0;    while (true)    {        int number, line, column;        while (step &lt;= 6)        {            number = ra.Next(1, 9); line = ra.Next(0, 8); column = raNext(0, 8);            board[line][column] = (char)(number);            if (!judge(ref board, false)) board[line][column] = (char)0;            else step++;        }        if (solve_Sudoku(ref board)) break;    }    for (step = 1; step &lt;= 60; step++)    {        int line = ra.Next(0, 9), column = ra.Next(0, 9);        if (board[line][column] == 0) step--;        board[line][column] = (char)(0);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="判断数独是否解答完毕"><a href="#判断数独是否解答完毕" class="headerlink" title="判断数独是否解答完毕"></a>判断数独是否解答完毕</h4><p>逐个判断每个格子是否都有数字填入,因不合法的数字的填入不被允许,因此数字全部填入后一定是满足题目的合法解</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">static public bool isfinish(ref List&lt;List&lt;char&gt;&gt; board)//判断游戏是否完成{    for (int i = 0; i &lt; 9; ++i)        for (int j = 0; j &lt; 9; ++j)            if (board[i][j] == 0)                return false;    return true;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>Update()</code>动态检测数独是否完成</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">void Update()//检测游戏是否完成{    if (Sudoku.isfinish(ref Data.condition))        transform.GetComponent&lt;Animator&gt;().SetBool("End", true);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="存档功能"><a href="#存档功能" class="headerlink" title="存档功能"></a>存档功能</h3><p>存档功能依托于Unity的本地持久化类<code>PlayerPrefs</code>,但它不能存储数组,因此编写了<code>PlayerPrefsX</code>类来实现对数独的二维数字的存取</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public static class PlayerPrefsX{    public static void SetInt2Array(string key, int[,] int2Array)//保存二维数组    {        int[] intArray = new int[81];        for (int i = 0; i &lt; 9; i++)            for (int j = 0; j &lt; 9; j++)                intArray[i * 9 + j] = int2Array[i, j];        SetIntArray(key, intArray);    }    public static int[,] GetInt2Array(string key)//获取二维数组    {        int[] intArray = GetIntArray(key);        if (intArray.Length == 0)        {            intArray = new int[81];            Array.Clear(intArray, 0, intArray.Length);        }        int[,] int2Array = new int[10, 10];        for (int i = 0; i &lt; 9; i++)            for (int j = 0; j &lt; 9; j++)                int2Array[i, j] = intArray[i * 9 + j];        return int2Array;    }    public static bool SetIntArray(string key, int[] intArray)//保存一维数组    {        if (intArray.Length == 0) return false;        System.Text.StringBuilder sb = new System.Text.StringBuilder();        for (int i = 0; i &lt; intArray.Length - 1; i++)            sb.Append(intArray[i]).Append("|");        sb.Append(intArray[intArray.Length - 1]);        try { PlayerPrefs.SetString(key, sb.ToString()); }        catch { return false; }        return true;    }    public static int[] GetIntArray(string key)//获取一维数组    {        if (PlayerPrefs.HasKey(key))        {            string[] stringArray = PlayerPrefs.GetString(key).Split("|"[0]);            int[] intArray = new int[stringArray.Length];            for (int i = 0; i &lt; stringArray.Length; i++)                intArray[i] = Convert.ToInt32(stringArray[i]);            return intArray;        }        return new int[0];    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现了读取时间并将其格式化为字符串的功能</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public static String time() //获取当前时间{    int hour = DateTime.Now.Hour, minute = DateTime.Now.Minute, second = DateTime.Now.Second,    year = DateTime.Now.Year, month = DateTime.Now.Month, day = DateTime.Now.Day;    return string.Format("{0:D2}:{1:D2}:{2:D2} " + "{3:D4}/{4:D2}/{5:D2}", hour, minute, second, year, month, day);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过<code>Keycode</code>枚举读取用户输入的存档名字母</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">if (inputnumber != 0)    if (Input.anyKeyDown)        foreach (KeyCode keyCode in Enum.GetValues(typeof(KeyCode)))            if (Input.GetKeyDown(keyCode) &amp;&amp; ((int)keyCode) &gt;= 97 &amp;&amp; ((int)keyCode) &lt;= 122)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="GBFS算法的实现"><a href="#GBFS算法的实现" class="headerlink" title="GBFS算法的实现"></a>GBFS算法的实现</h3><p>在DFS的每一步都对当前局面进行判断,启发式的寻找可行状态数最少的空继续迭代,同时也能够在最小状态数为0时回溯</p><p>使用<code>static private KeyValuePair&lt;int, int&gt; find(ref List&lt;List&lt;char&gt;&gt; board)</code>启发式寻找下一层迭代的最优位置</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">static private KeyValuePair&lt;int, int&gt; find(ref List&lt;List&lt;char&gt;&gt; board){    int max = int.MaxValue; KeyValuePair&lt;int, int&gt; pos = new KeyValuePair&lt;int, int&gt;(-1, -1);    for (int i = 0; i &lt; 9; i++)        for (int j = 0; j &lt; 9; j++)        {            if (board[i][j] == 0)            {                int mask = line[i] | column[j] | block[i / 3, j / 3];                if (i == j) mask |= diagonal[0]; if (i + j == 8) mask |= diagonal[1];//x数独                mask = ~(mask) &amp; 0x1ff;                if (mask == 0) return new KeyValuePair&lt;int, int&gt;(-1, -1);                int num = 1;                while ((mask &amp;= (mask - 1)) != 0) num++;                if (num == 1) return new KeyValuePair&lt;int, int&gt;(i, j);                if (num &lt; max) pos = new KeyValuePair&lt;int, int&gt;(i, j);            }        }    return pos;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DLX算法实现"><a href="#DLX算法实现" class="headerlink" title="DLX算法实现"></a>DLX算法实现</h3><blockquote><p>在计算机科学中,X算法可用来求解精确覆盖问题。此名称最早在高德纳的论文《舞蹈链》中出现,他认为此算法是“试错法中最显而易见”的。就技术而言,X算法是一个深度优先的不确定性回溯算法。由于X算法是一个解决精确覆盖问题的简洁方法,高德纳希望通过该算法体现舞蹈链数据结构的高效性,他把使用后者的X算法称为DLX。</p></blockquote><p>DLX算法的基本框架如下</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public class Node{    public Node up; public Node down; public Node left; public Node right; public Node colRoot; public Node rowRoot;    public int Num; public int Size;//行数 列元素数    public Node(int i = -1) //构造函数    {        Num = i;        Size = 0;    }};private Node Head;private List&lt;int&gt; result = new List&lt;int&gt;();private int _row, _col;public List&lt;List&lt;int&gt;&gt; solve = new List&lt;List&lt;int&gt;&gt;();public DLX(ref List&lt;List&lt;int&gt;&gt; matrix, int m, int n)//构造函数{    _row = m;    _col = n;    Head = new Node();    Head.up = Head;    Head.down = Head;    Head.right = Head;    Head.left = Head;    init();    link(ref matrix);}private void init()//初始化行列{    Node newNode;    for (int ix = 0; ix &lt; _col; ++ix) //表头向后构造列对象    {        newNode = new Node();        newNode.up = newNode;        newNode.down = newNode;        newNode.right = Head.right;        newNode.left = Head;        newNode.right.left = newNode;        Head.right = newNode;    }    for (int ix = 0; ix &lt; _row; ++ix) //表头向下构造行对象    {        newNode = new Node(_row - ix);        newNode.down = Head.down;        newNode.up = Head;        newNode.down.up = newNode;        Head.down = newNode;    }}private void link(ref List&lt;List&lt;int&gt;&gt; matrix)//连接各个节点{    Node current_row = Head, current_col, newNode, current; //当前行对象,当前列对象,新节点,当前节点    for (int row = 0; row &lt; _row; ++row)    {        current_row = current_row.down; current_col = Head;        for (int col = 0; col &lt; _col; ++col)        {            current_col = current_col.right;            if (matrix[row][col] == 0)                continue;            newNode = new Node();            newNode.colRoot = current_col;            newNode.rowRoot = current_row;            newNode.down = current_col;            newNode.up = current_col.up;            newNode.up.down = newNode;            current_col.up = newNode;            if (current_row.Size == 0)            {                current_row.right = newNode;                newNode.left = newNode;                newNode.right = newNode;                current_row.Size++;            }            current = current_row.right;            newNode.left = current.left;            newNode.right = current;            newNode.left.right = newNode;            current.left = newNode;            current_col.Size++;        }    }}private void cover(ref Node cRoot) //覆盖列{    cRoot.left.right = cRoot.right;    cRoot.right.left = cRoot.left; //删除该列对象    Node i = cRoot.down, j;    while (i != cRoot)    {        j = i.right;        while (j != i)        {            j.down.up = j.up;            j.up.down = j.down;            j.colRoot.Size--;            j = j.right;        }        i = i.down;    }}private void recover(ref Node cRoot) //恢复列{    Node i = cRoot.up, j;    while (i != cRoot)    {        j = i.left;        while (j != i)        {            j.colRoot.Size++;            j.down.up = j;            j.up.down = j;            j = j.left;        }        i = i.up;    }    cRoot.right.left = cRoot;    cRoot.left.right = cRoot;}public bool Search(int k = 0)//搜索求解{    if (Head.right == Head)        return true;    Node cRoot = new Node(), c;    int minSize = int.MaxValue;    for (c = Head.right; c != Head; c = c.right) //启发式搜索    {        if (c.Size &lt; minSize)        {            minSize = c.Size;            cRoot = c;            if (minSize == 1)                break;            if (minSize == 0)                return false;        }    }    cover(ref cRoot);    Node current_row, current;    for (current_row = cRoot.down; current_row != cRoot; current_row = current_row.down)    {        result.Add(current_row.rowRoot.Num);        for (current = current_row.right; current != current_row; current = current.right)        {            cover(ref current.colRoot);        }        if (Search(k + 1))            return true;        for (current = current_row.left; current != current_row; current = current.left)            recover(ref current.colRoot);        result.RemoveAt(result.Count - 1);    }    recover(ref cRoot);    return false;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在DLX算法中,将精准覆盖问题抽象成从某个01矩阵中选取某些行,使得得到的子矩阵的每一列都有且仅有一个1</p><p>求解数独问题也可以看成一个精准覆盖问题,数独的每个限制条件都可以当作矩阵的一列,分别有:数独每一格都有数字(81)+行不重复(81)+列不重复(81)+九宫格不重复(81)+对角线不重复(18)=342列,在数独的一个格子填入的一个数字可以抽象成矩阵的一行,这样就可以将对角线数独转化为01矩阵从而用DLX算法进行求解</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">static public List&lt;List&lt;int&gt;&gt; sudoku2matrix(string problem) //将数独转为01矩阵{    List&lt;List&lt;int&gt;&gt; matrix = new List&lt;List&lt;int&gt;&gt;();    for (int ix = 0; ix &lt; 81; ++ix)    {        int val = problem[ix];        List&lt;int&gt; current_row = new List&lt;int&gt;();        //for (int i = 1; i &lt;= 324; i++) current_row.Add(0);        for (int i = 1; i &lt;= 342; i++) current_row.Add(0); //x数独        if (val != 0)        {            current_row[ix] = 1;            current_row[81 + ix / 9 * 9 + val - 1] = 1;            current_row[162 + ix % 9 * 9 + val - 1] = 1;            current_row[243 + (ix / 9 / 3 * 3 + ix % 9 / 3) * 9 + val - 1] = 1;            if (ix / 9 == ix % 9)//x数独                current_row[324 + val - 1] = 1; //x数独            if (ix / 9 + ix % 9 == 8)//x数独                current_row[333 + val - 1] = 1; //x数独            matrix.Add(current_row);            continue;        }        for (int jx = 0; jx &lt; 9; ++jx)        {            List&lt;int&gt; current_row2 = new List&lt;int&gt;();            //for (int i = 1; i &lt;= 324; i++) current_row2.Add(0);             for (int i = 1; i &lt;= 342; i++) current_row2.Add(0); //x数独            current_row2[ix] = 1;            current_row2[81 + ix / 9 * 9 + jx] = 1;            current_row2[162 + ix % 9 * 9 + jx] = 1;            current_row2[243 + (ix / 9 / 3 * 3 + ix % 9 / 3) * 9 + jx] = 1;            if (ix / 9 == ix % 9)//x数独                current_row2[324 + jx] = 1; //x数独            if (ix / 9 + ix % 9 == 8)//x数独                current_row2[333 + jx] = 1; //x数独            matrix.Add(current_row2);        }    }    return matrix;}public List&lt;int&gt; matrix2sudoku(ref List&lt;List&lt;int&gt;&gt; matrix, List&lt;int&gt;result) //将01矩阵转换为数独（也可以static）{    List&lt;int&gt; solution = new List&lt;int&gt;();    for (int i = 1; i &lt;= 81; i++) solution.Add(0);    for (int ix = 0; ix &lt; 81; ++ix)    {        List&lt;int&gt; current = matrix[result[ix] - 1];        int pos = 0, val = 0;        for (int jx = 0; jx &lt; 81; ++jx)        {            if (current[jx] == 1)                break;            ++pos;        }        for (int kx = 81; kx &lt; 162; ++kx)        {            if (current[kx] == 1)                break;            ++val;        }        solution[pos] = val % 9 + 1;    }    return solution;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多线程求全部解"><a href="#多线程求全部解" class="headerlink" title="多线程求全部解"></a>多线程求全部解</h3><p>找到数独的第一个空格,分别填入1-9,判断合法性后,对合法的情况分别用DLX算法求解</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">static public void solve()//测试函数{    for (int i = 0; i &lt; 9; i++)        for (int j = 0; j &lt; 9; j++)            if (Data.solution[i][j] == 0)            {                for (int k = 1; k &lt;= 9; k++)                {                    Data.solution[i][j] = (char)k;                    if (Sudoku.judge(ref Data.solution, false))                    {                        List&lt;List&lt;char&gt;&gt; branch = new List&lt;List&lt;char&gt;&gt;();//复制solution中的内容到branch,避免不同线程读取时solution改变                        Data.initboard(ref branch);                        for(int m=0;m&lt;9;m++)                            for(int n=0;n&lt;9;n++)                                branch[m][n]=Data.solution[m][n];                        Thread thread = new Thread(new ParameterizedThreadStart(solve));                        thread.Start(branch);                    }                }                return;//仅通过第一个空格来分支多线程            }}static void solve(object obj)//求解线程函数{    List&lt;List&lt;char&gt;&gt; solution=(List&lt;List&lt;char&gt;&gt;)obj;    List&lt;List&lt;int&gt;&gt; current = null;    DLX sudoku=Sudoku.solve_SudokuMuliti(ref solution, ref current);    if(sudoku.solve.Count!=0)    {           Data.sudoku.Add(sudoku);        Data.matrix.Add(current);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="界面的设计"><a href="#界面的设计" class="headerlink" title="界面的设计"></a>界面的设计</h3><p>数独显示在游戏界面左侧,按钮显示在界面右侧,通过Unity中的<code>Animation</code>实现对UI元素的调动</p><p>流程图如下所示</p><p><img src="%E5%9B%BE%E7%89%87/%E6%B5%81%E7%A8%8B.jpg" alt="流程"></p><p>进入游戏后首先进入开始界面,然后进入游戏界面</p><p>在游戏胜利后进入游戏结束界面,然后重新返回游戏界面,这是三角小循环</p><p>在点击存档后进入存档界面,保存存档后回到游戏界面,这是菱形小循环</p><h2 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h2><p>该部分介绍实验中遇到的bug与报错</p><h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><ul><li><p>报错内容</p><p>  <code>ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.</code></p></li><li><p>报错原因</p><p>  C#中的<code>List&lt;T&gt;</code>泛型类需要初始化后才能直接使用数组下标访问</p></li><li><p>解决方案</p><p>  在使用数组下标访问前,先用0填充进行初始化</p></li></ul><h3 id="bug1"><a href="#bug1" class="headerlink" title="bug1"></a>bug1</h3><ul><li><p>bug内容</p><p>  将<code>List&lt;List&lt;char&gt;&gt;&gt;</code>进行复制后发现修改复制后的内容会影响原对象的内容</p></li><li><p>bug原因</p><p>  C#中的<code>List&lt;T&gt;</code>泛型类中的T若仍是<code>&lt;List&lt;char&gt;&gt;</code>会采用传递引用</p></li><li><p>解决方案</p><p>  不采用直接赋值的方式,而是采用对元素逐个赋值的方式进行复制</p></li></ul><h3 id="bug2"><a href="#bug2" class="headerlink" title="bug2"></a>bug2</h3><ul><li><p>bug内容</p><p>  使用多线程进行求解时发现不同线程求出相同的解</p></li><li><p>bug原因</p><p>  不同线程的执行顺序并不依赖于调用顺序,在主线程对题目进行修改时,调用的线程可能还没能完成对题目的读取,这样会造成两个先后调用的线程本应读取不同的题目却读取了相同的题目</p></li><li><p>解决方案</p><p>  将题目复制成为一个新对象,传递给线程,这样就解除了不同线程对同一个对象进行读取的问题</p></li></ul><h2 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h2><p>该部分介绍实验中的收获。</p><p>在这次实验中熟悉了<code>DFS</code>算法的使用,新学习了<code>GBFS</code>与<code>DLX</code>两种高级搜索算法,学习了<code>Unity</code>的基本使用方法,同时对Unity所使用的<code>C#</code>语言有了一定的了解,通过与本学期所学习的<code>C++</code>进行对比,对面向对象的编程语言有了深入理解,学习了C++与C#中<code>多线程</code>的调用与执行方式,通过编写这样一个小项目,也提高了代码组织能力和问题的发现与解决能力</p>]]></content>
      
      
      <categories>
          
          <category> 大作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>砖块大战</title>
      <link href="/2021/02/01/zhuan-kuai-da-zhan/"/>
      <url>/2021/02/01/zhuan-kuai-da-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机程序设计课程实践项目报告C（C-）语言版砖块大战"><a href="#计算机程序设计课程实践项目报告C（C-）语言版砖块大战" class="headerlink" title="计算机程序设计课程实践项目报告C（C++）语言版砖块大战"></a>计算机程序设计课程实践项目报告C（C++）语言版砖块大战</h1><p>作者：hyjwpk/MAX-WILL-WIN</p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>本项目使用Visual Studio环境编写，使用EasyX库实现，通过玩家对横板的控制实现游戏互动，使玩家在控制小球击打砖块的过程中获得愉悦感，本游戏新增现代元素及创新性设计，可以为玩家提供新的游戏体验。</p><p>关键词：横板任意移动，音效生动有趣，可调游戏难度，可获游戏道具，生命上限、时间上限、游戏排行设计精美。</p><h2 id="0-项目结构"><a href="#0-项目结构" class="headerlink" title="0 项目结构"></a>0 项目结构</h2><pre class="line-numbers language-none"><code class="language-none">│  blocks-battle.sln                    # visual studio 解决方案│  cmd.c                                # 控制台版本│├─blocks-battle                         # c++源代码│  │  ball.cpp│  │  ball.h│  │  blocks-battle.aps│  │  blocks-battle.cpp│  │  blocks-battle.h│  │  blocks-battle.rc│  │  blocks-battle.vcxproj│  │  blocks-battle.vcxproj.filters│  │  blocks-battle.vcxproj.user│  │  board.cpp│  │  board.h│  │  brick.cpp│  │  brick.h│  │  button.cpp│  │  button.h│  │  color.cpp│  │  color.h│  │  cpp.hint│  │  define.h│  │  difficulty.cpp│  │  difficulty.h│  │  exit.cpp│  │  exit.h│  │  flash.cpp│  │  flash.h│  │  game.cpp│  │  game.h│  │  heart.cpp│  │  heart.h│  │  highscore.txt│  │  load.cpp│  │  load.h│  │  menu.cpp│  │  menu.h│  │  mouse.cpp│  │  mouse.h│  │  music.cpp│  │  music.h│  │  musicbtn.cpp│  │  musicbtn.h│  │  pch.cpp│  │  pch.h│  │  resource.h│  │  save.txt│  │  script.cpp│  │  script.h│  │  settings.cpp│  │  settings.h│  │  stage.cpp│  │  stage.h│  │  star.cpp│  │  star.h│  │  start.cpp│  │  start.h│  │  time.cpp│  │  time.h│  │  top.cpp│  │  top.h│  ││  └─Debug                              # visual studio 编译文件                             │└─Debug                                 # 可执行文件编译目录    │  blocks-battle.exe    │  blocks-battle.exe.lastcodeanalysissucceeded    │  blocks-battle.pdb    │  highscore.txt    │  save.txt    │    └─resourses                         # 资源文件        ├─document        │      stage1.txt        │      stage2.txt        │      stage3.txt        │      stage4.txt        │      stage5.txt        │      stage6.txt        │      stage7.txt        │      stage8.txt        │        ├─picture        │      background.jpg        │      heart.png        │      heartmask.png        │      tflash.png        │      tflashmask.png        │      球.ico        │        └─sound                background.mp3                crash.mp3                dead.mp3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-项目概述"><a href="#1-项目概述" class="headerlink" title="1 项目概述"></a>1 项目概述</h2><h3 id="1-1-项目特点"><a href="#1-1-项目特点" class="headerlink" title="1.1 项目特点"></a>1.1 项目特点</h3><p>本游戏是以Visual Studio 2019/EasyX为开发环境开发出来的在Windows界面下的C/C++语言砖块弹球碰撞游戏，游戏画面流畅，操作简便，思路新颖，实现了完整的游戏流程，采用EasyX实现图形化，改善了游戏界面。</p><h3 id="1-2-项目设计"><a href="#1-2-项目设计" class="headerlink" title="1.2 项目设计"></a>1.2 项目设计</h3><p>打砖块游戏是经典的休闲游戏，通过方向键或鼠标的控制，让小球通过不断反弹消除砖块来获取分数。本项目通过C/C++语言来实现游戏功能，同时在传统的打砖块游戏基础上加入新的元素，提升游戏可玩性。</p><h4 id="1-2-1-功能分析"><a href="#1-2-1-功能分析" class="headerlink" title="1.2.1 功能分析"></a>1.2.1 功能分析</h4><p>(1)单机闯关</p><p>(2)存档保存</p><p>(3)难度调节</p><p>(4)游戏道具</p><p>(5)分数排行</p><h4 id="1-2-2-性能分析"><a href="#1-2-2-性能分析" class="headerlink" title="1.2.2 性能分析"></a>1.2.2 性能分析</h4><p>(1)游戏画面流畅</p><p>(2)游戏画面精美</p><p>(3)物理模型良好</p><h3 id="1-3-小组分工"><a href="#1-3-小组分工" class="headerlink" title="1.3 小组分工"></a>1.3 小组分工</h3><h4 id="1-3-1-hyjwpk"><a href="#1-3-1-hyjwpk" class="headerlink" title="1.3.1 hyjwpk"></a>1.3.1 hyjwpk</h4><p>(1)游戏按钮</p><p>(2)游戏排行</p><p>(3)游戏地图</p><p>(4)得分机制</p><p>(5)背景音乐</p><p>(6)背景与过场</p><p>(7)道具掉落概率</p><p>(8)资源文件的封装</p><p>(9)多线程鼠标检测</p><p>(10)鼠标与键盘操控</p><p>(11)存档的写入与读取</p><h4 id="1-3-2-MAX-WILL-WIN"><a href="#1-3-2-MAX-WILL-WIN" class="headerlink" title="1.3.2 MAX-WILL-WIN"></a>1.3.2 MAX-WILL-WIN</h4><p>(1)游戏道具</p><p>(2)游戏分数</p><p>(3)游戏生命</p><p>(4)游戏说明</p><p>(5)计时模块</p><p>(6)横板移动机制</p><p>(7)关卡标题界面</p><p>(8)碰撞与死亡声音</p><p>(9)设置功能的设计</p><p>(10)按键移动及暂停</p><p>(11)横板的移动边界控制</p><h2 id="2-系统设计"><a href="#2-系统设计" class="headerlink" title="2 系统设计"></a>2 系统设计</h2><h3 id="2-1-系统总体设计"><a href="#2-1-系统总体设计" class="headerlink" title="2.1 系统总体设计"></a>2.1 系统总体设计</h3><h4 id="游戏有完善的开始界面，包括以下几项："><a href="#游戏有完善的开始界面，包括以下几项：" class="headerlink" title="游戏有完善的开始界面，包括以下几项："></a>游戏有完善的开始界面，包括以下几项：</h4><p>(1)开始游戏</p><p>(2)游戏说明</p><p>(3)游戏设置</p><p>(4)分数排行</p><p>(5)存档读取</p><p>(6)退出游戏</p><h4 id="游戏中的功能包括："><a href="#游戏中的功能包括：" class="headerlink" title="游戏中的功能包括："></a>游戏中的功能包括：</h4><p>(1)游戏的暂停和开始</p><p>(2)游戏的得分与生命的显示</p><p>(3)关卡的进入与退出</p><p>(4)道具的获取与使用</p><p>(5)退出游戏</p><h3 id="2-2-主要数据结构"><a href="#2-2-主要数据结构" class="headerlink" title="2.2 主要数据结构"></a>2.2 主要数据结构</h3><p>使用类来创建游戏的各个组件</p><h3 id="2-3-模块设计"><a href="#2-3-模块设计" class="headerlink" title="2.3 模块设计"></a>2.3 模块设计</h3><p><img src="%E5%9B%BE%E7%89%87/%E7%BB%93%E6%9E%84.png" alt="结构"></p><h4 id="2-3-1-主函数"><a href="#2-3-1-主函数" class="headerlink" title="2.3.1 主函数"></a>2.3.1 主函数</h4><p>对窗口的控制：禁用绘图窗口的关闭按钮、为窗口命名</p><p>创建线程</p><p>导入菜单界面</p><h4 id="2-3-2-菜单模块"><a href="#2-3-2-菜单模块" class="headerlink" title="2.3.2 菜单模块"></a>2.3.2 菜单模块</h4><p>该模块的功能是：输出菜单界面以及在选择相应按钮后系统做出的反应。 </p><p>在本游戏中，菜单界面使用鼠标控制，真实感与体验效果较好。</p><p>游戏菜单共有六个选项：开始、继续、设置、说明、排行、退出。它们分别控制着游戏的开始、存档的读取、游戏内容的控制、游戏说明的呈现、游戏得分排行的呈现、以及游戏的退出。</p><h4 id="2-3-3-打印模块"><a href="#2-3-3-打印模块" class="headerlink" title="2.3.3 打印模块"></a>2.3.3 打印模块</h4><h5 id="主模块通过二维数组来实现在屏幕打印功能，具体打印的功能如下"><a href="#主模块通过二维数组来实现在屏幕打印功能，具体打印的功能如下" class="headerlink" title="主模块通过二维数组来实现在屏幕打印功能，具体打印的功能如下"></a>主模块通过二维数组来实现在屏幕打印功能，具体打印的功能如下</h5><p>游戏边框，一个设定的矩形边框。</p><p>屏幕上的砖块、操纵的横板、移动的小球。</p><p>得分，说明等提示消息。</p><h5 id="外层界面"><a href="#外层界面" class="headerlink" title="外层界面"></a>外层界面</h5><p>游戏图标的显示及游戏名在程序头的显示。</p><p>游戏菜单的显示，包括游戏说明、游戏排行的显示。</p><p>各个关卡的切入和转接。</p><p>游戏设置的显示——包括游戏难度、游戏音效、时间上限的设定。</p><p>失败后、成功后的显示界面。</p><h4 id="2-3-4-判断模块"><a href="#2-3-4-判断模块" class="headerlink" title="2.3.4 判断模块"></a>2.3.4 判断模块</h4><p>该模块主要功能是逻辑判断功能模块，判断的内容主要是：</p><h5 id="判断游戏是否结束："><a href="#判断游戏是否结束：" class="headerlink" title="判断游戏是否结束："></a>判断游戏是否结束：</h5><p>根据关卡数达到最大和砖块全部消失来判断游戏是否结束（成功）。</p><p>根据生命数是否等于零来判断游戏是否结束（失败）。</p><p>根据游戏设置中的时间选项。若游戏进行时间超过设置时间，则生命值减一。</p><h5 id="判断小球的运动：检测小球与横板、边界、砖块（碰撞时消失）的碰撞。"><a href="#判断小球的运动：检测小球与横板、边界、砖块（碰撞时消失）的碰撞。" class="headerlink" title="判断小球的运动：检测小球与横板、边界、砖块（碰撞时消失）的碰撞。"></a>判断小球的运动：检测小球与横板、边界、砖块（碰撞时消失）的碰撞。</h5><h5 id="判断是否得分：通过判断小球与砖块的撞击来判断是否得分。"><a href="#判断是否得分：通过判断小球与砖块的撞击来判断是否得分。" class="headerlink" title="判断是否得分：通过判断小球与砖块的撞击来判断是否得分。"></a>判断是否得分：通过判断小球与砖块的撞击来判断是否得分。</h5><h5 id="判断是否得到生命：通过检测心形与横板的位置关系来判断是否成功接住了心形。"><a href="#判断是否得到生命：通过检测心形与横板的位置关系来判断是否成功接住了心形。" class="headerlink" title="判断是否得到生命：通过检测心形与横板的位置关系来判断是否成功接住了心形。"></a>判断是否得到生命：通过检测心形与横板的位置关系来判断是否成功接住了心形。</h5><h5 id="判断游戏难度：通过在菜单中的“设置”选项中选择，可调节游戏难度1-3（1为最简单）"><a href="#判断游戏难度：通过在菜单中的“设置”选项中选择，可调节游戏难度1-3（1为最简单）" class="headerlink" title="判断游戏难度：通过在菜单中的“设置”选项中选择，可调节游戏难度1~3（1为最简单）"></a>判断游戏难度：通过在菜单中的“设置”选项中选择，可调节游戏难度1~3（1为最简单）</h5><h5 id="判断游戏模式：通过在菜单中的“设置”选项中选择，可调节游戏模式为鼠标模式和键盘模式。这两种模式分别仅使用鼠标或键盘控制游戏。"><a href="#判断游戏模式：通过在菜单中的“设置”选项中选择，可调节游戏模式为鼠标模式和键盘模式。这两种模式分别仅使用鼠标或键盘控制游戏。" class="headerlink" title="判断游戏模式：通过在菜单中的“设置”选项中选择，可调节游戏模式为鼠标模式和键盘模式。这两种模式分别仅使用鼠标或键盘控制游戏。"></a>判断游戏模式：通过在菜单中的“设置”选项中选择，可调节游戏模式为鼠标模式和键盘模式。这两种模式分别仅使用鼠标或键盘控制游戏。</h5><h4 id="2-3-5-游戏逻辑模块"><a href="#2-3-5-游戏逻辑模块" class="headerlink" title="2.3.5 游戏逻辑模块"></a>2.3.5 游戏逻辑模块</h4><p>该模块是游戏的主要模块，游戏需要有逻辑规则来保证趣味性的，该模块主要包括的功能函数有：</p><p>(1)保证左右键的作用，移动（加速）。</p><p>(2)保证分数的更新和相应游戏模式的变化。</p><p>(3)保证游戏规则。</p><p>(4)控制横板的移动速度以及移动上限，控制小球移动速度。</p><p>(5)控制游戏时间、生命值与得分值。</p><p>(6)控制游戏的操作模式。</p><h3 id="2-4-开发语言和开发工具"><a href="#2-4-开发语言和开发工具" class="headerlink" title="2.4 开发语言和开发工具"></a>2.4 开发语言和开发工具</h3><p>本系统采用C语言和C++语言作为开发语言，在Visual Studio环境下编译，并且调用了一些数据库。</p><h4 id="C语言的主要特点如下："><a href="#C语言的主要特点如下：" class="headerlink" title="C语言的主要特点如下："></a>C语言的主要特点如下：</h4><p>(1)语言简洁、紧凑，使用方便。</p><p>(2)语法丰富、灵活，能力强</p><p>(3)运算符和数据类型丰富，具有现代语言的各种数据结构。 </p><p>(4)具有结构化的语句，可控制数据的存储位置和初始化过程。</p><p>(5)指针的存在可以简化算法实现。</p><p>(6)语法限制不太严格，程序设计自由度大。 </p><p>(7)生成的目标代码质量高，程序执行效率高。 </p><p>(8)用C语言编写的程序可移植性比较好，基本上不做任何修改就能运用于各种型号的操作系统中。 </p><p>(9)C语言允许直接访问物理地址，能进行位操作，能实现汇编语言的大部分功能，可以直接对硬件进行操作。提供丰富的操作符集合可执行底层运算，是“高层”的汇编语言。 </p><p>(10)嵌入其它高级语言充当底层，包含其它低级语言充当封装。</p><p>(11)简化了编写过程和系统界面。</p><h4 id="C-语言的主要特点如下："><a href="#C-语言的主要特点如下：" class="headerlink" title="C++语言的主要特点如下："></a>C++语言的主要特点如下：</h4><p>(1)同时支持面向过程和面向对象的方法——既可以进行面向对象的程序设计，也可以进行面向过程的程序设计。因此，它具有数据封装和隐藏、继承和多态等面向对象的特征；</p><p>(2)兼容C语言；</p><p>(3)结构清晰、易于扩充；</p><h4 id="Visual-Studio-IDE的主要优点："><a href="#Visual-Studio-IDE的主要优点：" class="headerlink" title="Visual Studio IDE的主要优点："></a>Visual Studio IDE的主要优点：</h4><p>(1)语义错误检查功能强大；</p><p>(2)体系结构清晰，便于团队开发；</p><p>(3)自带资源文件，管理资源方便；</p><h4 id="对于各个数据库的使用："><a href="#对于各个数据库的使用：" class="headerlink" title="对于各个数据库的使用："></a>对于各个数据库的使用：</h4><p>使用了EasyX提供的graphics.h库。该库包含easy.x库，可以提供颜色模型、图形绘制、图像处理、鼠标控制、文字输出等有关函数；</p><p>使用了Winmm.lib库。该库提供了有关声音输出的函数；</p><p>使用了stdio.h库。该库提供printf()等函数；</p><p>使用了math.h库。该库提供fabs()等函数；</p><p>使用了time.h库。利用该库进行随机生成、运行时间输出等操作；</p><p>使用了conic.h库。利用该库的_kbnit函数读取键盘输入。</p><h2 id="3-系统测试"><a href="#3-系统测试" class="headerlink" title="3 系统测试"></a>3 系统测试</h2><h3 id="3-1-系统运行"><a href="#3-1-系统运行" class="headerlink" title="3.1 系统运行"></a>3.1 系统运行</h3><h4 id="游戏界面"><a href="#游戏界面" class="headerlink" title="游戏界面"></a>游戏界面</h4><p>(1)菜单界面：包含“开始”、“继续”、 “设置”、“说明”、“排行”、“退出”共六个按钮，它们分别控制着游戏的开始、存档的读取、游戏内容的控制、游戏说明的呈现、游戏得分排行的呈现、游戏的退出。</p><p>(2)游戏说明界面：呈现对游戏的简单介绍和方法说明。</p><p>(3)跳转界面：包含转接动画和回合说明。</p><p>(4)游戏界面：左侧为游戏区，包括砖块、弹球、横板、以及有一定概率出现的心形和闪电道具；右侧为功能区，包括生命值、游戏得分、游戏时间。</p><p>(5)游戏设置界面：点入后正常显示，分为“难度”、“音效”、“时间”、“鼠标”四个选项，通过鼠标的点选，可实现难度1~3的调节、音效开关的调节、游戏时间（50秒、500秒、无限）的调节、鼠标和按键操作方式的调节。</p><p>(6)失败界面：界面内显示“YOU  LOSE”字样，下方有“重玩”和“退出”两个选项。选择“重玩”则跳转回菜单界面，选择“退出”则游戏关闭。</p><p>(7)成功界面：界面内显示“CONGRATULATIONS”字样，按任意键即可返回菜单界面。</p><h4 id="游戏控制方法"><a href="#游戏控制方法" class="headerlink" title="游戏控制方法"></a>游戏控制方法</h4><p>(1)使用鼠标控制横板移动。</p><p>(2)生命值的上限是三。每错掉一次球，生命值减一。球每撞击一次砖块，有一定的概率掉落❤，需用横板接住❤方可使得生命值加一。若生命值为零，则游戏失败。每次进入下一关卡，生命值自动补满。</p><p>(3)通过调节设置中的选项来调节游戏难度（1为最简单）以及音效和时间限制。</p><h4 id="游戏体验："><a href="#游戏体验：" class="headerlink" title="游戏体验："></a>游戏体验：</h4><p>―在只剩最后一至二个砖块时较为难打预备解决方案：将横板的上限设置于最底层砖块的下沿。</p><p>―小球移动速度过慢预备解决方案：增加flash道具，当横板接到flash时小球速度增加。</p><p>―球与砖块连续两次碰撞时有卡顿。</p><p>―连击控制方向键时总是卡顿，无法立即启动。</p><p>―将打砖块这个游戏的功能通过代码完美的实现了出来，而且还可以进一步修改bug以及对功能进行拓展。在游戏画面方面，过场动画可谓是十分的流畅，给人一种恰到好处的舒畅感，同时搭配的背景音乐又让游戏显得不枯燥乏味，nice!</p><h3 id="3-2-系统测试"><a href="#3-2-系统测试" class="headerlink" title="3.2 系统测试"></a>3.2 系统测试</h3><p>本章给出对哪些模块做了哪些测试。例如多次运行是否出错，观察内存是否有泄露，CPU占用率等等。</p><h4 id="对各个模块的测试："><a href="#对各个模块的测试：" class="headerlink" title="对各个模块的测试："></a>对各个模块的测试：</h4><p>(1)对游戏菜单的测试：</p><p>进入游戏后，立刻播放了背景音乐。鼠标在按钮上悬停时，按钮变为深色，点按按钮时，按钮缩小。用鼠标点按了各个选项，测试其是否都能够正常工作。</p><p>(2)对游戏说明的测试：</p><p>按下任意键，均可以返回菜单界面。</p><p>(3)对游戏排行的测试：</p><p>多次进行游戏，游戏排行可以正常记录游戏得分情况</p><p>(4)对游戏界面的测试：</p><p>(5)对横板移动的测试：</p><p>点击“开始”进入游戏后，可以正常跳转进入关卡界面。横板可以正常且灵活地移动。</p><p>(6)对小球撞击、生命增加及音乐模块的测试：</p><p>小球撞击砖块后，砖块消失，消砖块音效响起，得分加一，小球正常反向运动，掉落❤的几率约为10%，心形掉落后，竖直向下匀速运动，被横板接住后，消失，生命值加一，右上角的❤数量加一（若此时生命值为满[3]，则生命值不再增加）。小球撞击横板后水平运动的速度与其撞击在横板上的可以很好地符合线性关系。小球撞击边框后，速度正常反向。小球未被横板接住而掉出游戏下边界时，生命值减一，右上角的❤数量减一。横板位置不动，瞬间新的小球从横板的正中央向上匀速运动。在此过程中，时间值继续计数，得分不变。若生命值为零（右上角失去了所有的❤），则跳转失败界面，立刻播放了GAMEOVER的音效，此时操作任何鼠标按键（除了Alt+F4）均无法进入其他界面或退出游戏。可以用鼠标点按“重玩”或“退出”两个按键，点按“重玩”后返回游戏主菜单，若再次点按游戏主菜单中的“继续”选项，游戏仍将重新开始，与点按“开始”选项的效果相同。游戏失败界面中若点按“退出”，则程序关闭，游戏退出，但得分值仍记录进入“排行”中。每一关的最后一个砖块被消除后，可以正常跳转。当游戏进行至最后一关，砖块全部被消除时，游戏结束，界面内显示“CONGRATULATIONS”字样。</p><h4 id="多次运行后，可以查看存档文件及排行文件，并不出错。"><a href="#多次运行后，可以查看存档文件及排行文件，并不出错。" class="headerlink" title="多次运行后，可以查看存档文件及排行文件，并不出错。"></a>多次运行后，可以查看存档文件及排行文件，并不出错。</h4><h4 id="游戏运行时，CPU占有率为25-左右，内存约14500K，并无内存泄漏情况。"><a href="#游戏运行时，CPU占有率为25-左右，内存约14500K，并无内存泄漏情况。" class="headerlink" title="游戏运行时，CPU占有率为25%左右，内存约14500K，并无内存泄漏情况。"></a>游戏运行时，CPU占有率为25%左右，内存约14500K，并无内存泄漏情况。</h4><h2 id="4-结论和体会"><a href="#4-结论和体会" class="headerlink" title="4 结论和体会"></a>4 结论和体会</h2><p>经过以上各章节的功能，我们已经基本完成了打砖块的开发。打砖块是一个趣味性和操作性很强的游戏。游戏从简单的菜单选项界面到打印砖块和边框再到实现图形化界面，鼠标操控；游戏逻辑也得到改善，从简单地判断碰撞，增加至判断得分与生命的获得。在游戏逐步由简到难的过程中，我们极好地锻练了编程能力。</p><p>游戏不仅需要灵活的交互功能，还需要界面友好，应该具有操作简单和趣味性强的功能。界面应该尽量美观友好、多姿多彩，完全的图形化设计，才能使得操作者易于上手。而且，我们发现，多种媒体技术的集成利用，可以方便的完成用户乐于接受的各种界面设计。本系统虽具备了基本的功能，但由于时间关系，还有很多功能待实现，在此基础上结合实际应用中所出现的问题，还应该加入更多游戏模式的功能。</p><p>通过这次编程我们深深的感受到对代码的变量命名，代码内注释格式，甚至嵌套中行缩进的长度和函数间的空行数字都应该有明确规定。良好的编写习惯，不但有助于代码的移植和纠错，也有助于不同人员之间的协作。我们还要有模块化思维能力，模块化思维就是编程任何一个功能模块或函数的时候，要多想一些，不局限于完成当前任务的简单思路上，而是深入思考该模块是否可以脱离这个系统存在，是否可以通过简单的修改参数的方式和存储资源文件的方式而使得程序可以在其他系统和应用环境下直接使用，这样就能极大避免重复性的开发工作. 善于总结，也是学习能力的一种体现，每次完成一个编程任务，完成一段代码，都应当有目的的跟踪该程序的应用状况，随时总结，找到自己的不足，这样所编写的程序才能逐步提高。</p><h2 id="5-游戏截图"><a href="#5-游戏截图" class="headerlink" title="5 游戏截图"></a>5 游戏截图</h2><p><img src="%E5%9B%BE%E7%89%87/1.jpg" alt="1"></p><p><img src="%E5%9B%BE%E7%89%87/4.png" alt="4"></p><p><img src="%E5%9B%BE%E7%89%87/5.png" alt="5"></p><p><img src="%E5%9B%BE%E7%89%87/6.png" alt="6"></p><p><img src="%E5%9B%BE%E7%89%87/9.png" alt="9"></p><p><img src="%E5%9B%BE%E7%89%87/10.png" alt="10"></p><p><img src="%E5%9B%BE%E7%89%87/11.png" alt="11"></p><p><img src="%E5%9B%BE%E7%89%87/12.png" alt="12"></p><h2 id="6-参考文献"><a href="#6-参考文献" class="headerlink" title="6 参考文献"></a>6 参考文献</h2><ul><li><p><a href="https://codeabc.cn/yangw/a/embed-music-in-an-exe-file">将 mp3 以资源形式嵌入 exe 中使用</a>  </p></li><li><p><a href="https://codeabc.cn/yangw/a/embed-pictures-in-an-exe-file">读取图片的技巧：将图片内嵌到 exe 文件中</a>  </p></li><li><p><a href="https://www.cnblogs.com/gakusei/articles/1352922.html">在VC中使用自定义资源,FindResource,LoadResource,LockResource</a>  </p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 大作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> easyx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建教程</title>
      <link href="/2021/01/29/hexo-bo-ke-da-jian-jiao-cheng/"/>
      <url>/2021/01/29/hexo-bo-ke-da-jian-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本篇文章介绍Windows 10系统通过Hexo生成静态站点并上传至github的过程</p><h1 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h1><p>Hexo是基于Node.js的,首先需安装<a href="http://nodejs.cn/download/current/">Node.js</a>的LTS(长期支持(Long Term Support))版本</p><p>新版的Node.js已经集成npm(Nodejs下的包管理器),安装完成后在命令提示符中输入<code>node -v</code>与<code>npm -v</code>,出现版本信息证明安装成功</p><p>为便于npm的使用可设置国内镜像<code>npm config set registry https://registry.npm.taobao.org</code></p><h1 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h1><p>命令提示符执行<code>npm install hexo-cli -g</code>安装hexo，安装完成后执行<code>hexo -v</code>出现版本信息即安装成功</p><h1 id="初始化站点"><a href="#初始化站点" class="headerlink" title="初始化站点"></a>初始化站点</h1><p>执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init <span class="token operator">&lt;</span>folder<span class="token operator">&gt;</span><span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>folder<span class="token operator">&gt;</span><span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行<code>hexo g</code>生成静态文件, 执行<code>hexo s</code>启动服务器。默认情况下，访问网址为:<code>http://localhost:4000/</code></p><h1 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h1><p>每个github账号都可以发布自己的静态网站,域名为<code>username.github.io</code></p><h2 id="注册github账号"><a href="#注册github账号" class="headerlink" title="注册github账号"></a>注册github账号</h2><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><h2 id="新建库"><a href="#新建库" class="headerlink" title="新建库"></a>新建库</h2><p>在github上新建名为 <code>username.github.io</code> 的库(注意:username必须为github对应的用户名)，新建完成后在项目的 <code>Settings-Pages</code> 中 <code>Choose a theme</code> 就完成了对github网页仓库的配置</p><h2 id="关联本地网站与github库"><a href="#关联本地网站与github库" class="headerlink" title="关联本地网站与github库"></a>关联本地网站与github库</h2><p>修改本地根目录中的 <code>_config.yml</code> 文件中的deploy配置如下</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/username/username.github.io  <span class="token key atrule">branch</span><span class="token punctuation">:</span> main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>username</code> 应替换为自己的用户名, <code>branch</code> 应为github库的主分支</p><p>在本地目录打开git bash,执行<code>npm install hexo-deployer-git --save</code>安装hexo-deployer-git,安装完成后运行<code>hexo d</code>即可推送至github库</p><h2 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h2><p>参照<a href="https://hexo.io/zh-cn/docs/commands#init">hexo官网</a></p><h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <code>_config.yml</code> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"post title with whitespace"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-p</code>, <code>--path</code></td><td>自定义新文章的路径</td></tr><tr><td><code>-r</code>, <code>--replace</code></td><td>如果存在同名文章，将其替换</td></tr><tr><td><code>-s</code>, <code>--slug</code></td><td>文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page --path about/me <span class="token string">"About me"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 Front Matter 中的 title 为 <code>"About me"</code></p><p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page --path about/me<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时 Hexo 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 Front Matter 中的 title 为 <code>"page"</code>。这是因为在上述命令中，hexo-cli 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p><h3 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成静态文件。</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>-d</code>, <code>--deploy</code></td><td>文件生成后立即部署网站</td></tr><tr><td><code>-w</code>, <code>--watch</code></td><td>监视文件变动</td></tr><tr><td><code>-b</code>, <code>--bail</code></td><td>生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td><code>-f</code>, <code>--force</code></td><td>强制重新生成文件<br>Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。<br>使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td></tr><tr><td><code>-c</code>, <code>--concurrency</code></td><td>最大同时生成文件的数量，默认无限制</td></tr></tbody></table><p>该命令可以简写为</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>-p</code>, <code>--port</code></td><td>重设端口</td></tr><tr><td><code>-s</code>, <code>--static</code></td><td>只使用静态文件</td></tr><tr><td><code>-l</code>, <code>--log</code></td><td>启动日记记录，使用覆盖记录格式</td></tr></tbody></table><h3 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>部署网站。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-g</code>, <code>--generate</code></td><td>部署之前预先生成静态文件</td></tr></tbody></table><p>该命令可以简写为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h1 id="Matery-主题"><a href="#Matery-主题" class="headerlink" title="Matery 主题"></a>Matery 主题</h1><p>以下介绍主要来自<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">Matery主题中文说明文档</a>,并稍加改动</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>git clone</code> 命令来下载:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的  <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议:"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 18:23:38</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"about"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建留言板-contact-页（可选的）"><a href="#新建留言板-contact-页（可选的）" class="headerlink" title="新建留言板 contact 页（可选的）"></a>新建留言板 contact 页（可选的）</h3><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"contact"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> contact<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p></blockquote><h3 id="新建友情链接-friends-页（可选的）"><a href="#新建友情链接-friends-页（可选的）" class="headerlink" title="新建友情链接 friends 页（可选的）"></a>新建友情链接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情链接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-12-12 21:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建-404-页"><a href="#新建-404-页" class="headerlink" title="新建 404 页"></a>新建 404 页</h3><p>如果在你的博客 <code>source</code> 目录下还没有 <code>404.md</code> 文件，那么你就需要新建一个</p><p>编辑你刚刚新建的页面文件 <code>/source/404.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token number">404</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"Oops～，我崩溃了！找不到你想要的页面 :("</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="菜单导航配置"><a href="#菜单导航配置" class="headerlink" title="菜单导航配置"></a>菜单导航配置</h3><h4 id="配置基本菜单导航的名称、路径url和图标icon"><a href="#配置基本菜单导航的名称、路径url和图标icon" class="headerlink" title="配置基本菜单导航的名称、路径url和图标icon."></a>配置基本菜单导航的名称、路径url和图标icon.</h4><p>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>)<br>2.图标icon 可以在<a href="https://fontawesome.com/icons">Font Awesome</a> 中查找   </p><p>修改主题目录下的 <code>_config.yml</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二级菜单配置方法"><a href="#二级菜单配置方法" class="headerlink" title="二级菜单配置方法"></a>二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作</p><ol><li>在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)     </li><li>在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.      </li><li>注意每个二级菜单模块前要加 <code>-</code>.     </li><li>注意缩进格式  </li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle<span class="token punctuation">-</span>o  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book  <span class="token key atrule">Medias</span><span class="token punctuation">:</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>list    <span class="token key atrule">children</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Music        <span class="token key atrule">url</span><span class="token punctuation">:</span> /music        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>music      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Movies        <span class="token key atrule">url</span><span class="token punctuation">:</span> /movies        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>film      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Books        <span class="token key atrule">url</span><span class="token punctuation">:</span> /books        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>book      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Galleries        <span class="token key atrule">url</span><span class="token punctuation">:</span> /galleries        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>image<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>从 Hexo5.0 版本开始自带了 <code>prismjs</code> 代码语法高亮的支持，本主题对此进行了改造支持。</p><p>如果你的博客中曾经安装过 <code>hexo-prism-plugin</code> 的插件，那么你须要执行 <code>npm uninstall hexo-prism-plugin</code> 来卸载掉它，否则生成的代码中会有 <code>&amp;#123;</code> 和 <code>&amp;#125;</code> 的转义字符。</p><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code>，主要配置如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主题中默认的 <code>prismjs</code> 主题是 <code>Tomorrow Night</code>，如果你想定制自己的主题，可以前往 <a href="https://prismjs.com/download.html">prismjs 下载页面</a> 定制下载自己喜欢的主题 <code>css</code> 文件，然后将此 css 主题文件取名为 <code>prism.css</code>，替换掉 <code>hexo-theme-matery</code> 主题文件夹中的 <code>source/libs/prism/prism.css</code> 文件即可。</p><p>下载 <code>prism.js</code> ,放入主题文件夹中的<code>source/js</code>,并在 <code>layout/layout.ejs</code> 中添加</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"/js/prism.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="中文链接转拼音（建议安装）"><a href="#中文链接转拼音（建议安装）" class="headerlink" title="中文链接转拼音（建议安装）"></a>中文链接转拼音（建议安装）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment"># default: '-'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h3 id="文章字数统计插件（建议安装）"><a href="#文章字数统计插件（建议安装）" class="headerlink" title="文章字数统计插件（建议安装）"></a>文章字数统计插件（建议安装）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">postInfo</span><span class="token punctuation">:</span>  <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">update</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">wordCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置文章字数统计为 true.</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置站点文章总字数统计为 true.</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 阅读时长.</span>  <span class="token key atrule">readCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 阅读次数.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加emoji表情支持（可选的）"><a href="#添加emoji表情支持（可选的）" class="headerlink" title="添加emoji表情支持（可选的）"></a>添加emoji表情支持（可选的）</h3><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">githubEmojis</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">className</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>emoji  <span class="token key atrule">inject</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">styles</span><span class="token punctuation">:</span>  customEmojis<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p><h3 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">hub</span><span class="token punctuation">:</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span>  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h3 id="添加-DaoVoice-在线聊天功能（可选的）"><a href="#添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="添加 DaoVoice 在线聊天功能（可选的）"></a>添加 <a href="http://www.daovoice.io/">DaoVoice</a> 在线聊天功能（可选的）</h3><p>前往 <a href="http://www.daovoice.io/">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="添加-Tidio-在线聊天功能（可选的）"><a href="#添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="添加 Tidio 在线聊天功能（可选的）"></a>添加 <a href="https://www.tidio.com/">Tidio</a> 在线聊天功能（可选的）</h3><p>前往 <a href="https://www.tidio.com/">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><blockquote><p><strong>注</strong>：在本地访问量未从0开始统计,上传至github后即可正常显示</p></blockquote><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;% if (theme.socialLink.github) { %&gt;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%= theme.socialLink.github %&gt;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fab fa-github<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>&lt;% } %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fab fa-facebook</code></li><li>Twitter: <code>fab fa-twitter</code></li><li>Google-plus: <code>fab fa-google-plus</code></li><li>Linkedin: <code>fab fa-linkedin</code></li><li>Tumblr: <code>fab fa-tumblr</code></li><li>Medium: <code>fab fa-medium</code></li><li>Slack: <code>fab fa-slack</code></li><li>Sina Weibo: <code>fab fa-weibo</code></li><li>Wechat: <code>fab fa-weixin</code></li><li>QQ: <code>fab fa-qq</code></li><li>Zhihu: <code>fab fa-zhihu</code></li></ul><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p></blockquote><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活music配置即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 是否在首页显示音乐.</span><span class="token key atrule">music</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token comment">#非吸底模式有效</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> 听听音乐  <span class="token key atrule">autoHide</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment"># hide automaticaly</span>  <span class="token key atrule">server</span><span class="token punctuation">:</span> netease   <span class="token comment">#requiremusic platform: netease, tencent, kugou, xiami, baidu</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> playlist    <span class="token comment">#require song, playlist, album, search, artist</span>  <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">2722795475</span>    <span class="token comment">#requiresong id / playlist id / album id / search keyword</span>  <span class="token key atrule">fixed</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>       <span class="token comment"># 开启吸底模式</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token comment"># 是否自动播放</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'#42b983'</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token string">'all'</span>       <span class="token comment"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">'random'</span>   <span class="token comment"># 音频循环顺序, 可选值: 'list', 'random'</span>  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span>   <span class="token comment"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7</span>       <span class="token comment"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  <span class="token key atrule">listFolded</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 列表默认折叠</span>  <span class="token key atrule">hideLrc</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>     <span class="token comment"># 隐藏歌词</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>server</code>可选<code>netease</code>（网易云音乐），<code>tencent</code>（QQ音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p><p><code>baidu</code>（百度音乐）。</p><p><code>type</code>可选<code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p><p><code>id</code>获取方法示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，浏览器地址栏后面会有一串数字，<code>playlist</code>的<code>id</code></p><p>即为这串数字。</p></blockquote><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>hide</td><td><code>false</code></td><td>隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">hide</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li><li>CDN加速</li></ul><h2 id="个人配置"><a href="#个人配置" class="headerlink" title="个人配置"></a>个人配置</h2><p>以下为个人所做的修改</p><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector">.bg-color</span> <span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> #007FFF 0%<span class="token punctuation">,</span> #022E6A 100%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>此处修改为蓝色渐变色</p><h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><p>也可在文章的img中显示指定图片,可以使用外部图床或相对路径来访问本地图片</p><p>可以在根目录下的  <code>_config.yml</code> 将 <code>post_asset_folder</code> 设置为 <code>true</code> 这样在 <code>hexo new post</code> 时会自动创建同名文件夹用于存放图片</p><h3 id="修改-banner-遮罩"><a href="#修改-banner-遮罩" class="headerlink" title="修改 banner 遮罩"></a>修改 banner 遮罩</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-cover:after</code> 来修改背景颜色：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*.bg-cover:after {    -webkit-animation: rainbow 60s infinite;    animation: rainbow 60s infinite;}*/</span><span class="token punctuation">.</span>bg<span class="token operator">-</span>cover<span class="token operator">:</span>after <span class="token punctuation">{</span>    <span class="token comment">/*    position: absolute;    z-index: 1;    width: 100%;    height: 100%;    display: block;    left: 0;    top: 0;*/</span>    <span class="token comment">/*content: "";*/</span>    position<span class="token operator">:</span> absolute<span class="token punctuation">;</span>    top<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    left<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    content<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    background<span class="token operator">-</span>color<span class="token operator">:</span> gray<span class="token punctuation">;</span>    opacity<span class="token operator">:</span> <span class="token number">0.1</span><span class="token punctuation">;</span>    z<span class="token operator">-</span>index<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    width<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>    height<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处删去遮罩变色效果并改用灰色透明遮罩以使主题突出</p><h3 id="背景雪花"><a href="#背景雪花" class="headerlink" title="背景雪花"></a>背景雪花</h3><p>从<a href="https://github.com/Yafine/cdn/blob/3.2.7/source/js/snow1.js">这里</a>获取js脚本后,创建并复制在主题文件夹下 <code>source/js/snow.js</code>中</p><p>在主题文件夹下 <code>layout/layout.ejs</code> 中添加</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"/js/snow.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="看板娘"><a href="#看板娘" class="headerlink" title="看板娘"></a>看板娘</h3><p>在主题文件夹下 <code>layout/layout.ejs</code> 中添加</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/autoload.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="动态标题"><a href="#动态标题" class="headerlink" title="动态标题"></a>动态标题</h3><p>在主题文件夹下 <code>layout/layout.ejs</code> 中添加</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>    <span class="token keyword">var</span> OriginTitile<span class="token operator">=</span>document<span class="token punctuation">.</span>title<span class="token punctuation">,</span>st<span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"visibilitychange"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        document<span class="token punctuation">.</span>hidden<span class="token operator">?</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>title<span class="token operator">=</span><span class="token string">"&lt;(￣︶￣)&gt;偷偷藏起来"</span><span class="token punctuation">,</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>title<span class="token operator">=</span><span class="token string">"(*/ω＼*)被发现了"</span>st<span class="token operator">=</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>document<span class="token punctuation">.</span>title<span class="token operator">=</span>OriginTitile<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">3e3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="首页诗词"><a href="#首页诗词" class="headerlink" title="首页诗词"></a>首页诗词</h3><p>在主题文件夹下 <code>layout/_partial/head.ejs</code> 添加</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://sdk.jinrishici.com/v2/browser/jinrishici.js"</span> charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>并将主题文件夹下 <code>layout/_partial/bg-cover-content.ejs</code> 中 <code>&lt;%= config.description %&gt;</code> 修改为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token string">'&lt;span id="jinrishici-sentence"&gt;正在加载今日诗词....&lt;/span&gt;'</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-cover .description</code> 来修改诗词字体：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">.</span>bg<span class="token operator">-</span>cover <span class="token punctuation">.</span>description <span class="token punctuation">{</span>    font<span class="token operator">-</span>weight<span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">;</span>    font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">1.25</span>rem<span class="token punctuation">;</span>    line<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token number">1.4</span>em<span class="token punctuation">;</span>    margin<span class="token operator">-</span>bottom<span class="token operator">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>    color<span class="token operator">:</span> white<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处将颜色改为白色并将字体加粗一倍</p><h3 id="修改-Fork-Me-颜色"><a href="#修改-Fork-Me-颜色" class="headerlink" title="修改 Fork Me 颜色"></a>修改 Fork Me 颜色</h3><p>在主题文件夹下 <code>layout/_partial/github-link.ejs</code>文件中，搜索 <code>.github-corner svg</code> 来修改Fork Me 颜色：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">.</span>github<span class="token operator">-</span>corner svg <span class="token punctuation">{</span>    color<span class="token operator">:</span> #<span class="token number">007</span>FFF<span class="token punctuation">;</span>    fill<span class="token operator">:</span> #fff<span class="token punctuation">;</span>    height<span class="token operator">:</span> <span class="token number">64</span>px<span class="token punctuation">;</span>    width<span class="token operator">:</span> <span class="token number">64</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
