<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo博客搭建教程</title>
      <link href="/2021/08/08/hexo-bo-ke-da-jian-jiao-cheng/"/>
      <url>/2021/08/08/hexo-bo-ke-da-jian-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本篇文章介绍Windows 10系统通过Hexo生成静态站点并上传至github的过程</p><h1 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h1><p>Hexo是基于Node.js的,首先需安装<a href="http://nodejs.cn/download/current/">Node.js</a>的LTS(长期支持(Long Term Support))版本</p><p>新版的Node.js已经集成npm(Nodejs下的包管理器),安装完成后在命令提示符中输入<code>node -v</code>与<code>npm -v</code>,出现版本信息证明安装成功</p><p>为便于npm的使用可设置国内镜像<code>npm config set registry https://registry.npm.taobao.org</code></p><h1 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h1><p>命令提示符执行<code>npm install hexo-cli -g</code>安装hexo，安装完成后执行<code>hexo -v</code>出现版本信息即安装成功</p><h1 id="初始化站点"><a href="#初始化站点" class="headerlink" title="初始化站点"></a>初始化站点</h1><p>执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init <span class="token operator">&lt;</span>folder<span class="token operator">&gt;</span><span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>folder<span class="token operator">&gt;</span><span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行<code>hexo g</code>生成静态文件, 执行<code>hexo s</code>启动服务器。默认情况下，访问网址为:<code>http://localhost:4000/</code></p><h1 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h1><p>每个github账号都可以发布自己的静态网站,域名为<code>username.github.io</code></p><h2 id="注册github账号"><a href="#注册github账号" class="headerlink" title="注册github账号"></a>注册github账号</h2><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><h2 id="新建库"><a href="#新建库" class="headerlink" title="新建库"></a>新建库</h2><p>在github上新建名为 <code>username.github.io</code> 的库(注意:username必须为github对应的用户名)，新建完成后在项目的 <code>Settings-Pages</code> 中 <code>Choose a theme</code> 就完成了对github网页仓库的配置</p><h2 id="关联本地网站与github库"><a href="#关联本地网站与github库" class="headerlink" title="关联本地网站与github库"></a>关联本地网站与github库</h2><p>修改本地根目录中的 <code>_config.yml</code> 文件中的deploy配置如下</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/username/username.github.io  <span class="token key atrule">branch</span><span class="token punctuation">:</span> main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>username</code> 应替换为自己的用户名, <code>branch</code> 应为github库的主分支</p><p>在本地目录打开git bash,执行<code>npm install hexo-deployer-git --save</code>安装hexo-deployer-git,安装完成后运行<code>hexo d</code>即可推送至github库</p><h2 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h2><p>参照<a href="https://hexo.io/zh-cn/docs/commands#init">hexo官网</a></p><h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <code>_config.yml</code> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"post title with whitespace"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-p</code>, <code>--path</code></td><td>自定义新文章的路径</td></tr><tr><td><code>-r</code>, <code>--replace</code></td><td>如果存在同名文章，将其替换</td></tr><tr><td><code>-s</code>, <code>--slug</code></td><td>文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page --path about/me <span class="token string">"About me"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 Front Matter 中的 title 为 <code>"About me"</code></p><p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page --path about/me<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时 Hexo 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 Front Matter 中的 title 为 <code>"page"</code>。这是因为在上述命令中，hexo-cli 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p><h3 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成静态文件。</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>-d</code>, <code>--deploy</code></td><td>文件生成后立即部署网站</td></tr><tr><td><code>-w</code>, <code>--watch</code></td><td>监视文件变动</td></tr><tr><td><code>-b</code>, <code>--bail</code></td><td>生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td><code>-f</code>, <code>--force</code></td><td>强制重新生成文件<br>Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。<br>使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td></tr><tr><td><code>-c</code>, <code>--concurrency</code></td><td>最大同时生成文件的数量，默认无限制</td></tr></tbody></table><p>该命令可以简写为</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>-p</code>, <code>--port</code></td><td>重设端口</td></tr><tr><td><code>-s</code>, <code>--static</code></td><td>只使用静态文件</td></tr><tr><td><code>-l</code>, <code>--log</code></td><td>启动日记记录，使用覆盖记录格式</td></tr></tbody></table><h3 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>部署网站。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-g</code>, <code>--generate</code></td><td>部署之前预先生成静态文件</td></tr></tbody></table><p>该命令可以简写为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h1 id="Matery-主题"><a href="#Matery-主题" class="headerlink" title="Matery 主题"></a>Matery 主题</h1><p>以下介绍主要来自<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">Matery主题中文说明文档</a>,并稍加改动</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>git clone</code> 命令来下载:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的  <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议:"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 18:23:38</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"about"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建留言板-contact-页（可选的）"><a href="#新建留言板-contact-页（可选的）" class="headerlink" title="新建留言板 contact 页（可选的）"></a>新建留言板 contact 页（可选的）</h3><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"contact"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> contact<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p></blockquote><h3 id="新建友情链接-friends-页（可选的）"><a href="#新建友情链接-friends-页（可选的）" class="headerlink" title="新建友情链接 friends 页（可选的）"></a>新建友情链接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情链接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-12-12 21:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建-404-页"><a href="#新建-404-页" class="headerlink" title="新建 404 页"></a>新建 404 页</h3><p>如果在你的博客 <code>source</code> 目录下还没有 <code>404.md</code> 文件，那么你就需要新建一个</p><p>编辑你刚刚新建的页面文件 <code>/source/404.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token number">404</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"Oops～，我崩溃了！找不到你想要的页面 :("</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="菜单导航配置"><a href="#菜单导航配置" class="headerlink" title="菜单导航配置"></a>菜单导航配置</h3><h4 id="配置基本菜单导航的名称、路径url和图标icon"><a href="#配置基本菜单导航的名称、路径url和图标icon" class="headerlink" title="配置基本菜单导航的名称、路径url和图标icon."></a>配置基本菜单导航的名称、路径url和图标icon.</h4><p>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>)<br>2.图标icon 可以在<a href="https://fontawesome.com/icons">Font Awesome</a> 中查找   </p><p>修改主题目录下的 <code>_config.yml</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二级菜单配置方法"><a href="#二级菜单配置方法" class="headerlink" title="二级菜单配置方法"></a>二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作</p><ol><li>在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)     </li><li>在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.      </li><li>注意每个二级菜单模块前要加 <code>-</code>.     </li><li>注意缩进格式  </li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle<span class="token punctuation">-</span>o  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book  <span class="token key atrule">Medias</span><span class="token punctuation">:</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>list    <span class="token key atrule">children</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Music        <span class="token key atrule">url</span><span class="token punctuation">:</span> /music        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>music      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Movies        <span class="token key atrule">url</span><span class="token punctuation">:</span> /movies        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>film      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Books        <span class="token key atrule">url</span><span class="token punctuation">:</span> /books        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>book      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Galleries        <span class="token key atrule">url</span><span class="token punctuation">:</span> /galleries        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>image<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>从 Hexo5.0 版本开始自带了 <code>prismjs</code> 代码语法高亮的支持，本主题对此进行了改造支持。</p><p>如果你的博客中曾经安装过 <code>hexo-prism-plugin</code> 的插件，那么你须要执行 <code>npm uninstall hexo-prism-plugin</code> 来卸载掉它，否则生成的代码中会有 <code>&amp;#123;</code> 和 <code>&amp;#125;</code> 的转义字符。</p><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code>，主要配置如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主题中默认的 <code>prismjs</code> 主题是 <code>Tomorrow Night</code>，如果你想定制自己的主题，可以前往 <a href="https://prismjs.com/download.html">prismjs 下载页面</a> 定制下载自己喜欢的主题 <code>css</code> 文件，然后将此 css 主题文件取名为 <code>prism.css</code>，替换掉 <code>hexo-theme-matery</code> 主题文件夹中的 <code>source/libs/prism/prism.css</code> 文件即可。</p><p>下载 <code>prism.js</code> ,放入主题文件夹中的<code>source/js</code>,并在 <code>layout/layout.ejs</code> 中添加</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"/js/prism.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="中文链接转拼音（建议安装）"><a href="#中文链接转拼音（建议安装）" class="headerlink" title="中文链接转拼音（建议安装）"></a>中文链接转拼音（建议安装）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment"># default: '-'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h3 id="文章字数统计插件（建议安装）"><a href="#文章字数统计插件（建议安装）" class="headerlink" title="文章字数统计插件（建议安装）"></a>文章字数统计插件（建议安装）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">postInfo</span><span class="token punctuation">:</span>  <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">update</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">wordCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置文章字数统计为 true.</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置站点文章总字数统计为 true.</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 阅读时长.</span>  <span class="token key atrule">readCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 阅读次数.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加emoji表情支持（可选的）"><a href="#添加emoji表情支持（可选的）" class="headerlink" title="添加emoji表情支持（可选的）"></a>添加emoji表情支持（可选的）</h3><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">githubEmojis</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">className</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>emoji  <span class="token key atrule">inject</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">styles</span><span class="token punctuation">:</span>  customEmojis<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p><h3 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">hub</span><span class="token punctuation">:</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span>  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h3 id="添加-DaoVoice-在线聊天功能（可选的）"><a href="#添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="添加 DaoVoice 在线聊天功能（可选的）"></a>添加 <a href="http://www.daovoice.io/">DaoVoice</a> 在线聊天功能（可选的）</h3><p>前往 <a href="http://www.daovoice.io/">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="添加-Tidio-在线聊天功能（可选的）"><a href="#添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="添加 Tidio 在线聊天功能（可选的）"></a>添加 <a href="https://www.tidio.com/">Tidio</a> 在线聊天功能（可选的）</h3><p>前往 <a href="https://www.tidio.com/">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><blockquote><p><strong>注</strong>：在本地访问量未从0开始统计,上传至github后即可正常显示</p></blockquote><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;% if (theme.socialLink.github) { %&gt;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%= theme.socialLink.github %&gt;<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fab fa-github<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>&lt;% } %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fab fa-facebook</code></li><li>Twitter: <code>fab fa-twitter</code></li><li>Google-plus: <code>fab fa-google-plus</code></li><li>Linkedin: <code>fab fa-linkedin</code></li><li>Tumblr: <code>fab fa-tumblr</code></li><li>Medium: <code>fab fa-medium</code></li><li>Slack: <code>fab fa-slack</code></li><li>Sina Weibo: <code>fab fa-weibo</code></li><li>Wechat: <code>fab fa-weixin</code></li><li>QQ: <code>fab fa-qq</code></li><li>Zhihu: <code>fab fa-zhihu</code></li></ul><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p></blockquote><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活music配置即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 是否在首页显示音乐.</span><span class="token key atrule">music</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token comment">#非吸底模式有效</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> 听听音乐  <span class="token key atrule">autoHide</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment"># hide automaticaly</span>  <span class="token key atrule">server</span><span class="token punctuation">:</span> netease   <span class="token comment">#requiremusic platform: netease, tencent, kugou, xiami, baidu</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> playlist    <span class="token comment">#require song, playlist, album, search, artist</span>  <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">2722795475</span>    <span class="token comment">#requiresong id / playlist id / album id / search keyword</span>  <span class="token key atrule">fixed</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>       <span class="token comment"># 开启吸底模式</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token comment"># 是否自动播放</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'#42b983'</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token string">'all'</span>       <span class="token comment"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">'random'</span>   <span class="token comment"># 音频循环顺序, 可选值: 'list', 'random'</span>  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span>   <span class="token comment"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7</span>       <span class="token comment"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  <span class="token key atrule">listFolded</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 列表默认折叠</span>  <span class="token key atrule">hideLrc</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>     <span class="token comment"># 隐藏歌词</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>server</code>可选<code>netease</code>（网易云音乐），<code>tencent</code>（QQ音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p><p><code>baidu</code>（百度音乐）。</p><p><code>type</code>可选<code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p><p><code>id</code>获取方法示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，浏览器地址栏后面会有一串数字，<code>playlist</code>的<code>id</code></p><p>即为这串数字。</p></blockquote><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>hide</td><td><code>false</code></td><td>隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">hide</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li><li>CDN加速</li></ul><h2 id="个人配置"><a href="#个人配置" class="headerlink" title="个人配置"></a>个人配置</h2><p>以下为个人所做的修改</p><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector">.bg-color</span> <span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> #007FFF 0%<span class="token punctuation">,</span> #022E6A 100%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>此处修改为蓝色渐变色</p><h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><p>也可在文章的img中显示指定图片,可以使用外部图床或相对路径来访问本地图片</p><p>可以在根目录下的  <code>_config.yml</code> 将 <code>post_asset_folder</code> 设置为 <code>true</code> 这样在 <code>hexo new post</code> 时会自动创建同名文件夹用于存放图片</p><h3 id="修改-banner-遮罩"><a href="#修改-banner-遮罩" class="headerlink" title="修改 banner 遮罩"></a>修改 banner 遮罩</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-cover:after</code> 来修改背景颜色：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*.bg-cover:after {    -webkit-animation: rainbow 60s infinite;    animation: rainbow 60s infinite;}*/</span><span class="token punctuation">.</span>bg<span class="token operator">-</span>cover<span class="token operator">:</span>after <span class="token punctuation">{</span>    <span class="token comment">/*    position: absolute;    z-index: 1;    width: 100%;    height: 100%;    display: block;    left: 0;    top: 0;*/</span>    <span class="token comment">/*content: "";*/</span>    position<span class="token operator">:</span> absolute<span class="token punctuation">;</span>    top<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    left<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    content<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    background<span class="token operator">-</span>color<span class="token operator">:</span> gray<span class="token punctuation">;</span>    opacity<span class="token operator">:</span> <span class="token number">0.1</span><span class="token punctuation">;</span>    z<span class="token operator">-</span>index<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    width<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>    height<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处删去遮罩变色效果并改用灰色透明遮罩以使主题突出</p><h3 id="背景雪花"><a href="#背景雪花" class="headerlink" title="背景雪花"></a>背景雪花</h3><p>从<a href="https://github.com/Yafine/cdn/blob/3.2.7/source/js/snow1.js">这里</a>获取js脚本后,创建并复制在主题文件夹下 <code>source/js/snow.js</code>中</p><p>在主题文件夹下 <code>layout/layout.ejs</code> 中添加</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"/js/snow.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="看板娘"><a href="#看板娘" class="headerlink" title="看板娘"></a>看板娘</h3><p>在主题文件夹下 <code>layout/layout.ejs</code> 中添加</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/autoload.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="动态标题"><a href="#动态标题" class="headerlink" title="动态标题"></a>动态标题</h3><p>在主题文件夹下 <code>layout/layout.ejs</code> 中添加</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>    <span class="token keyword">var</span> OriginTitile<span class="token operator">=</span>document<span class="token punctuation">.</span>title<span class="token punctuation">,</span>st<span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"visibilitychange"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        document<span class="token punctuation">.</span>hidden<span class="token operator">?</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>title<span class="token operator">=</span><span class="token string">"&lt;(￣︶￣)&gt;偷偷藏起来"</span><span class="token punctuation">,</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>title<span class="token operator">=</span><span class="token string">"(*/ω＼*)被发现了"</span>st<span class="token operator">=</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>document<span class="token punctuation">.</span>title<span class="token operator">=</span>OriginTitile<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">3e3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="首页诗词"><a href="#首页诗词" class="headerlink" title="首页诗词"></a>首页诗词</h3><p>在主题文件夹下 <code>layout/_partial/head.ejs</code> 添加</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://sdk.jinrishici.com/v2/browser/jinrishici.js"</span> charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>并将主题文件夹下 <code>layout/_partial/bg-cover-content.ejs</code> 中 <code>&lt;%= config.description %&gt;</code> 修改为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token string">'&lt;span id="jinrishici-sentence"&gt;正在加载今日诗词....&lt;/span&gt;'</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-cover .description</code> 来修改诗词字体：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">.</span>bg<span class="token operator">-</span>cover <span class="token punctuation">.</span>description <span class="token punctuation">{</span>    font<span class="token operator">-</span>weight<span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">;</span>    font<span class="token operator">-</span>size<span class="token operator">:</span> <span class="token number">1.25</span>rem<span class="token punctuation">;</span>    line<span class="token operator">-</span>height<span class="token operator">:</span> <span class="token number">1.4</span>em<span class="token punctuation">;</span>    margin<span class="token operator">-</span>bottom<span class="token operator">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>    color<span class="token operator">:</span> white<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处将颜色改为白色并将字体加粗一倍</p><h3 id="修改-Fork-Me-颜色"><a href="#修改-Fork-Me-颜色" class="headerlink" title="修改 Fork Me 颜色"></a>修改 Fork Me 颜色</h3><p>在主题文件夹下 <code>layout/_partial/github-link.ejs</code>文件中，搜索 <code>.github-corner svg</code> 来修改Fork Me 颜色：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">.</span>github<span class="token operator">-</span>corner svg <span class="token punctuation">{</span>    color<span class="token operator">:</span> #<span class="token number">007</span>FFF<span class="token punctuation">;</span>    fill<span class="token operator">:</span> #fff<span class="token punctuation">;</span>    height<span class="token operator">:</span> <span class="token number">64</span>px<span class="token punctuation">;</span>    width<span class="token operator">:</span> <span class="token number">64</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数独(程序设计II大作业)</title>
      <link href="/2021/08/08/shu-du-cheng-xu-she-ji-ii-da-zuo-ye/"/>
      <url>/2021/08/08/shu-du-cheng-xu-she-ji-ii-da-zuo-ye/</url>
      
        <content type="html"><![CDATA[<h1 id="程序设计II大作业实验报告"><a href="#程序设计II大作业实验报告" class="headerlink" title="程序设计II大作业实验报告"></a>程序设计II大作业实验报告</h1><h2 id="实验题目与要求"><a href="#实验题目与要求" class="headerlink" title="实验题目与要求"></a>实验题目与要求</h2><p>本次实验主要内容是实现一个简单的数独软件,具体要求如下</p><h3 id="基本功能部分"><a href="#基本功能部分" class="headerlink" title="基本功能部分"></a>基本功能部分</h3><h4 id="程序说明信息以及交互"><a href="#程序说明信息以及交互" class="headerlink" title="程序说明信息以及交互"></a>程序说明信息以及交互</h4><p>程序运行后,显示游戏开始界面,此时点击任意位置进入游戏</p><p><img src="%E5%9B%BE%E7%89%87/%E5%BC%80%E5%A7%8B%E7%95%8C%E9%9D%A2.jpg" alt="开始界面"></p><p>在进入游戏过程中会显示游戏基本操作说明</p><p><img src="%E5%9B%BE%E7%89%87/%E6%8F%90%E7%A4%BA%E4%BF%A1%E6%81%AF.jpg" alt="提示信息"></p><p>其余游戏基本功能在游戏中通过按钮可以清晰展示,<strong>无需额外说明</strong></p><p><img src="%E5%9B%BE%E7%89%87/%E6%B8%B8%E6%88%8F%E7%95%8C%E9%9D%A2.jpg" alt="游戏界面"></p><p>点击退出按钮即可退出游戏</p><h4 id="打印数独"><a href="#打印数独" class="headerlink" title="打印数独"></a>打印数独</h4><p>在游戏过程中数独的当前状态在屏幕左侧动态显示出来,故<strong>无需额外打印数独操作</strong></p><h4 id="输入数独"><a href="#输入数独" class="headerlink" title="输入数独"></a>输入数独</h4><p>点击自定义按钮,进入接受输入数独状态</p><p><img src="%E5%9B%BE%E7%89%87/%E8%BE%93%E5%85%A5%E6%95%B0%E7%8B%AC1.jpg" alt="输入数独1"></p><blockquote><p>输入是合法的（输入全是数字字符,且已填入位置的行列对角线九宫格不重复）</p></blockquote><p>输入过程中,由于按钮的设计,在试图输入不合法的数字时,点击按钮无效,数字不被接受,因此可以保证输入是合法的</p><p><img src="%E5%9B%BE%E7%89%87/%E8%BE%93%E5%85%A5%E6%95%B0%E7%8B%AC2.jpg" alt="输入数独2"></p><blockquote><p>我们可以确定的是,对普通数独（9x9）,目前已知至少要有17 个已知数字才可能有唯一解。</p></blockquote><p>在点击确定后,至少含17个数字的合法数独会被固定成为题目,其中题目的数字用<em><strong>蓝色</strong></em>显示,与用<em><strong>白色</strong></em>显示的玩家填入的数字区分</p><p><img src="%E5%9B%BE%E7%89%87/%E8%BE%93%E5%85%A5%E6%95%B0%E7%8B%AC3.jpg" alt="输入数独3"></p><h4 id="生成数独"><a href="#生成数独" class="headerlink" title="生成数独"></a>生成数独</h4><p>点击新游戏按钮后,程序将会自动生成一个合法数独,此处我使用<strong>挖空法</strong>来保证生成的数独是有解的,但并不保证有<strong>唯一解</strong></p><p><img src="%E5%9B%BE%E7%89%87/%E7%94%9F%E6%88%90%E6%95%B0%E7%8B%AC.jpg" alt="生成数独"></p><p>生成的题目中预先给出的数字个数统一设定为21</p><h4 id="输出数独的解"><a href="#输出数独的解" class="headerlink" title="输出数独的解"></a>输出数独的解</h4><p>点击解答按钮,如果数独有解,输出数独的一个解</p><p><img src="%E5%9B%BE%E7%89%87/%E8%BE%93%E5%87%BA%E8%A7%A3.jpg" alt="输出解"></p><h4 id="填入数字合法情况"><a href="#填入数字合法情况" class="headerlink" title="填入数字合法情况"></a>填入数字合法情况</h4><p>通过点击按钮向数独中填入数字</p><p><img src="%E5%9B%BE%E7%89%87/%E8%BE%93%E5%85%A5%E6%95%B0%E5%AD%971.jpg" alt="输入数字1"></p><p>如果填入数字合法,将会在数独中直接显示</p><p><img src="%E5%9B%BE%E7%89%87/%E8%BE%93%E5%85%A5%E6%95%B0%E5%AD%972.jpg" alt="输入数字2"></p><h4 id="填入数字异常情况"><a href="#填入数字异常情况" class="headerlink" title="填入数字异常情况"></a>填入数字异常情况</h4><blockquote><p>如果试图修改题目固定的数字</p></blockquote><p><strong>蓝色</strong>显示的题目固定的数字方格在点击后也会显示1-9的小按钮,但点击后无任何反应</p><p><img src="%E5%9B%BE%E7%89%87/%E5%90%88%E6%B3%95%E6%95%B0%E5%AD%971.jpg" alt="合法数字1"></p><blockquote><p>如果填入的数字过大</p></blockquote><p>输入数字只能使用输入1-9,不存在填入的数字过大的情况</p><blockquote><p>如果输入的填入位置不合法</p></blockquote><p>输入数字只能使用每个数字方格对应的按钮输入,不存在填入位置不合法的情况</p><blockquote><p>如果填入的数字和已有数字重复</p></blockquote><p>在填入的数字如果与行列对角线九宫格重复,数字将不会被填入,同时所有相同数字会被标为<strong>红色</strong>以提示错误</p><p><img src="%E5%9B%BE%E7%89%87/%E5%90%88%E6%B3%95%E6%95%B0%E5%AD%972.jpg" alt="合法数字2"></p><h4 id="数独提示信息"><a href="#数独提示信息" class="headerlink" title="数独提示信息"></a>数独提示信息</h4><p>点击提示按钮后,程序将会求解当前数独,选取其中的一个解,并按照从左到右,从上到下的顺序,选择第一个未填数字的方格显示答案中应有的数字</p><p><img src="%E5%9B%BE%E7%89%87/%E6%8F%90%E7%A4%BA.jpg" alt="提示"></p><p>可以通过不停的提示获得最终的一个解</p><h4 id="保存游戏状态"><a href="#保存游戏状态" class="headerlink" title="保存游戏状态"></a>保存游戏状态</h4><p>点击存档按钮可以打开存档列表,在游戏中设计了五个存档位置,可以保存5个不同的存档</p><p><img src="%E5%9B%BE%E7%89%87/%E5%AD%98%E6%A1%A31.jpg" alt="存档1"></p><p>在每个存档的右侧有<strong>存档</strong>和<strong>读档</strong>两个按钮,点击存档会显示存档名输入界面</p><p><img src="%E5%9B%BE%E7%89%87/%E5%AD%98%E6%A1%A32.jpg" alt="存档2"></p><p>在此界面可以使用键盘输入存档名字,存档名字只可以为英文大写字母,并且不支持删除字母</p><p><img src="%E5%9B%BE%E7%89%87/%E5%AD%98%E6%A1%A33.jpg" alt="存档3"></p><p>点击确定后存档保存完成,存档名输入界面和存档列表淡出,恢复到数独界面</p><p>如果保存的存档位置已有存档,将会覆盖原先的存档,不同存档的存档名可以相同</p><h4 id="加载游戏状态"><a href="#加载游戏状态" class="headerlink" title="加载游戏状态"></a>加载游戏状态</h4><p>点击存档按钮可以打开存档列表,点击读档即可载入先前保存的存档</p><p><img src="%E5%9B%BE%E7%89%87/%E8%AF%BB%E6%A1%A3.jpg" alt="读档"></p><p>在存档名中会记录存档保存的时间,存档中存有题目以及玩家输入的数字</p><h3 id="扩展部分"><a href="#扩展部分" class="headerlink" title="扩展部分"></a>扩展部分</h3><h4 id="图形化界面"><a href="#图形化界面" class="headerlink" title="图形化界面"></a>图形化界面</h4><p>图形化界面用<code>Unity 2021.1.7f1c1 (64-bit)</code>实现,脚本语言采用<code>C#</code></p><h4 id="高级搜索技巧"><a href="#高级搜索技巧" class="headerlink" title="高级搜索技巧"></a>高级搜索技巧</h4><p>在基础的DFS算法之外,实现了GBFS(贪婪最佳优先算法)与DLX(跳舞链)两种高级搜索算法,都可以独立完成对对角线数独的求解</p><p><img src="%E5%9B%BE%E7%89%87/%E9%AB%98%E7%BA%A7%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A71.jpg" alt="高级搜索技巧1"></p><p>设计了四个选项按钮,在解答前选择不同的选项,再点击解答按钮将会采用不同的算法进行求解,同时四个按钮在同一时刻仅能有一个被选中</p><p><img src="%E5%9B%BE%E7%89%87/%E9%AB%98%E7%BA%A7%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A72.jpg" alt="高级搜索技巧2"></p><blockquote><p>Issues #90<br><br>zhiyuan @PB17121741<br><br>这一得分点的设置目的主要是鼓励同学们了解通用的高级搜索技术,并将其进行具体实现。对于特化的一些解数独的算法其实偏离了我们的设计目的。如果使用dlx算法作为高级算法提交,首先需要额外增加数独类型开关,指定数独为不考虑对角线的数独；其次实现dlx算法解不考虑对角线的数独。</p></blockquote><p>实际上,DLX算法可以实现对<strong>对角线数独</strong>的求解,因此未增加数独类型开关,而是实现了DLX对对角线数独的求解</p><h4 id="多线程优化"><a href="#多线程优化" class="headerlink" title="多线程优化"></a>多线程优化</h4><p>使用多线程技术,采用DLX算法并行搜索输出数独全部的解</p><p><img src="%E5%9B%BE%E7%89%87/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%8C%961.jpg" alt="多线程优化1"></p><p>选择DLX多线程选项后点击解答,会在数独右侧显示<strong>上一个</strong>和<strong>下一个</strong>两个按钮</p><p><img src="%E5%9B%BE%E7%89%87/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%8C%962.jpg" alt="多线程优化2"></p><p>点击<strong>下一个</strong>后可以开始查看数独所有可能的解</p><p><img src="%E5%9B%BE%E7%89%87/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%8C%963.jpg" alt="多线程优化3"></p><p>点击<strong>上一个</strong>和<strong>下一个</strong>可以在不同的解之间进行切换</p><p><img src="%E5%9B%BE%E7%89%87/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%8C%964.jpg" alt="多线程优化4"></p><h2 id="具体设计"><a href="#具体设计" class="headerlink" title="具体设计"></a>具体设计</h2><p>该部分<strong>简单介绍</strong>实验中的函数拆分与图形化实现的细节,例如,包括哪些函数,函数参数是什么,作用是什么等。扩展功能的介绍等。</p><h3 id="数独基本单元的构造"><a href="#数独基本单元的构造" class="headerlink" title="数独基本单元的构造"></a>数独基本单元的构造</h3><p>使用预制体<code>prefab</code>来构造数独方格,然后进行实例化</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">for (int i = 0; i &lt; 9; i++)    for (int j = 0; j &lt; 9; j++)    {        Data.unitarray[i, j] = Instantiate(prefab);        Data.unitarray[i, j].transform.GetComponent&lt;Unit&gt;().i = i; Data.unitarray[i, j].transform.GetComponent&lt;Unit&gt;().j = j;        Data.unitarray[i, j].GetComponent&lt;RectTransform&gt;().localPosition = new Vector3((j / 3) * 20 + 95 * j + 1920 / 2 - 700, -(i / 3) * 20 - 95 * i + 1080 / 2 + 420);        Data.unitarray[i, j].transform.SetParent(father);    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数独方格本身是一个按钮,又包含9个小按钮来支持数字的修改</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public void ChangevalueByButton(int number)//通过按钮修改单元的值{    int i = transform.GetComponent&lt;Unit&gt;().i, j = transform.GetComponent&lt;Unit&gt;().j;    if (Data.question[i][j] != 0) return;    if (Sudoku.put(ref Data.condition, i, j, number))        Sudoku.printSudoku(ref Data.condition);    else    {        Sudoku.printSudoku(ref Data.condition);        for(int m=0;m&lt;9;m++)            for(int n=0;n&lt;9;n++)                if(Data.condition[m][n]==number)                     Data.unitarray[m,n].transform.Find("Value").GetComponent&lt;Text&gt;().color = new Color(1, (50f / 255), 0);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时支持外部函数调用来修改数字</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public void Changevalue(int number)//修改单元的值{    int i = transform.GetComponent&lt;Unit&gt;().i, j = transform.GetComponent&lt;Unit&gt;().j;    if (number == 0)        transform.Find("Value").GetComponent&lt;Text&gt;().text = "";    else        transform.Find("Value").GetComponent&lt;Text&gt;().text = number.ToString();    if (Data.question[i][j] == 0)        transform.Find("Value").GetComponent&lt;Text&gt;().color = new Color(1, 1, 1);    else        transform.Find("Value").GetComponent&lt;Text&gt;().color = new Color((71f / 255), (243f / 255), 1);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>增加了对鼠标右键点击的监听,通过鼠标右键来删除已填写的数字</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">void Start(){    rightClick.AddListener(new UnityAction(ButtonRightClick));}public void OnPointerClick(PointerEventData eventData){    if (eventData.button == PointerEventData.InputButton.Right)        rightClick.Invoke();}private void ButtonRightClick()//右键删除数字{    int i = transform.GetComponent&lt;Unit&gt;().i, j = transformGetComponent&lt;Unit&gt;().j;    if (Data.question[i][j] != (char)0) return;    Data.condition[i][j] = (char)0;    Sudoku.printSudoku(ref Data.condition);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据的存储"><a href="#数据的存储" class="headerlink" title="数据的存储"></a>数据的存储</h3><p>使用静态类<code>Data</code>来实现对基本变量的统一调度</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">static public GameObject[,] unitarray = new GameObject[10, 10];static public List&lt;List&lt;char&gt;&gt; question = new List&lt;List&lt;char&gt;&gt;(9);static public List&lt;List&lt;char&gt;&gt; condition = new List&lt;List&lt;char&gt;&gt;(9);static public List&lt;List&lt;char&gt;&gt; solution = new List&lt;List&lt;char&gt;&gt;(9);static public int now;//当前sudoku的解的序数,从1开始static public int sudokunum;//当前的sudoku的数组下标,从0开始static public List&lt;DLX&gt; sudoku = new List&lt;DLX&gt;();static public List&lt;List&lt;List&lt;int&gt;&gt;&gt; matrix = new List&lt;List&lt;List&lt;int&gt;&gt;&gt;();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时编写了对<code>List&lt;List&lt;char&gt;&gt;</code>进行初始化与拷贝的函数</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">static public void initboard(ref List&lt;List&lt;char&gt;&gt; board)//初始化{    board.Clear();    for (int i = 0; i &lt; 9; i++)    {        List&lt;char&gt; row = new List&lt;char&gt; { (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0 };        board.Add(row);    }}static public void copyboard(ref List&lt;List&lt;char&gt;&gt; des, refList&lt;List&lt;char&gt;&gt; sorce)//复制{    des.Clear();    for (int i = 0; i &lt; 9; i++)    {        List&lt;char&gt; row = new List&lt;char&gt;();        for (int j = 0; j &lt; 9; j++)            row.Add(sorce[i][j]);        des.Add(row);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数独的基本本功能"><a href="#数独的基本本功能" class="headerlink" title="数独的基本本功能"></a>数独的基本本功能</h3><h4 id="当前数独状态的输出"><a href="#当前数独状态的输出" class="headerlink" title="当前数独状态的输出"></a>当前数独状态的输出</h4><p>通过调用数独方格的<code>public void Changevalue(int number)</code>来实现输出</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">static public void printSudoku(ref List&lt;List&lt;char&gt;&gt; board)//输出数独{    for (int i = 0; i &lt; 9; i++)        for (int j = 0; j &lt; 9; j++)            Data.unitarray[i, j].GetComponent&lt;Unit&gt;().Changevalue((int)(board[i][j]));}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="dfs算法求解数独"><a href="#dfs算法求解数独" class="headerlink" title="dfs算法求解数独"></a>dfs算法求解数独</h4><p>使用深度优先搜索完成对数独的求解</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">static private void dfs(ref List&lt;List&lt;char&gt;&gt; board, int pos)//深度优先索{    if (pos == spaces.Count)    {        valid = true;        return;    }    int i = spaces[pos].Key, j = spaces[pos].Value;    int mask = line[i] | column[j] | block[i / 3, j / 3];    if (i == j) mask |= diagonal[0]; if (i + j == 8) mask |= diagonal[1];//x数独    mask = ~(mask) &amp; 0x1ff;    for (; mask != 0 &amp;&amp; !valid; mask &amp;= (mask - 1))    {        int digit = __builtin_ctz(mask);        flip(i, j, digit);        board[i][j] = (char)(digit + 1);        dfs(ref board, pos + 1);        flip(i, j, digit);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为提高效率,对数独行列九宫格对角线的状态进行<code>状态压缩</code></p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">static private int __builtin_ctz(int x)//获取二进制数末尾的0的个数{    int digit = 0;    while ((x &amp; (1 &lt;&lt; digit)) == 0) digit++;    return digit;}static private void flip(int i, int j, int digit)//改变某一位状态{    line[i] ^= (1 &lt;&lt; digit);    column[j] ^= (1 &lt;&lt; digit);    block[i / 3, j / 3] ^= (1 &lt;&lt; digit);    if (i == j) diagonal[0] ^= 1 &lt;&lt; digit; if (i + j == 8) diagonal[1] ^= 1 &lt;&lt; digit;//x数独}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="提示功能"><a href="#提示功能" class="headerlink" title="提示功能"></a>提示功能</h4><p>通过求解数独再选取第一个空格填入正确答案来实现提示</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">static public KeyValuePair&lt;int, int&gt; hint(ref List&lt;List&lt;char&gt;&gt; board)/提示{    KeyValuePair&lt;int, int&gt; pos = new KeyValuePair&lt;int, int&gt;(-1, -1);    if (isfinish(ref board)) return pos;    for (int i = 0; i &lt; 9; i++)        for (int j = 0; j &lt; 9; j++)            if (pos.Key == -1 &amp;&amp; board[i][j] == (char)0) pos = new KeyValuePair&lt;int, int&gt;(i, j);    if (solve_Sudoku(ref board))        return pos;    return new KeyValuePair&lt;int, int&gt;(-1, -1);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="整个数独合法性的判断"><a href="#整个数独合法性的判断" class="headerlink" title="整个数独合法性的判断"></a>整个数独合法性的判断</h4><p>逐个将数字填入,并更新行列九宫格对角线的状态,直到数字填完或出现矛盾为止</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">static public bool judge(ref List&lt;List&lt;char&gt;&gt; board, bool output)//整数独判断{    for (int i = 0; i &lt; 9; i++)        for (int j = 0; j &lt; 9; j++)            if (board[i][j] &lt; 0 || board[i][j] &gt; 9)                return false;    Array.Clear(line, 0, line.Length);    Array.Clear(column, 0, column.Length);    Array.Clear(block, 0, block.Length);    Array.Clear(diagonal, 0, diagonal.Length);//x数独    valid = false;    for (int i = 0; i &lt; 9; ++i)        for (int j = 0; j &lt; 9; ++j)            if (board[i][j] != 0)            {                int digit = board[i][j] - 1;                int mask = line[i] | column[j] | block[i / 3, j / 3];                if (i == j) mask |= diagonal[0]; if (i + j == 8) mask |= diagonal[1];//x数独                if (((1 &lt;&lt; digit) &amp; mask) != 0)                    return false;                flip(i, j, digit);            }    return true;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="填入数字"><a href="#填入数字" class="headerlink" title="填入数字"></a>填入数字</h4><p>将数字填入后调用<code>static public bool judge(ref List&lt;List&lt;char&gt;&gt; board, bool output)</code>进行判断</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">static public bool put(ref List&lt;List&lt;char&gt;&gt; board, int line, intcolumn, int number)//填入数字{    board[line][column] = (char)number;    if (!judge(ref board, true))    {        board[line][column] = (char)0;        return false;    }    return true;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="生成数独-1"><a href="#生成数独-1" class="headerlink" title="生成数独"></a>生成数独</h4><p>采用挖空法生成数独以保证数独有解,首先随机填入6个数字,然后对数独进行求解,求解完成后再随机挖去50个数字得到最终的题目</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">static public void generate(ref List&lt;List&lt;char&gt;&gt; board)//生成数独{    int step = 0;    while (true)    {        int number, line, column;        while (step &lt;= 6)        {            number = ra.Next(1, 9); line = ra.Next(0, 8); column = raNext(0, 8);            board[line][column] = (char)(number);            if (!judge(ref board, false)) board[line][column] = (char)0;            else step++;        }        if (solve_Sudoku(ref board)) break;    }    for (step = 1; step &lt;= 60; step++)    {        int line = ra.Next(0, 9), column = ra.Next(0, 9);        if (board[line][column] == 0) step--;        board[line][column] = (char)(0);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="判断数独是否解答完毕"><a href="#判断数独是否解答完毕" class="headerlink" title="判断数独是否解答完毕"></a>判断数独是否解答完毕</h4><p>逐个判断每个格子是否都有数字填入,因不合法的数字的填入不被允许,因此数字全部填入后一定是满足题目的合法解</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">static public bool isfinish(ref List&lt;List&lt;char&gt;&gt; board)//判断游戏是否完成{    for (int i = 0; i &lt; 9; ++i)        for (int j = 0; j &lt; 9; ++j)            if (board[i][j] == 0)                return false;    return true;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>Update()</code>动态检测数独是否完成</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">void Update()//检测游戏是否完成{    if (Sudoku.isfinish(ref Data.condition))        transform.GetComponent&lt;Animator&gt;().SetBool("End", true);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="存档功能"><a href="#存档功能" class="headerlink" title="存档功能"></a>存档功能</h3><p>存档功能依托于Unity的本地持久化类<code>PlayerPrefs</code>,但它不能存储数组,因此编写了<code>PlayerPrefsX</code>类来实现对数独的二维数字的存取</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public static class PlayerPrefsX{    public static void SetInt2Array(string key, int[,] int2Array)//保存二维数组    {        int[] intArray = new int[81];        for (int i = 0; i &lt; 9; i++)            for (int j = 0; j &lt; 9; j++)                intArray[i * 9 + j] = int2Array[i, j];        SetIntArray(key, intArray);    }    public static int[,] GetInt2Array(string key)//获取二维数组    {        int[] intArray = GetIntArray(key);        if (intArray.Length == 0)        {            intArray = new int[81];            Array.Clear(intArray, 0, intArray.Length);        }        int[,] int2Array = new int[10, 10];        for (int i = 0; i &lt; 9; i++)            for (int j = 0; j &lt; 9; j++)                int2Array[i, j] = intArray[i * 9 + j];        return int2Array;    }    public static bool SetIntArray(string key, int[] intArray)//保存一维数组    {        if (intArray.Length == 0) return false;        System.Text.StringBuilder sb = new System.Text.StringBuilder();        for (int i = 0; i &lt; intArray.Length - 1; i++)            sb.Append(intArray[i]).Append("|");        sb.Append(intArray[intArray.Length - 1]);        try { PlayerPrefs.SetString(key, sb.ToString()); }        catch { return false; }        return true;    }    public static int[] GetIntArray(string key)//获取一维数组    {        if (PlayerPrefs.HasKey(key))        {            string[] stringArray = PlayerPrefs.GetString(key).Split("|"[0]);            int[] intArray = new int[stringArray.Length];            for (int i = 0; i &lt; stringArray.Length; i++)                intArray[i] = Convert.ToInt32(stringArray[i]);            return intArray;        }        return new int[0];    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现了读取时间并将其格式化为字符串的功能</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public static String time() //获取当前时间{    int hour = DateTime.Now.Hour, minute = DateTime.Now.Minute, second = DateTime.Now.Second,    year = DateTime.Now.Year, month = DateTime.Now.Month, day = DateTime.Now.Day;    return string.Format("{0:D2}:{1:D2}:{2:D2} " + "{3:D4}/{4:D2}/{5:D2}", hour, minute, second, year, month, day);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过<code>Keycode</code>枚举读取用户输入的存档名字母</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">if (inputnumber != 0)    if (Input.anyKeyDown)        foreach (KeyCode keyCode in Enum.GetValues(typeof(KeyCode)))            if (Input.GetKeyDown(keyCode) &amp;&amp; ((int)keyCode) &gt;= 97 &amp;&amp; ((int)keyCode) &lt;= 122)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="GBFS算法的实现"><a href="#GBFS算法的实现" class="headerlink" title="GBFS算法的实现"></a>GBFS算法的实现</h3><p>在DFS的每一步都对当前局面进行判断,启发式的寻找可行状态数最少的空继续迭代,同时也能够在最小状态数为0时回溯</p><p>使用<code>static private KeyValuePair&lt;int, int&gt; find(ref List&lt;List&lt;char&gt;&gt; board)</code>启发式寻找下一层迭代的最优位置</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">static private KeyValuePair&lt;int, int&gt; find(ref List&lt;List&lt;char&gt;&gt; board){    int max = int.MaxValue; KeyValuePair&lt;int, int&gt; pos = new KeyValuePair&lt;int, int&gt;(-1, -1);    for (int i = 0; i &lt; 9; i++)        for (int j = 0; j &lt; 9; j++)        {            if (board[i][j] == 0)            {                int mask = line[i] | column[j] | block[i / 3, j / 3];                if (i == j) mask |= diagonal[0]; if (i + j == 8) mask |= diagonal[1];//x数独                mask = ~(mask) &amp; 0x1ff;                if (mask == 0) return new KeyValuePair&lt;int, int&gt;(-1, -1);                int num = 1;                while ((mask &amp;= (mask - 1)) != 0) num++;                if (num == 1) return new KeyValuePair&lt;int, int&gt;(i, j);                if (num &lt; max) pos = new KeyValuePair&lt;int, int&gt;(i, j);            }        }    return pos;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DLX算法实现"><a href="#DLX算法实现" class="headerlink" title="DLX算法实现"></a>DLX算法实现</h3><blockquote><p>在计算机科学中,X算法可用来求解精确覆盖问题。此名称最早在高德纳的论文《舞蹈链》中出现,他认为此算法是“试错法中最显而易见”的。就技术而言,X算法是一个深度优先的不确定性回溯算法。由于X算法是一个解决精确覆盖问题的简洁方法,高德纳希望通过该算法体现舞蹈链数据结构的高效性,他把使用后者的X算法称为DLX。</p></blockquote><p>DLX算法的基本框架如下</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">public class Node{    public Node up; public Node down; public Node left; public Node right; public Node colRoot; public Node rowRoot;    public int Num; public int Size;//行数 列元素数    public Node(int i = -1) //构造函数    {        Num = i;        Size = 0;    }};private Node Head;private List&lt;int&gt; result = new List&lt;int&gt;();private int _row, _col;public List&lt;List&lt;int&gt;&gt; solve = new List&lt;List&lt;int&gt;&gt;();public DLX(ref List&lt;List&lt;int&gt;&gt; matrix, int m, int n)//构造函数{    _row = m;    _col = n;    Head = new Node();    Head.up = Head;    Head.down = Head;    Head.right = Head;    Head.left = Head;    init();    link(ref matrix);}private void init()//初始化行列{    Node newNode;    for (int ix = 0; ix &lt; _col; ++ix) //表头向后构造列对象    {        newNode = new Node();        newNode.up = newNode;        newNode.down = newNode;        newNode.right = Head.right;        newNode.left = Head;        newNode.right.left = newNode;        Head.right = newNode;    }    for (int ix = 0; ix &lt; _row; ++ix) //表头向下构造行对象    {        newNode = new Node(_row - ix);        newNode.down = Head.down;        newNode.up = Head;        newNode.down.up = newNode;        Head.down = newNode;    }}private void link(ref List&lt;List&lt;int&gt;&gt; matrix)//连接各个节点{    Node current_row = Head, current_col, newNode, current; //当前行对象,当前列对象,新节点,当前节点    for (int row = 0; row &lt; _row; ++row)    {        current_row = current_row.down; current_col = Head;        for (int col = 0; col &lt; _col; ++col)        {            current_col = current_col.right;            if (matrix[row][col] == 0)                continue;            newNode = new Node();            newNode.colRoot = current_col;            newNode.rowRoot = current_row;            newNode.down = current_col;            newNode.up = current_col.up;            newNode.up.down = newNode;            current_col.up = newNode;            if (current_row.Size == 0)            {                current_row.right = newNode;                newNode.left = newNode;                newNode.right = newNode;                current_row.Size++;            }            current = current_row.right;            newNode.left = current.left;            newNode.right = current;            newNode.left.right = newNode;            current.left = newNode;            current_col.Size++;        }    }}private void cover(ref Node cRoot) //覆盖列{    cRoot.left.right = cRoot.right;    cRoot.right.left = cRoot.left; //删除该列对象    Node i = cRoot.down, j;    while (i != cRoot)    {        j = i.right;        while (j != i)        {            j.down.up = j.up;            j.up.down = j.down;            j.colRoot.Size--;            j = j.right;        }        i = i.down;    }}private void recover(ref Node cRoot) //恢复列{    Node i = cRoot.up, j;    while (i != cRoot)    {        j = i.left;        while (j != i)        {            j.colRoot.Size++;            j.down.up = j;            j.up.down = j;            j = j.left;        }        i = i.up;    }    cRoot.right.left = cRoot;    cRoot.left.right = cRoot;}public bool Search(int k = 0)//搜索求解{    if (Head.right == Head)        return true;    Node cRoot = new Node(), c;    int minSize = int.MaxValue;    for (c = Head.right; c != Head; c = c.right) //启发式搜索    {        if (c.Size &lt; minSize)        {            minSize = c.Size;            cRoot = c;            if (minSize == 1)                break;            if (minSize == 0)                return false;        }    }    cover(ref cRoot);    Node current_row, current;    for (current_row = cRoot.down; current_row != cRoot; current_row = current_row.down)    {        result.Add(current_row.rowRoot.Num);        for (current = current_row.right; current != current_row; current = current.right)        {            cover(ref current.colRoot);        }        if (Search(k + 1))            return true;        for (current = current_row.left; current != current_row; current = current.left)            recover(ref current.colRoot);        result.RemoveAt(result.Count - 1);    }    recover(ref cRoot);    return false;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在DLX算法中,将精准覆盖问题抽象成从某个01矩阵中选取某些行,使得得到的子矩阵的每一列都有且仅有一个1</p><p>求解数独问题也可以看成一个精准覆盖问题,数独的每个限制条件都可以当作矩阵的一列,分别有:数独每一格都有数字(81)+行不重复(81)+列不重复(81)+九宫格不重复(81)+对角线不重复(18)=342列,在数独的一个格子填入的一个数字可以抽象成矩阵的一行,这样就可以将对角线数独转化为01矩阵从而用DLX算法进行求解</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">static public List&lt;List&lt;int&gt;&gt; sudoku2matrix(string problem) //将数独转为01矩阵{    List&lt;List&lt;int&gt;&gt; matrix = new List&lt;List&lt;int&gt;&gt;();    for (int ix = 0; ix &lt; 81; ++ix)    {        int val = problem[ix];        List&lt;int&gt; current_row = new List&lt;int&gt;();        //for (int i = 1; i &lt;= 324; i++) current_row.Add(0);        for (int i = 1; i &lt;= 342; i++) current_row.Add(0); //x数独        if (val != 0)        {            current_row[ix] = 1;            current_row[81 + ix / 9 * 9 + val - 1] = 1;            current_row[162 + ix % 9 * 9 + val - 1] = 1;            current_row[243 + (ix / 9 / 3 * 3 + ix % 9 / 3) * 9 + val - 1] = 1;            if (ix / 9 == ix % 9)//x数独                current_row[324 + val - 1] = 1; //x数独            if (ix / 9 + ix % 9 == 8)//x数独                current_row[333 + val - 1] = 1; //x数独            matrix.Add(current_row);            continue;        }        for (int jx = 0; jx &lt; 9; ++jx)        {            List&lt;int&gt; current_row2 = new List&lt;int&gt;();            //for (int i = 1; i &lt;= 324; i++) current_row2.Add(0);             for (int i = 1; i &lt;= 342; i++) current_row2.Add(0); //x数独            current_row2[ix] = 1;            current_row2[81 + ix / 9 * 9 + jx] = 1;            current_row2[162 + ix % 9 * 9 + jx] = 1;            current_row2[243 + (ix / 9 / 3 * 3 + ix % 9 / 3) * 9 + jx] = 1;            if (ix / 9 == ix % 9)//x数独                current_row2[324 + jx] = 1; //x数独            if (ix / 9 + ix % 9 == 8)//x数独                current_row2[333 + jx] = 1; //x数独            matrix.Add(current_row2);        }    }    return matrix;}public List&lt;int&gt; matrix2sudoku(ref List&lt;List&lt;int&gt;&gt; matrix, List&lt;int&gt;result) //将01矩阵转换为数独（也可以static）{    List&lt;int&gt; solution = new List&lt;int&gt;();    for (int i = 1; i &lt;= 81; i++) solution.Add(0);    for (int ix = 0; ix &lt; 81; ++ix)    {        List&lt;int&gt; current = matrix[result[ix] - 1];        int pos = 0, val = 0;        for (int jx = 0; jx &lt; 81; ++jx)        {            if (current[jx] == 1)                break;            ++pos;        }        for (int kx = 81; kx &lt; 162; ++kx)        {            if (current[kx] == 1)                break;            ++val;        }        solution[pos] = val % 9 + 1;    }    return solution;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多线程求全部解"><a href="#多线程求全部解" class="headerlink" title="多线程求全部解"></a>多线程求全部解</h3><p>找到数独的第一个空格,分别填入1-9,判断合法性后,对合法的情况分别用DLX算法求解</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">static public void solve()//测试函数{    for (int i = 0; i &lt; 9; i++)        for (int j = 0; j &lt; 9; j++)            if (Data.solution[i][j] == 0)            {                for (int k = 1; k &lt;= 9; k++)                {                    Data.solution[i][j] = (char)k;                    if (Sudoku.judge(ref Data.solution, false))                    {                        List&lt;List&lt;char&gt;&gt; branch = new List&lt;List&lt;char&gt;&gt;();//复制solution中的内容到branch,避免不同线程读取时solution改变                        Data.initboard(ref branch);                        for(int m=0;m&lt;9;m++)                            for(int n=0;n&lt;9;n++)                                branch[m][n]=Data.solution[m][n];                        Thread thread = new Thread(new ParameterizedThreadStart(solve));                        thread.Start(branch);                    }                }                return;//仅通过第一个空格来分支多线程            }}static void solve(object obj)//求解线程函数{    List&lt;List&lt;char&gt;&gt; solution=(List&lt;List&lt;char&gt;&gt;)obj;    List&lt;List&lt;int&gt;&gt; current = null;    DLX sudoku=Sudoku.solve_SudokuMuliti(ref solution, ref current);    if(sudoku.solve.Count!=0)    {           Data.sudoku.Add(sudoku);        Data.matrix.Add(current);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="界面的设计"><a href="#界面的设计" class="headerlink" title="界面的设计"></a>界面的设计</h3><p>数独显示在游戏界面左侧,按钮显示在界面右侧,通过Unity中的<code>Animation</code>实现对UI元素的调动</p><p>流程图如下所示</p><p><img src="%E5%9B%BE%E7%89%87/%E6%B5%81%E7%A8%8B.jpg" alt="流程"></p><p>进入游戏后首先进入开始界面,然后进入游戏界面</p><p>在游戏胜利后进入游戏结束界面,然后重新返回游戏界面,这是三角小循环</p><p>在点击存档后进入存档界面,保存存档后回到游戏界面,这是菱形小循环</p><h2 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h2><p>该部分介绍实验中遇到的bug与报错</p><h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><ul><li><p>报错内容</p><p>  <code>ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.</code></p></li><li><p>报错原因</p><p>  C#中的<code>List&lt;T&gt;</code>泛型类需要初始化后才能直接使用数组下标访问</p></li><li><p>解决方案</p><p>  在使用数组下标访问前,先用0填充进行初始化</p></li></ul><h3 id="bug1"><a href="#bug1" class="headerlink" title="bug1"></a>bug1</h3><ul><li><p>bug内容</p><p>  将<code>List&lt;List&lt;char&gt;&gt;&gt;</code>进行复制后发现修改复制后的内容会影响原对象的内容</p></li><li><p>bug原因</p><p>  C#中的<code>List&lt;T&gt;</code>泛型类中的T若仍是<code>&lt;List&lt;char&gt;&gt;</code>会采用传递引用</p></li><li><p>解决方案</p><p>  不采用直接赋值的方式,而是采用对元素逐个赋值的方式进行复制</p></li></ul><h3 id="bug2"><a href="#bug2" class="headerlink" title="bug2"></a>bug2</h3><ul><li><p>bug内容</p><p>  使用多线程进行求解时发现不同线程求出相同的解</p></li><li><p>bug原因</p><p>  不同线程的执行顺序并不依赖于调用顺序,在主线程对题目进行修改时,调用的线程可能还没能完成对题目的读取,这样会造成两个先后调用的线程本应读取不同的题目却读取了相同的题目</p></li><li><p>解决方案</p><p>  将题目复制成为一个新对象,传递给线程,这样就解除了不同线程对同一个对象进行读取的问题</p></li></ul><h2 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h2><p>该部分介绍实验中的收获。</p><p>在这次实验中熟悉了<code>DFS</code>算法的使用,新学习了<code>GBFS</code>与<code>DLX</code>两种高级搜索算法,学习了<code>Unity</code>的基本使用方法,同时对Unity所使用的<code>C#</code>语言有了一定的了解,通过与本学期所学习的<code>C++</code>进行对比,对面向对象的编程语言有了深入理解,学习了C++与C#中<code>多线程</code>的调用与执行方式,通过编写这样一个小项目,也提高了代码组织能力和问题的发现与解决能力</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OJ习题报告(上机2)</title>
      <link href="/2021/08/07/oj-xi-ti-bao-gao-shang-ji-2/"/>
      <url>/2021/08/07/oj-xi-ti-bao-gao-shang-ji-2/</url>
      
        <content type="html"><![CDATA[<h2 id="题目与要求"><a href="#题目与要求" class="headerlink" title="题目与要求"></a>题目与要求</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>Time limit: 1000 ms</p><p>Memory limit: 256 MB</p><p>Standard I/O</p><p>仔细学习老师关于“递归”的ppt之后,你学会了如何将一个逆波兰式转换回原本的表达式；只是,有些时候,你会输出大量多余的括号。<br>这次,我们仍旧要将一个逆波兰式转换回一个正常的表达式—— 但不能输出任何多余的括号 。</p><p>【警告】可以使用栈,但不允许使用C++的std::stack</p><p><a href="https://git.ustc.edu.cn/programming-ii-spring2021/DiscussionBoard/-/issues/15">【逆逆波兰式】题面中的“多余”说明</a></p><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入有且只有一行,行末回车符前只会出现“+”“-”“*”“/”和数字“0”到“9”；数字至少出现一次,每一个数字代表一个单独的数值（原表达式和逆波兰式中的数都是一位数）。<br>zr</p><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h3><p>输出包括一行,为输入逆波兰式对应的原表达式,但不能有任何多余的括号！</p><ul><li><p>样例输入 123++<br>  样例输出 1+(2+3)</p></li><li><p>样例输入 12+3+<br>  样例输出 1+2+3</p></li><li><p>样例输入 12+34+*<br>  样例输出 (1+2)*(3+4)</p></li><li><p>样例输入 123*+<br>  样例输出 1+2*3</p></li></ul><h2 id="具体设计"><a href="#具体设计" class="headerlink" title="具体设计"></a>具体设计</h2><p>该部分<strong>简单介绍</strong>题目实现的细节,例如,包括哪些函数,函数参数是什么,作用是什么等。</p><p>主要思路是使用分治法来将逆波兰式拆分成多个子式,递归地拆分直到拆到单个的数字或者符号,再将各部分按顺序拼接就得到了原表达式</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void transfer(char symbol,char condition)// The expression in result is in reverse order,condition is a symbol of right(1) or left(0){char symnow=expression[position--];if(symnow&gt;='0'&amp;&amp;symnow&lt;='9') result[strlen(result)]=symnow;else{//Judge whether it is necessary to add the bracketsif((compare(symnow)&lt;compare(symbol))||(compare(symnow)==compare(symbol)&amp;&amp;condition==1)){result[strlen(result)]=')';transfer(symnow,1);result[strlen(result)]=symnow;transfer(symnow,0);result[strlen(result)]='(';}else{transfer(symnow,1);result[strlen(result)]=symnow;transfer(symnow,0);}}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>symbol</code>表示当前拆分的式子的连接符号,<code>condition</code>用于表示函数操作的子式位于符号的左侧（0）或是符号的右侧（1）,<code>result</code>用于存放结果,<code>expression</code>存放初始的表达式,<code>position</code>是全局变量表示现在读取的字符位置</p><p><code>int compare(char sym)</code>函数用于将符号转化为优先级返回</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int compare(char sym){switch (sym){case '+': case '-': return 1;case '*': case '/': return 2;default : return 0;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h2><p>该部分介绍实验中遇到的bug与报错</p><ul><li><p>bug内容<br>  输出了多余的括号</p></li><li><p>bug原因<br>  未考虑基本运算顺序是从左到右的,这会使得在左侧的表达式有时不需要加括号</p></li><li><p>解决方案<br>  加入<code>condition</code>来标识表达式在符号的两侧位置来判断是否需要加括号</p></li></ul><h2 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h2><p>该部分介绍实验中的收获。</p><p>通过这次上机实验了解了逆波兰式这种表达式表示方法,同时对使用分治以及递归解决问题有了更深入的理解<span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>]]></content>
      
      
      <categories>
          
          <category> 实验报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>砖块大战</title>
      <link href="/2021/02/01/zhuan-kuai-da-zhan/"/>
      <url>/2021/02/01/zhuan-kuai-da-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机程序设计课程实践项目报告C（C-）语言版砖块大战"><a href="#计算机程序设计课程实践项目报告C（C-）语言版砖块大战" class="headerlink" title="计算机程序设计课程实践项目报告C（C++）语言版砖块大战"></a>计算机程序设计课程实践项目报告C（C++）语言版砖块大战</h1><p>作者：hyjwpk/MAX-WILL-WIN</p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>本项目使用Visual Studio环境编写，使用EasyX库实现，通过玩家对横板的控制实现游戏互动，使玩家在控制小球击打砖块的过程中获得愉悦感，本游戏新增现代元素及创新性设计，可以为玩家提供新的游戏体验。</p><p>关键词：横板任意移动，音效生动有趣，可调游戏难度，可获游戏道具，生命上限、时间上限、游戏排行设计精美。</p><h2 id="0-项目结构"><a href="#0-项目结构" class="headerlink" title="0 项目结构"></a>0 项目结构</h2><pre class="line-numbers language-none"><code class="language-none">│  blocks-battle.sln                    # visual studio 解决方案│  cmd.c                                # 控制台版本│├─blocks-battle                         # c++源代码│  │  ball.cpp│  │  ball.h│  │  blocks-battle.aps│  │  blocks-battle.cpp│  │  blocks-battle.h│  │  blocks-battle.rc│  │  blocks-battle.vcxproj│  │  blocks-battle.vcxproj.filters│  │  blocks-battle.vcxproj.user│  │  board.cpp│  │  board.h│  │  brick.cpp│  │  brick.h│  │  button.cpp│  │  button.h│  │  color.cpp│  │  color.h│  │  cpp.hint│  │  define.h│  │  difficulty.cpp│  │  difficulty.h│  │  exit.cpp│  │  exit.h│  │  flash.cpp│  │  flash.h│  │  game.cpp│  │  game.h│  │  heart.cpp│  │  heart.h│  │  highscore.txt│  │  load.cpp│  │  load.h│  │  menu.cpp│  │  menu.h│  │  mouse.cpp│  │  mouse.h│  │  music.cpp│  │  music.h│  │  musicbtn.cpp│  │  musicbtn.h│  │  pch.cpp│  │  pch.h│  │  resource.h│  │  save.txt│  │  script.cpp│  │  script.h│  │  settings.cpp│  │  settings.h│  │  stage.cpp│  │  stage.h│  │  star.cpp│  │  star.h│  │  start.cpp│  │  start.h│  │  time.cpp│  │  time.h│  │  top.cpp│  │  top.h│  ││  └─Debug                              # visual studio 编译文件                             │└─Debug                                 # 可执行文件编译目录    │  blocks-battle.exe    │  blocks-battle.exe.lastcodeanalysissucceeded    │  blocks-battle.pdb    │  highscore.txt    │  save.txt    │    └─resourses                         # 资源文件        ├─document        │      stage1.txt        │      stage2.txt        │      stage3.txt        │      stage4.txt        │      stage5.txt        │      stage6.txt        │      stage7.txt        │      stage8.txt        │        ├─picture        │      background.jpg        │      heart.png        │      heartmask.png        │      tflash.png        │      tflashmask.png        │      球.ico        │        └─sound                background.mp3                crash.mp3                dead.mp3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-项目概述"><a href="#1-项目概述" class="headerlink" title="1 项目概述"></a>1 项目概述</h2><h3 id="1-1-项目特点"><a href="#1-1-项目特点" class="headerlink" title="1.1 项目特点"></a>1.1 项目特点</h3><p>本游戏是以Visual Studio 2019/EasyX为开发环境开发出来的在Windows界面下的C/C++语言砖块弹球碰撞游戏，游戏画面流畅，操作简便，思路新颖，实现了完整的游戏流程，采用EasyX实现图形化，改善了游戏界面。</p><h3 id="1-2-项目设计"><a href="#1-2-项目设计" class="headerlink" title="1.2 项目设计"></a>1.2 项目设计</h3><p>打砖块游戏是经典的休闲游戏，通过方向键或鼠标的控制，让小球通过不断反弹消除砖块来获取分数。本项目通过C/C++语言来实现游戏功能，同时在传统的打砖块游戏基础上加入新的元素，提升游戏可玩性。</p><h4 id="1-2-1-功能分析"><a href="#1-2-1-功能分析" class="headerlink" title="1.2.1 功能分析"></a>1.2.1 功能分析</h4><p>(1)单机闯关</p><p>(2)存档保存</p><p>(3)难度调节</p><p>(4)游戏道具</p><p>(5)分数排行</p><h4 id="1-2-2-性能分析"><a href="#1-2-2-性能分析" class="headerlink" title="1.2.2 性能分析"></a>1.2.2 性能分析</h4><p>(1)游戏画面流畅</p><p>(2)游戏画面精美</p><p>(3)物理模型良好</p><h3 id="1-3-小组分工"><a href="#1-3-小组分工" class="headerlink" title="1.3 小组分工"></a>1.3 小组分工</h3><h4 id="1-3-1-hyjwpk"><a href="#1-3-1-hyjwpk" class="headerlink" title="1.3.1 hyjwpk"></a>1.3.1 hyjwpk</h4><p>(1)游戏按钮</p><p>(2)游戏排行</p><p>(3)游戏地图</p><p>(4)得分机制</p><p>(5)背景音乐</p><p>(6)背景与过场</p><p>(7)道具掉落概率</p><p>(8)资源文件的封装</p><p>(9)多线程鼠标检测</p><p>(10)鼠标与键盘操控</p><p>(11)存档的写入与读取</p><h4 id="1-3-2-MAX-WILL-WIN"><a href="#1-3-2-MAX-WILL-WIN" class="headerlink" title="1.3.2 MAX-WILL-WIN"></a>1.3.2 MAX-WILL-WIN</h4><p>(1)游戏道具</p><p>(2)游戏分数</p><p>(3)游戏生命</p><p>(4)游戏说明</p><p>(5)计时模块</p><p>(6)横板移动机制</p><p>(7)关卡标题界面</p><p>(8)碰撞与死亡声音</p><p>(9)设置功能的设计</p><p>(10)按键移动及暂停</p><p>(11)横板的移动边界控制</p><h2 id="2-系统设计"><a href="#2-系统设计" class="headerlink" title="2 系统设计"></a>2 系统设计</h2><h3 id="2-1-系统总体设计"><a href="#2-1-系统总体设计" class="headerlink" title="2.1 系统总体设计"></a>2.1 系统总体设计</h3><h4 id="游戏有完善的开始界面，包括以下几项："><a href="#游戏有完善的开始界面，包括以下几项：" class="headerlink" title="游戏有完善的开始界面，包括以下几项："></a>游戏有完善的开始界面，包括以下几项：</h4><p>(1)开始游戏</p><p>(2)游戏说明</p><p>(3)游戏设置</p><p>(4)分数排行</p><p>(5)存档读取</p><p>(6)退出游戏</p><h4 id="游戏中的功能包括："><a href="#游戏中的功能包括：" class="headerlink" title="游戏中的功能包括："></a>游戏中的功能包括：</h4><p>(1)游戏的暂停和开始</p><p>(2)游戏的得分与生命的显示</p><p>(3)关卡的进入与退出</p><p>(4)道具的获取与使用</p><p>(5)退出游戏</p><h3 id="2-2-主要数据结构"><a href="#2-2-主要数据结构" class="headerlink" title="2.2 主要数据结构"></a>2.2 主要数据结构</h3><p>使用类来创建游戏的各个组件</p><h3 id="2-3-模块设计"><a href="#2-3-模块设计" class="headerlink" title="2.3 模块设计"></a>2.3 模块设计</h3><p><img src="%E5%9B%BE%E7%89%87/%E7%BB%93%E6%9E%84.png" alt="结构"></p><h4 id="2-3-1-主函数"><a href="#2-3-1-主函数" class="headerlink" title="2.3.1 主函数"></a>2.3.1 主函数</h4><p>对窗口的控制：禁用绘图窗口的关闭按钮、为窗口命名</p><p>创建线程</p><p>导入菜单界面</p><h4 id="2-3-2-菜单模块"><a href="#2-3-2-菜单模块" class="headerlink" title="2.3.2 菜单模块"></a>2.3.2 菜单模块</h4><p>该模块的功能是：输出菜单界面以及在选择相应按钮后系统做出的反应。 </p><p>在本游戏中，菜单界面使用鼠标控制，真实感与体验效果较好。</p><p>游戏菜单共有六个选项：开始、继续、设置、说明、排行、退出。它们分别控制着游戏的开始、存档的读取、游戏内容的控制、游戏说明的呈现、游戏得分排行的呈现、以及游戏的退出。</p><h4 id="2-3-3-打印模块"><a href="#2-3-3-打印模块" class="headerlink" title="2.3.3 打印模块"></a>2.3.3 打印模块</h4><h5 id="主模块通过二维数组来实现在屏幕打印功能，具体打印的功能如下"><a href="#主模块通过二维数组来实现在屏幕打印功能，具体打印的功能如下" class="headerlink" title="主模块通过二维数组来实现在屏幕打印功能，具体打印的功能如下"></a>主模块通过二维数组来实现在屏幕打印功能，具体打印的功能如下</h5><p>游戏边框，一个设定的矩形边框。</p><p>屏幕上的砖块、操纵的横板、移动的小球。</p><p>得分，说明等提示消息。</p><h5 id="外层界面"><a href="#外层界面" class="headerlink" title="外层界面"></a>外层界面</h5><p>游戏图标的显示及游戏名在程序头的显示。</p><p>游戏菜单的显示，包括游戏说明、游戏排行的显示。</p><p>各个关卡的切入和转接。</p><p>游戏设置的显示——包括游戏难度、游戏音效、时间上限的设定。</p><p>失败后、成功后的显示界面。</p><h4 id="2-3-4-判断模块"><a href="#2-3-4-判断模块" class="headerlink" title="2.3.4 判断模块"></a>2.3.4 判断模块</h4><p>该模块主要功能是逻辑判断功能模块，判断的内容主要是：</p><h5 id="判断游戏是否结束："><a href="#判断游戏是否结束：" class="headerlink" title="判断游戏是否结束："></a>判断游戏是否结束：</h5><p>根据关卡数达到最大和砖块全部消失来判断游戏是否结束（成功）。</p><p>根据生命数是否等于零来判断游戏是否结束（失败）。</p><p>根据游戏设置中的时间选项。若游戏进行时间超过设置时间，则生命值减一。</p><h5 id="判断小球的运动：检测小球与横板、边界、砖块（碰撞时消失）的碰撞。"><a href="#判断小球的运动：检测小球与横板、边界、砖块（碰撞时消失）的碰撞。" class="headerlink" title="判断小球的运动：检测小球与横板、边界、砖块（碰撞时消失）的碰撞。"></a>判断小球的运动：检测小球与横板、边界、砖块（碰撞时消失）的碰撞。</h5><h5 id="判断是否得分：通过判断小球与砖块的撞击来判断是否得分。"><a href="#判断是否得分：通过判断小球与砖块的撞击来判断是否得分。" class="headerlink" title="判断是否得分：通过判断小球与砖块的撞击来判断是否得分。"></a>判断是否得分：通过判断小球与砖块的撞击来判断是否得分。</h5><h5 id="判断是否得到生命：通过检测心形与横板的位置关系来判断是否成功接住了心形。"><a href="#判断是否得到生命：通过检测心形与横板的位置关系来判断是否成功接住了心形。" class="headerlink" title="判断是否得到生命：通过检测心形与横板的位置关系来判断是否成功接住了心形。"></a>判断是否得到生命：通过检测心形与横板的位置关系来判断是否成功接住了心形。</h5><h5 id="判断游戏难度：通过在菜单中的“设置”选项中选择，可调节游戏难度1-3（1为最简单）"><a href="#判断游戏难度：通过在菜单中的“设置”选项中选择，可调节游戏难度1-3（1为最简单）" class="headerlink" title="判断游戏难度：通过在菜单中的“设置”选项中选择，可调节游戏难度1~3（1为最简单）"></a>判断游戏难度：通过在菜单中的“设置”选项中选择，可调节游戏难度1~3（1为最简单）</h5><h5 id="判断游戏模式：通过在菜单中的“设置”选项中选择，可调节游戏模式为鼠标模式和键盘模式。这两种模式分别仅使用鼠标或键盘控制游戏。"><a href="#判断游戏模式：通过在菜单中的“设置”选项中选择，可调节游戏模式为鼠标模式和键盘模式。这两种模式分别仅使用鼠标或键盘控制游戏。" class="headerlink" title="判断游戏模式：通过在菜单中的“设置”选项中选择，可调节游戏模式为鼠标模式和键盘模式。这两种模式分别仅使用鼠标或键盘控制游戏。"></a>判断游戏模式：通过在菜单中的“设置”选项中选择，可调节游戏模式为鼠标模式和键盘模式。这两种模式分别仅使用鼠标或键盘控制游戏。</h5><h4 id="2-3-5-游戏逻辑模块"><a href="#2-3-5-游戏逻辑模块" class="headerlink" title="2.3.5 游戏逻辑模块"></a>2.3.5 游戏逻辑模块</h4><p>该模块是游戏的主要模块，游戏需要有逻辑规则来保证趣味性的，该模块主要包括的功能函数有：</p><p>(1)保证左右键的作用，移动（加速）。</p><p>(2)保证分数的更新和相应游戏模式的变化。</p><p>(3)保证游戏规则。</p><p>(4)控制横板的移动速度以及移动上限，控制小球移动速度。</p><p>(5)控制游戏时间、生命值与得分值。</p><p>(6)控制游戏的操作模式。</p><h3 id="2-4-开发语言和开发工具"><a href="#2-4-开发语言和开发工具" class="headerlink" title="2.4 开发语言和开发工具"></a>2.4 开发语言和开发工具</h3><p>本系统采用C语言和C++语言作为开发语言，在Visual Studio环境下编译，并且调用了一些数据库。</p><h4 id="C语言的主要特点如下："><a href="#C语言的主要特点如下：" class="headerlink" title="C语言的主要特点如下："></a>C语言的主要特点如下：</h4><p>(1)语言简洁、紧凑，使用方便。</p><p>(2)语法丰富、灵活，能力强</p><p>(3)运算符和数据类型丰富，具有现代语言的各种数据结构。 </p><p>(4)具有结构化的语句，可控制数据的存储位置和初始化过程。</p><p>(5)指针的存在可以简化算法实现。</p><p>(6)语法限制不太严格，程序设计自由度大。 </p><p>(7)生成的目标代码质量高，程序执行效率高。 </p><p>(8)用C语言编写的程序可移植性比较好，基本上不做任何修改就能运用于各种型号的操作系统中。 </p><p>(9)C语言允许直接访问物理地址，能进行位操作，能实现汇编语言的大部分功能，可以直接对硬件进行操作。提供丰富的操作符集合可执行底层运算，是“高层”的汇编语言。 </p><p>(10)嵌入其它高级语言充当底层，包含其它低级语言充当封装。</p><p>(11)简化了编写过程和系统界面。</p><h4 id="C-语言的主要特点如下："><a href="#C-语言的主要特点如下：" class="headerlink" title="C++语言的主要特点如下："></a>C++语言的主要特点如下：</h4><p>(1)同时支持面向过程和面向对象的方法——既可以进行面向对象的程序设计，也可以进行面向过程的程序设计。因此，它具有数据封装和隐藏、继承和多态等面向对象的特征；</p><p>(2)兼容C语言；</p><p>(3)结构清晰、易于扩充；</p><h4 id="Visual-Studio-IDE的主要优点："><a href="#Visual-Studio-IDE的主要优点：" class="headerlink" title="Visual Studio IDE的主要优点："></a>Visual Studio IDE的主要优点：</h4><p>(1)语义错误检查功能强大；</p><p>(2)体系结构清晰，便于团队开发；</p><p>(3)自带资源文件，管理资源方便；</p><h4 id="对于各个数据库的使用："><a href="#对于各个数据库的使用：" class="headerlink" title="对于各个数据库的使用："></a>对于各个数据库的使用：</h4><p>使用了EasyX提供的graphics.h库。该库包含easy.x库，可以提供颜色模型、图形绘制、图像处理、鼠标控制、文字输出等有关函数；</p><p>使用了Winmm.lib库。该库提供了有关声音输出的函数；</p><p>使用了stdio.h库。该库提供printf()等函数；</p><p>使用了math.h库。该库提供fabs()等函数；</p><p>使用了time.h库。利用该库进行随机生成、运行时间输出等操作；</p><p>使用了conic.h库。利用该库的_kbnit函数读取键盘输入。</p><h2 id="3-系统测试"><a href="#3-系统测试" class="headerlink" title="3 系统测试"></a>3 系统测试</h2><h3 id="3-1-系统运行"><a href="#3-1-系统运行" class="headerlink" title="3.1 系统运行"></a>3.1 系统运行</h3><h4 id="游戏界面"><a href="#游戏界面" class="headerlink" title="游戏界面"></a>游戏界面</h4><p>(1)菜单界面：包含“开始”、“继续”、 “设置”、“说明”、“排行”、“退出”共六个按钮，它们分别控制着游戏的开始、存档的读取、游戏内容的控制、游戏说明的呈现、游戏得分排行的呈现、游戏的退出。</p><p>(2)游戏说明界面：呈现对游戏的简单介绍和方法说明。</p><p>(3)跳转界面：包含转接动画和回合说明。</p><p>(4)游戏界面：左侧为游戏区，包括砖块、弹球、横板、以及有一定概率出现的心形和闪电道具；右侧为功能区，包括生命值、游戏得分、游戏时间。</p><p>(5)游戏设置界面：点入后正常显示，分为“难度”、“音效”、“时间”、“鼠标”四个选项，通过鼠标的点选，可实现难度1~3的调节、音效开关的调节、游戏时间（50秒、500秒、无限）的调节、鼠标和按键操作方式的调节。</p><p>(6)失败界面：界面内显示“YOU  LOSE”字样，下方有“重玩”和“退出”两个选项。选择“重玩”则跳转回菜单界面，选择“退出”则游戏关闭。</p><p>(7)成功界面：界面内显示“CONGRATULATIONS”字样，按任意键即可返回菜单界面。</p><h4 id="游戏控制方法"><a href="#游戏控制方法" class="headerlink" title="游戏控制方法"></a>游戏控制方法</h4><p>(1)使用鼠标控制横板移动。</p><p>(2)生命值的上限是三。每错掉一次球，生命值减一。球每撞击一次砖块，有一定的概率掉落❤，需用横板接住❤方可使得生命值加一。若生命值为零，则游戏失败。每次进入下一关卡，生命值自动补满。</p><p>(3)通过调节设置中的选项来调节游戏难度（1为最简单）以及音效和时间限制。</p><h4 id="游戏体验："><a href="#游戏体验：" class="headerlink" title="游戏体验："></a>游戏体验：</h4><p>―在只剩最后一至二个砖块时较为难打预备解决方案：将横板的上限设置于最底层砖块的下沿。</p><p>―小球移动速度过慢预备解决方案：增加flash道具，当横板接到flash时小球速度增加。</p><p>―球与砖块连续两次碰撞时有卡顿。</p><p>―连击控制方向键时总是卡顿，无法立即启动。</p><p>―将打砖块这个游戏的功能通过代码完美的实现了出来，而且还可以进一步修改bug以及对功能进行拓展。在游戏画面方面，过场动画可谓是十分的流畅，给人一种恰到好处的舒畅感，同时搭配的背景音乐又让游戏显得不枯燥乏味，nice!</p><h3 id="3-2-系统测试"><a href="#3-2-系统测试" class="headerlink" title="3.2 系统测试"></a>3.2 系统测试</h3><p>本章给出对哪些模块做了哪些测试。例如多次运行是否出错，观察内存是否有泄露，CPU占用率等等。</p><h4 id="对各个模块的测试："><a href="#对各个模块的测试：" class="headerlink" title="对各个模块的测试："></a>对各个模块的测试：</h4><p>(1)对游戏菜单的测试：</p><p>进入游戏后，立刻播放了背景音乐。鼠标在按钮上悬停时，按钮变为深色，点按按钮时，按钮缩小。用鼠标点按了各个选项，测试其是否都能够正常工作。</p><p>(2)对游戏说明的测试：</p><p>按下任意键，均可以返回菜单界面。</p><p>(3)对游戏排行的测试：</p><p>多次进行游戏，游戏排行可以正常记录游戏得分情况</p><p>(4)对游戏界面的测试：</p><p>(5)对横板移动的测试：</p><p>点击“开始”进入游戏后，可以正常跳转进入关卡界面。横板可以正常且灵活地移动。</p><p>(6)对小球撞击、生命增加及音乐模块的测试：</p><p>小球撞击砖块后，砖块消失，消砖块音效响起，得分加一，小球正常反向运动，掉落❤的几率约为10%，心形掉落后，竖直向下匀速运动，被横板接住后，消失，生命值加一，右上角的❤数量加一（若此时生命值为满[3]，则生命值不再增加）。小球撞击横板后水平运动的速度与其撞击在横板上的可以很好地符合线性关系。小球撞击边框后，速度正常反向。小球未被横板接住而掉出游戏下边界时，生命值减一，右上角的❤数量减一。横板位置不动，瞬间新的小球从横板的正中央向上匀速运动。在此过程中，时间值继续计数，得分不变。若生命值为零（右上角失去了所有的❤），则跳转失败界面，立刻播放了GAMEOVER的音效，此时操作任何鼠标按键（除了Alt+F4）均无法进入其他界面或退出游戏。可以用鼠标点按“重玩”或“退出”两个按键，点按“重玩”后返回游戏主菜单，若再次点按游戏主菜单中的“继续”选项，游戏仍将重新开始，与点按“开始”选项的效果相同。游戏失败界面中若点按“退出”，则程序关闭，游戏退出，但得分值仍记录进入“排行”中。每一关的最后一个砖块被消除后，可以正常跳转。当游戏进行至最后一关，砖块全部被消除时，游戏结束，界面内显示“CONGRATULATIONS”字样。</p><h4 id="多次运行后，可以查看存档文件及排行文件，并不出错。"><a href="#多次运行后，可以查看存档文件及排行文件，并不出错。" class="headerlink" title="多次运行后，可以查看存档文件及排行文件，并不出错。"></a>多次运行后，可以查看存档文件及排行文件，并不出错。</h4><h4 id="游戏运行时，CPU占有率为25-左右，内存约14500K，并无内存泄漏情况。"><a href="#游戏运行时，CPU占有率为25-左右，内存约14500K，并无内存泄漏情况。" class="headerlink" title="游戏运行时，CPU占有率为25%左右，内存约14500K，并无内存泄漏情况。"></a>游戏运行时，CPU占有率为25%左右，内存约14500K，并无内存泄漏情况。</h4><h2 id="4-结论和体会"><a href="#4-结论和体会" class="headerlink" title="4 结论和体会"></a>4 结论和体会</h2><p>经过以上各章节的功能，我们已经基本完成了打砖块的开发。打砖块是一个趣味性和操作性很强的游戏。游戏从简单的菜单选项界面到打印砖块和边框再到实现图形化界面，鼠标操控；游戏逻辑也得到改善，从简单地判断碰撞，增加至判断得分与生命的获得。在游戏逐步由简到难的过程中，我们极好地锻练了编程能力。</p><p>游戏不仅需要灵活的交互功能，还需要界面友好，应该具有操作简单和趣味性强的功能。界面应该尽量美观友好、多姿多彩，完全的图形化设计，才能使得操作者易于上手。而且，我们发现，多种媒体技术的集成利用，可以方便的完成用户乐于接受的各种界面设计。本系统虽具备了基本的功能，但由于时间关系，还有很多功能待实现，在此基础上结合实际应用中所出现的问题，还应该加入更多游戏模式的功能。</p><p>通过这次编程我们深深的感受到对代码的变量命名，代码内注释格式，甚至嵌套中行缩进的长度和函数间的空行数字都应该有明确规定。良好的编写习惯，不但有助于代码的移植和纠错，也有助于不同人员之间的协作。我们还要有模块化思维能力，模块化思维就是编程任何一个功能模块或函数的时候，要多想一些，不局限于完成当前任务的简单思路上，而是深入思考该模块是否可以脱离这个系统存在，是否可以通过简单的修改参数的方式和存储资源文件的方式而使得程序可以在其他系统和应用环境下直接使用，这样就能极大避免重复性的开发工作. 善于总结，也是学习能力的一种体现，每次完成一个编程任务，完成一段代码，都应当有目的的跟踪该程序的应用状况，随时总结，找到自己的不足，这样所编写的程序才能逐步提高。</p><h2 id="5-游戏截图"><a href="#5-游戏截图" class="headerlink" title="5 游戏截图"></a>5 游戏截图</h2><p><img src="%E5%9B%BE%E7%89%87/1.jpg" alt="1"></p><p><img src="%E5%9B%BE%E7%89%87/4.png" alt="4"></p><p><img src="%E5%9B%BE%E7%89%87/5.png" alt="5"></p><p><img src="%E5%9B%BE%E7%89%87/6.png" alt="6"></p><p><img src="%E5%9B%BE%E7%89%87/9.png" alt="9"></p><p><img src="%E5%9B%BE%E7%89%87/10.png" alt="10"></p><p><img src="%E5%9B%BE%E7%89%87/11.png" alt="11"></p><p><img src="%E5%9B%BE%E7%89%87/12.png" alt="12"></p><h2 id="6-参考文献"><a href="#6-参考文献" class="headerlink" title="6 参考文献"></a>6 参考文献</h2><ul><li><p><a href="https://codeabc.cn/yangw/a/embed-music-in-an-exe-file">将 mp3 以资源形式嵌入 exe 中使用</a>  </p></li><li><p><a href="https://codeabc.cn/yangw/a/embed-pictures-in-an-exe-file">读取图片的技巧：将图片内嵌到 exe 文件中</a>  </p></li><li><p><a href="https://www.cnblogs.com/gakusei/articles/1352922.html">在VC中使用自定义资源,FindResource,LoadResource,LockResource</a>  </p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大作业 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
